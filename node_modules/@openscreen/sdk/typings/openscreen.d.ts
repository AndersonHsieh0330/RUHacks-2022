import { AxiosInstance } from 'axios';
import { CognitoUserSession } from 'amazon-cognito-identity-js';
import { CognitoUserAsync } from './auth/cognito-user-async';
import { SdkResources, QrCode } from './sdk';
import { ICloudConfig } from './cloud-config';
import { IConfig } from './config';
import { IOpenscreenSession } from './openscreen-session';
import { UserPool } from './auth/user-pool';
export declare class Openscreen extends SdkResources implements IOpenscreenSession {
    protected _config?: IConfig;
    protected cloudConfigName?: string;
    protected cloudConfig?: Promise<ICloudConfig>;
    protected userPool?: UserPool;
    protected userId?: string;
    protected usingApiKey: boolean;
    protected isAdministrator?: boolean;
    protected activeUser?: Promise<CognitoUserAsync>;
    protected axios?: AxiosInstance;
    debugConfig: boolean;
    debugAuth: boolean;
    debugRequest: boolean;
    debugResponse: boolean;
    debugError: boolean;
    debugQuery: boolean;
    debugOptions: boolean;
    constructor();
    getSession(): this;
    config(config: IConfig): Openscreen;
    getConfig(): IConfig;
    authorize(): Promise<CognitoUserAsync>;
    getCloudConfig(): Promise<ICloudConfig>;
    getActiveUser(): Promise<CognitoUserAsync>;
    getActiveSession(): Promise<CognitoUserSession>;
    authorizedUserId(): Promise<string>;
    amIAdministrator(): Promise<boolean>;
    getAxios(): Promise<AxiosInstance>;
    saveQrImageDataToFile(qrCode: QrCode, path?: string): Promise<void>;
}
//# sourceMappingURL=openscreen.d.ts.map