{"version":3,"file":"index.modern.js","sources":["../src/request.ts","../src/sdk.ts","../src/request-delete.ts","../src/request-get.ts","../src/request-patch.ts","../src/request-post.ts","../src/resource.ts","../src/auth/cognito-user-async.ts","../src/auth/cognito-user-pool-async.ts","../src/auth/user-pool.ts","../src/openscreen.ts"],"sourcesContent":["/* eslint-disable no-console, import/no-cycle */\nimport {IOpenscreenSession} from './openscreen-session'\n\nexport interface RequestRouteSegment {\n  parm?: string\n  routePart: string\n  sdkPartName: string\n}\n\nexport class Request {\n  session: IOpenscreenSession\n  routeSegments?: RequestRouteSegment[]\n\n  constructor(session: IOpenscreenSession) {\n    this.session = session\n  }\n\n  async makeUri(pathParameters: any = {}) {\n    const cloudConfig = await this.session.getCloudConfig()\n    const urlParts: string[] = [cloudConfig.endpoint.replace(/\\/+$/, '')]\n    this.routeSegments!.forEach((segment) => {\n      urlParts.push(segment.routePart)\n      if (segment.parm) {\n        const value = pathParameters[segment.parm!]\n        if (!value) {\n          throw Error(`Openscreen: missing path parameter value for '${segment.parm!}'`)\n        }\n        urlParts.push(value)\n      }\n    })\n    return urlParts.join('/')\n  }\n\n  async getAuthorization(): Promise<string> {\n    const session = await this.session.getActiveSession()\n    const token = await session.getAccessToken().getJwtToken()\n    return `Bearer ${token}`\n  }\n\n  debugRequest(method: string, url: string, queryParameters?: any, body?: any, options?: any) {\n    if (this.session.debugRequest) {\n      console.debug(`Openscreen REQUEST: ${method.toUpperCase()} ${url}`)\n      if (body) console.debug(`Openscreen REQUEST: ${JSON.stringify(body, null, 2)}`)\n      if (queryParameters && this.session.debugQuery) {\n        console.debug(`Openscreen QUERY: ${JSON.stringify(queryParameters, null, 2)}`)\n      }\n      if (options && this.session.debugOptions) {\n        console.debug(`Openscreen OPTIONS: ${JSON.stringify(options, null, 2)}`)\n      }\n    }\n  }\n\n  debugResponse(response: any) {\n    if (this.session.debugResponse) {\n      console.debug(`Openscreen RESPONSE: ${JSON.stringify(response.data || {}, null, 2)}`)\n    }\n  }\n\n  handleAndDebugErr(err: any): any {\n    if (err.response && err.response.data) {\n      if (this.session.debugError) {\n        console.error(`Openscreen ERROR: ${JSON.stringify(err.response.data, null, 2)}`)\n      } else if (this.session.debugResponse) {\n        console.error(`Openscreen RESPONSE: ${JSON.stringify(err.response.data, null, 2)}`)\n      }\n      return err.response.data\n    }\n    if (this.session.debugError) {\n      try {\n        console.error(err)\n      } catch {\n        console.error(`Openscreen: (unable to print error)`)\n      }\n    }\n    return err\n  }\n}\n","import {RequestRouteSegment} from './request'\nimport {RequestDelete} from './request-delete'\nimport {RequestGet} from './request-get'\nimport {RequestPatch} from './request-patch'\nimport {RequestPost} from './request-post'\nimport {Resource, Resources} from './resource'\n\nexport interface NestedKeyValueObject {\n  [key: string]: string | number | boolean | NestedKeyValueObject\n}\n// ENUMERATIONS\n\nexport enum AccountStatus {\n  ACTIVE = 'ACTIVE',\n  SUSPENDED = 'SUSPENDED',\n}\n\nexport enum AccountUserRole {\n  OWNER = 'OWNER',\n  ADMINISTRATOR = 'ADMINISTRATOR',\n  BILLING_CONTACT = 'BILLING_CONTACT',\n  MEMBER = 'MEMBER',\n  API_KEY = 'API_KEY',\n  INVITATION_DECLINED = 'INVITATION_DECLINED',\n}\n\nexport enum PricePlanName {\n  INDIVIDUAL_STARTER = 'individualStarter',\n  INDIVIDUAL_PRO = 'individualPro',\n  ENTERPRISE_STARTER = 'enterpriseStarter',\n  ENTERPRISE_PRO = 'enterprisePro',\n  ENTERPRISE_CUSTOM = 'enterpriseCustom',\n  UNLIMITED = 'unlimited',\n}\n\nexport enum PricePlanPaymentPeriod {\n  MONTHLY = 'monthly',\n  ANNUAL = 'annual',\n}\n\nexport enum PricePlanReporting {\n  BASIC = 'basic',\n  ADVANCED = 'advanced',\n  basic = 'basic',\n  advance = 'advanced',\n}\n\nexport enum ProjectStatus {\n  ACTIVE = 'ACTIVE',\n  SUSPENDED = 'SUSPENDED',\n}\n\nexport enum QrCodeDynamicRedirectType {\n  NO_SCAN_ID = 'NO_SCAN_ID',\n  SCAN_ID_IN_PATH_PARAMETER = 'SCAN_ID_IN_PATH_PARAMETER',\n  SCAN_ID_IN_QUERY_STRING_PARAMETER = 'SCAN_ID_IN_QUERY_STRING_PARAMETER',\n}\n\nexport enum QrCodeErrorCorrectionLevel {\n  L = 'L',\n  M = 'M',\n  Q = 'Q',\n  H = 'H',\n}\n\nexport enum QrCodeIntentType {\n  STATIC_REDIRECT = 'STATIC_REDIRECT',\n  DYNAMIC_REDIRECT = 'DYNAMIC_REDIRECT',\n  DYNAMIC_REDIRECT_TO_APP = 'DYNAMIC_REDIRECT_TO_APP',\n}\n\nexport enum QrCodeLocatorKeyType {\n  SHORT_URL = 'SHORT_URL',\n  HASHED_ID = 'HASHED_ID',\n  SECURE_ID = 'SECURE_ID',\n}\n\nexport enum QrCodeStatus {\n  ACTIVE = 'ACTIVE',\n  INACTIVE = 'INACTIVE',\n  SUSPENDED = 'SUSPENDED',\n}\n\nexport enum QrCodeType {\n  PNG = 'PNG',\n  JPEG = 'JPEG',\n  SVG = 'SVG',\n  png = 'png',\n  jpeg = 'jpeg',\n  svg = 'svg',\n}\n\n// APPLICATION ENTITIES\n\nexport interface Entity {}\n\nexport interface DdbEntity {\n  created?: string | Date | number\n  modified?: string | Date | number\n}\n\nexport interface Response {\n  body?: DdbEntity\n  code?: number\n  created?: string | Date | number\n  data?: NestedKeyValueObject\n  message?: string\n  modified?: string | Date | number\n  name?: string\n  request?: string\n  responseId?: string\n  source?: string\n  stack?: Array<any>\n  userId?: string\n}\n\nexport interface DdbAggregatedEntity {\n  created?: string | Date | number\n  modified?: string | Date | number\n}\n\nexport interface Account {\n  accountId?: string\n  assetCount?: number\n  collectTaxInfo?: boolean\n  companyName?: string\n  contactCount?: number\n  created?: string | Date | number\n  dynamicQrCodeCount?: number\n  lastScanId?: string\n  modified?: string | Date | number\n  needsPaymentUpdate?: boolean\n  projectCount?: number\n  scanCount?: number\n  staticQrCodeCount?: number\n  status?: AccountStatus\n  stripeCustomerId?: string\n}\n\nexport interface AccountInvitation {\n  accountId?: string\n  companyName?: string\n  created?: string | Date | number\n  email?: string\n  expiresAt?: string | Date | number\n  firstName?: string\n  invitationId?: string\n  lastName?: string\n  modified?: string | Date | number\n  sendersFirstName?: string\n  sendersLastName?: string\n  sendersUserId?: string\n  userRole?: AccountUserRole\n}\n\nexport interface AccountResponse extends Account {\n  accountId?: string\n  assetCount?: number\n  collectTaxInfo?: boolean\n  companyName?: string\n  contactCount?: number\n  created?: string | Date | number\n  currentPeriod?: PricePlanPeriod\n  dynamicQrCodeCount?: number\n  lastScanId?: string\n  modified?: string | Date | number\n  needsPaymentUpdate?: boolean\n  pricePlan?: PricePlan\n  projectCount?: number\n  scanCount?: number\n  staticQrCodeCount?: number\n  status?: AccountStatus\n  stripeCustomerId?: string\n}\n\nexport interface AccountUser {\n  accountId?: string\n  created?: string | Date | number\n  modified?: string | Date | number\n  userId?: string\n  userRole?: AccountUserRole\n}\n\nexport interface ApiKey {\n  apiKeyId?: string\n  created?: string | Date | number\n  description?: string\n  key?: string\n  modified?: string | Date | number\n  name?: string\n}\n\nexport interface Asset {\n  assetId?: string\n  created?: string | Date | number\n  customAttributes?: NestedKeyValueObject\n  description?: string\n  groupId?: string\n  modified?: string | Date | number\n  name?: string\n  projectId?: string\n  scanCount?: number\n}\n\nexport interface AssetContact {\n  assetId?: string\n  contactId?: string\n  created?: string | Date | number\n  modified?: string | Date | number\n  type?: string\n}\n\nexport interface AssetGroupAsset {\n  assetId?: string\n  created?: string | Date | number\n  groupId?: string\n  modified?: string | Date | number\n}\n\nexport interface Contact {\n  cellPhone?: string\n  consent?: ContactConsent[]\n  contactId?: string\n  created?: string | Date | number\n  customAttributes?: NestedKeyValueObject\n  emailAddress?: string\n  firstName?: string\n  lastName?: string\n  mailingAddress?: ContactMailingAddress\n  middleName?: string\n  modified?: string | Date | number\n  nickname?: string\n}\n\nexport interface ContactConsent {\n  consented?: boolean\n  consentedAt?: string | Date | number\n  url?: string\n}\n\nexport interface ContactEmail {\n  contactId?: string\n  created?: string | Date | number\n  email?: string\n  modified?: string | Date | number\n  projectId?: string\n}\n\nexport interface ContactMailingAddress {\n  address?: string\n  city?: string\n  country?: string\n  postalOrZip?: string\n  provinceOrState?: string\n}\n\nexport interface ContactPhone {\n  contactId?: string\n  created?: string | Date | number\n  modified?: string | Date | number\n  phone?: string\n  projectId?: string\n}\n\nexport interface EmailInvitation {\n  accountId?: string\n  created?: string | Date | number\n  email?: string\n  expiresAt?: string | Date | number\n  invitationId?: string\n  modified?: string | Date | number\n}\n\nexport interface NestedAsset {\n  customAttributes?: NestedKeyValueObject\n  description?: string\n  groupId?: string\n  name?: string\n  qrCodes?: NestedQrCode[]\n}\n\nexport interface NestedContact {\n  asset?: NestedAsset\n  cellPhone?: string\n  consent?: ContactConsent[]\n  customAttributes?: NestedKeyValueObject\n  emailAddress?: string\n  firstName?: string\n  lastName?: string\n  mailingAddress?: ContactMailingAddress\n  middleName?: string\n  nickname?: string\n  type?: string\n}\n\nexport interface NestedQrCode {\n  dynamicRedirectType?: QrCodeDynamicRedirectType\n  intent?: string\n  intentState?: NestedKeyValueObject\n  intentType?: QrCodeIntentType\n  locatorKeyType?: QrCodeLocatorKeyType\n  status?: QrCodeStatus\n  validFrom?: string | Date | number\n  validTo?: string | Date | number\n}\n\nexport interface PricePlan {\n  additionalScanCost?: number\n  annualPrice?: number\n  created?: string | Date | number\n  dataExport?: boolean\n  modified?: string | Date | number\n  monthlyPrice?: number\n  monthlyScans?: number\n  name?: string\n  paymentPeriod?: string\n  pricePlanId?: string\n  projects?: number\n  qrCodes?: number\n  reporting?: PricePlanReporting\n  roleBasedManagement?: boolean\n  stripeCustomerId?: string\n  stripePlanId?: string\n  stripeSubscriptionId?: string\n  subscriptionItemId?: string\n  users?: number\n}\n\nexport interface PricePlanPeriod {\n  additionalScans?: number\n  additionalScansCost?: number\n  created?: string | Date | number\n  modified?: string | Date | number\n  period?: string | Date | number\n  periodEndDate?: string | Date | number\n  pricePlanId?: string\n  projects?: number\n  projectsCreated?: number\n  projectsRemaining?: number\n  qrCodes?: number\n  qrCodesCreated?: number\n  qrCodesRemaining?: number\n  qrScansRemaining?: number\n  scansUsed?: number\n  users?: number\n  usersCreated?: number\n  usersRemaining?: number\n}\n\nexport interface Project {\n  assetCount?: number\n  companyName?: string\n  contactCount?: number\n  created?: string | Date | number\n  description?: string\n  dynamicQrCodeCount?: number\n  lastScanId?: string\n  modified?: string | Date | number\n  name?: string\n  projectId?: string\n  scanCount?: number\n  staticQrCodeCount?: number\n  status?: ProjectStatus\n}\n\nexport interface ProjectAccount {\n  accountId?: string\n  created?: string | Date | number\n  modified?: string | Date | number\n  projectId?: string\n}\n\nexport interface ProjectContact {\n  contactId?: string\n  created?: string | Date | number\n  modified?: string | Date | number\n  projectId?: string\n}\n\nexport interface QrCode {\n  assetId?: string\n  created?: string | Date | number\n  dynamicRedirectType?: QrCodeDynamicRedirectType\n  image?: QrCodeImage\n  intent?: string\n  intentState?: NestedKeyValueObject\n  intentType?: QrCodeIntentType\n  locatorKey?: string\n  locatorKeyType?: QrCodeLocatorKeyType\n  modified?: string | Date | number\n  qrCodeId?: string\n  scanCount?: number\n  status?: QrCodeStatus\n  validFrom?: string | Date | number\n  validTo?: string | Date | number\n}\n\nexport interface QrCodeImage {\n  data?: string\n  options?: QrCodeOptions\n}\n\nexport interface QrCodeLocator {\n  created?: string | Date | number\n  locatorKey?: string\n  modified?: string | Date | number\n  qrCodeId?: string\n}\n\nexport interface QrCodeOptions {\n  background?: string\n  backgroundGradientColors?: string\n  backgroundGradientRotation?: number\n  backgroundGradientType?: string\n  cornerDotColor?: string\n  cornerDotType?: string\n  cornerSquareColor?: string\n  cornerSquareType?: string\n  darkColor?: string\n  dataUrl?: boolean\n  dotType?: string\n  errorCorrectionLevel?: QrCodeErrorCorrectionLevel\n  foreground?: string\n  foregroundGradientColors?: string\n  foregroundGradientRotation?: number\n  foregroundGradientType?: string\n  format?: QrCodeType\n  image?: string\n  lightColor?: string\n  margin?: number\n  scale?: number\n  version?: number\n  width?: number\n}\n\nexport interface ResponseAsset {\n  assetId?: string\n  created?: string | Date | number\n  customAttributes?: NestedKeyValueObject\n  description?: string\n  groupId?: string\n  modified?: string | Date | number\n  name?: string\n  projectId?: string\n  qrCodes?: QrCode[]\n}\n\nexport interface ResponseContact extends Contact {\n  cellPhone?: string\n  consent?: ContactConsent[]\n  contactId?: string\n  created?: string | Date | number\n  customAttributes?: NestedKeyValueObject\n  emailAddress?: string\n  firstName?: string\n  lastName?: string\n  mailingAddress?: ContactMailingAddress\n  middleName?: string\n  modified?: string | Date | number\n  nickname?: string\n  type?: string\n}\n\nexport interface Scan {\n  assetId?: string\n  browserName?: string\n  browserVersion?: string\n  cpuArchitecture?: string\n  created?: string | Date | number\n  deviceModel?: string\n  deviceType?: string\n  deviceVendor?: string\n  engineName?: string\n  engineVersion?: string\n  ipAddress?: string\n  locationCityName?: string\n  locationCountryCode?: string\n  locationCountryName?: string\n  locationLatitude?: string\n  locationLongitude?: string\n  locationPostalCode?: string\n  locationRegionCode?: string\n  locationRegionName?: string\n  locationTimeZone?: string\n  modified?: string | Date | number\n  osName?: string\n  osVersion?: string\n  projectId?: string\n  qrCodeId?: string\n  scanId?: string\n  scanTime?: string | Date | number\n  userAgent?: string\n}\n\nexport interface ScanContact {\n  contactId?: string\n  created?: string | Date | number\n  modified?: string | Date | number\n  scanId?: string\n}\n\nexport interface Sms {\n  body?: string\n  contactId?: string\n  created?: string | Date | number\n  delivered?: boolean\n  deliveredAt?: string | Date | number\n  from?: string\n  inbound?: boolean\n  modified?: string | Date | number\n  phone?: string\n  price?: number\n  priceUnit?: string\n  projectId?: string\n  smsId?: string\n  smsTemplateName?: string\n  status?: string\n  to?: string\n}\n\nexport interface SmsTemplate {\n  body?: string\n  created?: string | Date | number\n  modified?: string | Date | number\n  projectId?: string\n  responseUrl?: string\n  smsTemplateName?: string\n  statusUrl?: string\n}\n\nexport interface User {\n  created?: string | Date | number\n  email?: string\n  firstName?: string\n  lastName?: string\n  middleName?: string\n  modified?: string | Date | number\n  phone?: string\n  userId?: string\n}\n\nexport interface UserCombined extends User {\n  created?: string | Date | number\n  email?: string\n  expiresAt?: string | Date | number\n  firstName?: string\n  invitationId?: string\n  lastName?: string\n  middleName?: string\n  modified?: string | Date | number\n  phone?: string\n  userId?: string\n  userRole?: AccountUserRole\n}\n\nexport interface ScanContactAccountIndex {\n  accountId?: string\n  assetId?: string\n  contactId?: string\n  created?: string | Date | number\n  indexedEntityName?: string\n  modified?: string | Date | number\n  scanId?: string\n}\n\nexport interface ScanContactProjectIndex {\n  assetId?: string\n  contactId?: string\n  created?: string | Date | number\n  indexedEntityName?: string\n  modified?: string | Date | number\n  projectId?: string\n  scanId?: string\n}\n\nexport interface ExportedScan extends Scan {\n  assetId?: string\n  assetName?: string\n  browserName?: string\n  browserVersion?: string\n  cpuArchitecture?: string\n  created?: string | Date | number\n  deviceModel?: string\n  deviceType?: string\n  deviceVendor?: string\n  engineName?: string\n  engineVersion?: string\n  ipAddress?: string\n  locationCityName?: string\n  locationCountryCode?: string\n  locationCountryName?: string\n  locationLatitude?: string\n  locationLongitude?: string\n  locationPostalCode?: string\n  locationRegionCode?: string\n  locationRegionName?: string\n  locationTimeZone?: string\n  modified?: string | Date | number\n  osName?: string\n  osVersion?: string\n  projectId?: string\n  qrCodeId?: string\n  scanId?: string\n  scanTime?: string | Date | number\n  userAgent?: string\n}\n\nexport interface AccountContact {\n  accountId?: string\n  contactId?: string\n  created?: string | Date | number\n  modified?: string | Date | number\n}\n\n// HANDLER INTERFACE TYPES\n\nexport interface CreateInvitationByAccountIdPathParameters {\n  accountId?: string\n}\n\nexport interface CreateInvitationByAccountIdRequestBody {\n  email?: string\n  firstName?: string\n  lastName?: string\n  userRole?: AccountUserRole\n}\n\nexport interface CreateInvitationByAccountIdResponseBody {\n  accountInvitation?: AccountInvitation\n  emailInvitation?: EmailInvitation\n}\n\nexport interface CreateProjectByAccountIdPathParameters {\n  accountId?: string\n}\n\nexport interface CreateProjectByAccountIdRequestBody {\n  companyName?: string\n  description?: string\n  name?: string\n}\n\nexport interface CreateProjectByAccountIdResponseBody {\n  accountId?: string\n  project?: Project\n}\n\nexport interface CreateUserByInvitationIdPathParameters {\n  invitationId?: string\n}\n\nexport interface CreateUserByInvitationIdResponseBody {\n  account?: Account\n  accountUser?: AccountUser\n}\n\nexport interface DeleteAccountPathParameters {\n  accountId?: string\n}\n\nexport interface DeleteInvitationPathParameters {\n  invitationId?: string\n}\n\nexport interface DeleteInvitationResponseBody {\n  accountInvitation?: AccountInvitation\n  emailInvitation?: EmailInvitation\n}\n\nexport interface DeleteUserByAccountIdPathParameters {\n  accountId?: string\n  userId?: string\n}\n\nexport interface DeleteUserByAccountIdResponseBody {\n  user?: User\n}\n\nexport interface GetAccountPathParameters {\n  accountId?: string\n}\n\nexport interface GetAccountResponseBody extends Account {\n  accountId?: string\n  assetCount?: number\n  collectTaxInfo?: boolean\n  companyName?: string\n  contactCount?: number\n  created?: string | Date | number\n  currentPeriod?: PricePlanPeriod\n  dynamicQrCodeCount?: number\n  lastScanId?: string\n  modified?: string | Date | number\n  needsPaymentUpdate?: boolean\n  pricePlan?: PricePlan\n  projectCount?: number\n  scanCount?: number\n  staticQrCodeCount?: number\n  status?: AccountStatus\n  stripeCustomerId?: string\n}\n\nexport interface GetAssetsByAccountIdPathParameters {\n  accountId?: string\n}\n\nexport interface GetAssetsByAccountIdQueryStringParameters {\n  lastKey?: string\n  limit?: number\n  name?: string\n}\n\nexport interface GetAssetsByAccountIdResponseBody {\n  accountId?: string\n  assets?: Asset[]\n  lastKey?: string\n  numberOfAssets?: number\n}\n\nexport interface GetContactsByAccountIdPathParameters {\n  accountId?: string\n}\n\nexport interface GetContactsByAccountIdQueryStringParameters {\n  assetName?: string\n  lastKey?: string\n  limit?: number\n}\n\nexport interface GetContactsByAccountIdResponseBody {\n  accountId?: string\n  contacts?: Contact[]\n  lastKey?: string\n  numberOfContacts?: number\n}\n\nexport interface GetInvitationPathParameters {\n  invitationId?: string\n}\n\nexport interface GetInvitationResponseBody {\n  accountInvitation?: AccountInvitation\n}\n\nexport interface GetPricePlanByAccountIdPathParameters {\n  accountId?: string\n}\n\nexport interface GetPricePlanByAccountIdResponseBody {\n  pricePlan?: PricePlan\n  pricePlanPeriod?: PricePlanPeriod\n}\n\nexport interface GetProjectsByAccountIdPathParameters {\n  accountId?: string\n}\n\nexport interface GetProjectsByAccountIdQueryStringParameters {\n  lastKey?: string\n  limit?: number\n  next?: string\n}\n\nexport interface GetProjectsByAccountIdResponseBody {\n  accountId?: string\n  lastKey?: string\n  next?: string\n  numberOfProjects?: number\n  projects?: Project[]\n}\n\nexport interface GetQrCodesByAccountIdPathParameters {\n  accountId?: string\n}\n\nexport interface GetQrCodesByAccountIdQueryStringParameters {\n  assetName?: string\n  lastKey?: string\n  limit?: number\n}\n\nexport interface GetQrCodesByAccountIdResponseBody {\n  accountId?: string\n  lastKey?: string\n  numberOfQrCodes?: number\n  qrCodes?: QrCode[]\n}\n\nexport interface GetScansByAccountIdPathParameters {\n  accountId?: string\n}\n\nexport interface GetScansByAccountIdQueryStringParameters {\n  assetName?: string\n  contactId?: string\n  lastKey?: string\n  limit?: number\n}\n\nexport interface GetScansByAccountIdResponseBody {\n  accountId?: string\n  lastKey?: string\n  numberOfScans?: number\n  scans?: Scan[]\n}\n\nexport interface GetUsersByAccountIdPathParameters {\n  accountId?: string\n}\n\nexport interface GetUsersByAccountIdQueryStringParameters {\n  lastKey?: string\n  limit?: number\n}\n\nexport interface GetUsersByAccountIdResponseBody {\n  accountId?: string\n  invitations?: UserCombined[]\n  lastKey?: string\n  numberOfInvitations?: number\n  numberOfUsers?: number\n  users?: UserCombined[]\n}\n\nexport interface UpdateAccountPathParameters {\n  accountId?: string\n}\n\nexport interface UpdateAccountRequestBody {\n  companyName?: string\n}\n\nexport interface UpdateAccountResponseBody extends Account {\n  accountId?: string\n  assetCount?: number\n  collectTaxInfo?: boolean\n  companyName?: string\n  contactCount?: number\n  created?: string | Date | number\n  dynamicQrCodeCount?: number\n  lastScanId?: string\n  modified?: string | Date | number\n  needsPaymentUpdate?: boolean\n  projectCount?: number\n  scanCount?: number\n  staticQrCodeCount?: number\n  status?: AccountStatus\n  stripeCustomerId?: string\n}\n\nexport interface UpdatePricePlanByAccountIdPathParameters {\n  accountId?: string\n}\n\nexport interface UpdatePricePlanByAccountIdRequestBody {\n  paymentPeriod?: PricePlanPaymentPeriod\n  pricePlanName?: PricePlanName\n}\n\nexport interface UpdatePricePlanByAccountIdResponseBody {\n  pricePlan?: PricePlan\n  pricePlanPeriod?: PricePlanPeriod\n}\n\nexport interface CreateContactByAssetIdPathParameters {\n  assetId?: string\n}\n\nexport interface CreateContactByAssetIdRequestBody {\n  cellPhone?: string\n  consent?: ContactConsent[]\n  customAttributes?: NestedKeyValueObject\n  emailAddress?: string\n  firstName?: string\n  lastName?: string\n  mailingAddress?: ContactMailingAddress\n  middleName?: string\n  nickname?: string\n  type?: string\n}\n\nexport interface CreateContactByAssetIdResponseBody {\n  asset?: Asset\n  assetContact?: AssetContact\n  assetId?: string\n  contact?: Contact\n  contactEmail?: ContactEmail\n  contactPhone?: ContactPhone\n  projectContact?: ProjectContact\n}\n\nexport interface CreateQrCodeByAssetIdPathParameters {\n  assetId?: string\n}\n\nexport interface CreateQrCodeByAssetIdRequestBody {\n  dynamicRedirectType?: QrCodeDynamicRedirectType\n  intent?: string\n  intentState?: NestedKeyValueObject\n  intentType?: QrCodeIntentType\n  locatorKeyType?: QrCodeLocatorKeyType\n  status?: QrCodeStatus\n  validFrom?: string | Date | number\n  validTo?: string | Date | number\n}\n\nexport interface CreateQrCodeByAssetIdResponseBody {\n  asset?: Asset\n  assetId?: string\n  locatorKey?: string\n  qrCode?: QrCode\n  qrCodeId?: string\n}\n\nexport interface DeleteAssetPathParameters {\n  assetId?: string\n}\n\nexport interface DeleteAssetResponseBody {\n  asset?: Asset\n}\n\nexport interface DeleteAssetGroupPathParameters {\n  groupId?: string\n}\n\nexport interface DeleteAssetGroupResponseBody {\n  deletedAssetsCount?: number\n  deletedQrCodesCount?: number\n  groupId?: string\n}\n\nexport interface GetAssetPathParameters {\n  assetId?: string\n}\n\nexport interface GetAssetResponseBody {\n  asset?: ResponseAsset\n  assetId?: string\n}\n\nexport interface GetAssetGroupPathParameters {\n  groupId?: string\n}\n\nexport interface GetAssetGroupQueryStringParameters {\n  lastKey?: string\n  limit?: number\n}\n\nexport interface GetAssetGroupResponseBody {\n  assets?: Asset[]\n  groupId?: string\n  lastKey?: string\n  numberOfAssets?: number\n}\n\nexport interface GetContactsByAssetIdPathParameters {\n  assetId?: string\n}\n\nexport interface GetContactsByAssetIdQueryStringParameters {\n  lastKey?: string\n  limit?: number\n}\n\nexport interface GetContactsByAssetIdResponseBody {\n  assetContacts?: AssetContact[]\n  assetId?: string\n  contacts?: Contact[]\n  lastKey?: string\n  numberOfContacts?: number\n}\n\nexport interface GetQrCodesByAssetIdPathParameters {\n  assetId?: string\n}\n\nexport interface GetQrCodesByAssetIdQueryStringParameters extends QrCodeOptions {\n  background?: string\n  backgroundGradientColors?: string\n  backgroundGradientRotation?: number\n  backgroundGradientType?: string\n  cornerDotColor?: string\n  cornerDotType?: string\n  cornerSquareColor?: string\n  cornerSquareType?: string\n  darkColor?: string\n  dataUrl?: boolean\n  dotType?: string\n  errorCorrectionLevel?: QrCodeErrorCorrectionLevel\n  foreground?: string\n  foregroundGradientColors?: string\n  foregroundGradientRotation?: number\n  foregroundGradientType?: string\n  format?: QrCodeType\n  image?: string\n  lastKey?: string\n  lightColor?: string\n  limit?: number\n  margin?: number\n  scale?: number\n  version?: number\n  width?: number\n}\n\nexport interface GetQrCodesByAssetIdResponseBody {\n  assetId?: string\n  lastKey?: string\n  numberOfQrCodes?: number\n  qrCodes?: QrCode[]\n}\n\nexport interface GetScansByAssetIdPathParameters {\n  assetId?: string\n}\n\nexport interface GetScansByAssetIdQueryStringParameters {\n  lastKey?: string\n  limit?: number\n}\n\nexport interface GetScansByAssetIdResponseBody {\n  assetId?: string\n  lastKey?: string\n  numberOfScans?: number\n  scans?: Scan[]\n}\n\nexport interface LinkContactToAssetPathParameters {\n  assetId?: string\n  contactId?: string\n}\n\nexport interface LinkContactToAssetRequestBody {\n  type?: string\n}\n\nexport interface LinkContactToAssetResponseBody {\n  assetContact?: AssetContact\n  projectContact?: ProjectContact\n}\n\nexport interface UnlinkContactToAssetPathParameters {\n  assetId?: string\n  contactId?: string\n}\n\nexport interface UpdateAssetPathParameters {\n  assetId?: string\n}\n\nexport interface UpdateAssetRequestBody {\n  customAttributes?: NestedKeyValueObject\n  description?: string\n  groupId?: string\n}\n\nexport interface UpdateAssetResponseBody {\n  asset?: Asset\n  assetId?: string\n}\n\nexport interface GetAccessTokenRequestBody {\n  accessKey?: string\n  accessSecret?: string\n}\n\nexport interface GetAccessTokenResponseBody {\n  error?: string\n  token?: string\n}\n\nexport interface DeleteContactPathParameters {\n  contactId?: string\n}\n\nexport interface DeleteContactResponseBody {\n  contact?: Contact\n}\n\nexport interface GetContactPathParameters {\n  contactId?: string\n}\n\nexport interface GetContactResponseBody {\n  contact?: Contact\n}\n\nexport interface UpdateContactPathParameters {\n  contactId?: string\n}\n\nexport interface UpdateContactRequestBody {\n  cellPhone?: string\n  consent?: ContactConsent[]\n  customAttributes?: NestedKeyValueObject\n  emailAddress?: string\n  firstName?: string\n  lastName?: string\n  mailingAddress?: ContactMailingAddress\n  middleName?: string\n  nickname?: string\n}\n\nexport interface UpdateContactResponseBody {\n  contact?: Contact\n}\n\nexport interface GetAccountsOverviewResponseBody {\n  enterpriseCustom?: NestedKeyValueObject\n  enterprisePro?: NestedKeyValueObject\n  enterpriseStarter?: NestedKeyValueObject\n  individualPro?: NestedKeyValueObject\n  individualStarter?: NestedKeyValueObject\n  unlimited?: NestedKeyValueObject\n}\n\nexport interface GetActivityOverviewResponseBody {\n  assets?: NestedKeyValueObject\n  contacts?: NestedKeyValueObject\n  logins?: NestedKeyValueObject\n  qrCodes?: NestedKeyValueObject\n  scans?: NestedKeyValueObject\n}\n\nexport interface GetUsersOverviewResponseBody {\n  active?: NestedKeyValueObject\n  pending?: NestedKeyValueObject\n  total?: NestedKeyValueObject\n}\n\nexport interface CreateAssetByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface CreateAssetByProjectIdRequestBody extends NestedAsset {\n  customAttributes?: NestedKeyValueObject\n  description?: string\n  groupId?: string\n  name?: string\n  qrCodes?: NestedQrCode[]\n}\n\nexport interface CreateAssetByProjectIdResponseBody {\n  asset?: ResponseAsset\n  projectId?: string\n}\n\nexport interface CreateAssetGroupByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface CreateAssetGroupByProjectIdRequestBody {\n  assets?: NestedAsset[]\n}\n\nexport interface CreateAssetGroupByProjectIdResponseBody {\n  assets?: ResponseAsset[]\n  groupId?: string\n  numberOfAssets?: number\n  projectId?: string\n}\n\nexport interface CreateAssetsByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface CreateAssetsByProjectIdRequestBody {\n  assets?: NestedAsset[]\n}\n\nexport interface CreateAssetsByProjectIdResponseBody {\n  assets?: ResponseAsset[]\n  numberOfAssets?: number\n  projectId?: string\n}\n\nexport interface CreateContactByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface CreateContactByProjectIdRequestBody {\n  asset?: NestedAsset\n  cellPhone?: string\n  consent?: ContactConsent[]\n  customAttributes?: NestedKeyValueObject\n  emailAddress?: string\n  firstName?: string\n  lastName?: string\n  mailingAddress?: ContactMailingAddress\n  middleName?: string\n  nickname?: string\n  type?: string\n}\n\nexport interface CreateContactByProjectIdResponseBody {\n  asset?: Asset\n  assetContact?: AssetContact\n  contact?: Contact\n  contactEmail?: ContactEmail\n  contactPhone?: ContactPhone\n  projectContact?: ProjectContact\n  projectId?: string\n  qrCodes?: QrCode[]\n}\n\nexport interface CreateContactsByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface CreateContactsByProjectIdRequestBody {\n  contacts?: NestedContact[]\n}\n\nexport interface CreateContactsByProjectIdResponseBody {\n  contacts?: Array<any>\n  numberOfContacts?: number\n  projectId?: string\n}\n\nexport interface CreateQrCodeByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface CreateQrCodeByProjectIdRequestBody {\n  intent?: string\n  intentState?: NestedKeyValueObject\n  status?: QrCodeStatus\n}\n\nexport interface CreateQrCodeByProjectIdResponseBody {\n  locatorKey?: string\n  projectId?: string\n  qrCode?: QrCode\n  qrCodeId?: string\n}\n\nexport interface CreateSmsTemplateByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface CreateSmsTemplateByProjectIdRequestBody {\n  body?: string\n  responseUrl?: string\n  smsTemplateName?: string\n  statusUrl?: string\n}\n\nexport interface CreateSmsTemplateByProjectIdResponseBody {\n  smsTemplate?: SmsTemplate\n}\n\nexport interface DeleteProjectPathParameters {\n  projectId?: string\n}\n\nexport interface DeleteProjectResponseBody {\n  project?: Project\n}\n\nexport interface DeleteSmsTemplateByProjectIdPathParameters {\n  projectId?: string\n  smsTemplateName?: string\n}\n\nexport interface DeleteSmsTemplateByProjectIdResponseBody {\n  body?: string\n  projectId?: string\n  responseUrl?: string\n  smsTemplateName?: string\n  statusUrl?: string\n}\n\nexport interface GetAssetsByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface GetAssetsByProjectIdQueryStringParameters {\n  lastKey?: string\n  limit?: number\n  name?: string\n}\n\nexport interface GetAssetsByProjectIdResponseBody {\n  assets?: Asset[]\n  lastKey?: string\n  numberOfAssets?: number\n  projectId?: string\n}\n\nexport interface GetContactsByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface GetContactsByProjectIdQueryStringParameters {\n  assetName?: string\n  email?: string\n  lastKey?: string\n  limit?: number\n  phone?: string\n}\n\nexport interface GetContactsByProjectIdResponseBody {\n  contacts?: Contact[]\n  lastKey?: string\n  numberOfContacts?: number\n  projectContacts?: ProjectContact[]\n  projectId?: string\n}\n\nexport interface GetProjectByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface GetProjectByProjectIdResponseBody {\n  project?: Project\n}\n\nexport interface GetQrCodesByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface GetQrCodesByProjectIdQueryStringParameters {\n  assetName?: string\n  lastKey?: string\n  limit?: number\n}\n\nexport interface GetQrCodesByProjectIdResponseBody {\n  lastKey?: string\n  numberOfQrCodes?: number\n  projectId?: string\n  qrCodes?: QrCode[]\n}\n\nexport interface GetScansByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface GetScansByProjectIdQueryStringParameters {\n  assetName?: string\n  contactId?: string\n  lastKey?: string\n  limit?: number\n}\n\nexport interface GetScansByProjectIdResponseBody {\n  lastKey?: string\n  numberOfScans?: number\n  projectId?: string\n  scans?: Scan[]\n}\n\nexport interface GetSmsTemplateByProjectIdPathParameters {\n  projectId?: string\n  smsTemplateName?: string\n}\n\nexport interface GetSmsTemplateByProjectIdResponseBody {\n  body?: string\n  projectId?: string\n  responseUrl?: string\n  smsTemplateName?: string\n  statusUrl?: string\n}\n\nexport interface GetSmsTemplatesByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface GetSmsTemplatesByProjectIdQueryStringParameters {\n  lastKey?: string\n  limit?: number\n}\n\nexport interface GetSmsTemplatesByProjectIdResponseBody {\n  lastKey?: string\n  numberOfSmsTemplates?: number\n  projectId?: string\n  smsTemplates?: SmsTemplate[]\n}\n\nexport interface UpdateProjectByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface UpdateProjectByProjectIdRequestBody {\n  companyName?: string\n  description?: string\n  name?: string\n  status?: ProjectStatus\n}\n\nexport interface UpdateProjectByProjectIdResponseBody {\n  project?: Project\n}\n\nexport interface UpdateSmsTemplatePathParameters {\n  projectId?: string\n  smsTemplateName?: string\n}\n\nexport interface UpdateSmsTemplateResponseBody {\n  body?: string\n  projectId?: string\n  responseUrl?: string\n  smsTemplateName?: string\n  statusUrl?: string\n}\n\nexport interface DeleteQrCodePathParameters {\n  qrCodeId?: string\n}\n\nexport interface DeleteQrCodeResponseBody {\n  qrCode?: QrCode\n}\n\nexport interface GetQrCodePathParameters {\n  qrCodeId?: string\n}\n\nexport interface GetQrCodeQueryStringParameters extends QrCodeOptions {\n  background?: string\n  backgroundGradientColors?: string\n  backgroundGradientRotation?: number\n  backgroundGradientType?: string\n  cornerDotColor?: string\n  cornerDotType?: string\n  cornerSquareColor?: string\n  cornerSquareType?: string\n  darkColor?: string\n  dataUrl?: boolean\n  dotType?: string\n  errorCorrectionLevel?: QrCodeErrorCorrectionLevel\n  foreground?: string\n  foregroundGradientColors?: string\n  foregroundGradientRotation?: number\n  foregroundGradientType?: string\n  format?: QrCodeType\n  image?: string\n  lightColor?: string\n  margin?: number\n  scale?: number\n  version?: number\n  width?: number\n}\n\nexport interface GetQrCodeResponseBody extends QrCode {\n  assetId?: string\n  created?: string | Date | number\n  dynamicRedirectType?: QrCodeDynamicRedirectType\n  image?: QrCodeImage\n  intent?: string\n  intentState?: NestedKeyValueObject\n  intentType?: QrCodeIntentType\n  locatorKey?: string\n  locatorKeyType?: QrCodeLocatorKeyType\n  modified?: string | Date | number\n  qrCodeId?: string\n  scanCount?: number\n  status?: QrCodeStatus\n  validFrom?: string | Date | number\n  validTo?: string | Date | number\n}\n\nexport interface UpdateQrCodePathParameters {\n  qrCodeId?: string\n}\n\nexport interface UpdateQrCodeRequestBody {\n  dynamicRedirectType?: QrCodeDynamicRedirectType\n  intent?: string\n  intentState?: NestedKeyValueObject\n  intentType?: QrCodeIntentType\n  status?: QrCodeStatus\n}\n\nexport interface UpdateQrCodeResponseBody {\n  qrCode?: QrCode\n}\n\nexport interface CreateContactByScanIdPathParameters {\n  scanId?: string\n}\n\nexport interface CreateContactByScanIdRequestBody {\n  cellPhone?: string\n  consent?: ContactConsent[]\n  customAttributes?: NestedKeyValueObject\n  emailAddress?: string\n  firstName?: string\n  lastName?: string\n  mailingAddress?: ContactMailingAddress\n  middleName?: string\n  nickname?: string\n  type?: string\n}\n\nexport interface CreateContactByScanIdResponseBody {\n  asset?: Asset\n  assetContact?: AssetContact\n  assetId?: string\n  contact?: Contact\n  contactEmail?: ContactEmail\n  contactPhone?: ContactPhone\n  projectContact?: ProjectContact\n  scanContact?: ScanContact\n}\n\nexport interface GetScanPathParameters {\n  scanId?: string\n}\n\nexport interface GetScanResponseBody {\n  asset?: Asset\n  contacts?: ResponseContact[]\n  qrCode?: QrCode\n  scan?: Scan\n}\n\nexport interface SendSmsByScanIdPathParameters {\n  scanId?: string\n}\n\nexport interface SendSmsByScanIdRequestBody {\n  customVariables?: NestedKeyValueObject\n  smsTemplateName?: string\n  to?: string\n}\n\nexport interface SendSmsByScanIdResponseBody {\n  sms?: Sms\n}\n\nexport interface GetAccountDetailsPathParameters {\n  accountId?: string\n}\n\nexport interface GetAccountDetailsResponseBody {\n  account?: NestedKeyValueObject\n  assets?: NestedKeyValueObject\n  contacts?: NestedKeyValueObject\n  projects?: NestedKeyValueObject\n  qrCodes?: NestedKeyValueObject\n  scans?: NestedKeyValueObject\n  users?: Array<any>\n}\n\nexport interface GetUserDetailsPathParameters {\n  userId?: string\n}\n\nexport interface GetUserDetailsResponseBody {\n  accounts?: Array<any>\n  logins?: Array<any>\n  user?: NestedKeyValueObject\n}\n\nexport interface SearchAccountsQueryStringParameters {\n  limit?: number\n  nextToken?: string\n  queryExecutionId?: string\n  search?: string\n}\n\nexport interface SearchAccountsResponseBody {\n  accounts?: Array<any>\n  nextToken?: string\n  queryExecutionId?: string\n}\n\nexport interface SearchUsersQueryStringParameters {\n  limit?: number\n  nextToken?: string\n  queryExecutionId?: string\n  search?: string\n}\n\nexport interface SearchUsersResponseBody {\n  nextToken?: string\n  queryExecutionId?: string\n  users?: Array<any>\n}\n\nexport interface CreateAccountByUserIdPathParameters {\n  userId?: string\n}\n\nexport interface CreateAccountByUserIdRequestBody {\n  companyName?: string\n}\n\nexport interface CreateAccountByUserIdResponseBody extends Account {\n  accountId?: string\n  assetCount?: number\n  collectTaxInfo?: boolean\n  companyName?: string\n  contactCount?: number\n  created?: string | Date | number\n  dynamicQrCodeCount?: number\n  lastScanId?: string\n  modified?: string | Date | number\n  needsPaymentUpdate?: boolean\n  projectCount?: number\n  scanCount?: number\n  staticQrCodeCount?: number\n  status?: AccountStatus\n  stripeCustomerId?: string\n}\n\nexport interface GetAccountsByUserIdPathParameters {\n  userId?: string\n}\n\nexport interface GetAccountsByUserIdQueryStringParameters {\n  lastKey?: string\n  limit?: number\n}\n\nexport interface GetAccountsByUserIdResponseBody {\n  accounts?: AccountResponse[]\n  lastKey?: string\n  next?: string\n  numberOfAccounts?: number\n  userId?: string\n}\n\nexport interface GetErrorsByUserIdPathParameters {\n  userId?: string\n}\n\nexport interface GetErrorsByUserIdQueryStringParameters {\n  lastKey?: string\n  limit?: number\n}\n\nexport interface GetErrorsByUserIdResponseBody {\n  errors?: Response[]\n  lastKey?: string\n  numberOfErrors?: number\n  userId?: string\n}\n\nexport interface GetInvitationsByUserIdPathParameters {\n  userId?: string\n}\n\nexport interface GetInvitationsByUserIdQueryStringParameters {\n  lastKey?: string\n  limit?: number\n}\n\nexport interface GetInvitationsByUserIdResponseBody {\n  accountInvitations?: AccountInvitation[]\n  lastKey?: string\n  numberOfInvitations?: number\n  userId?: string\n}\n\nexport interface GetUserPathParameters {\n  userId?: string\n}\n\nexport interface GetUserResponseBody extends User {\n  created?: string | Date | number\n  email?: string\n  firstName?: string\n  lastName?: string\n  middleName?: string\n  modified?: string | Date | number\n  phone?: string\n  userId?: string\n}\n\nexport interface UpdateUserPathParameters {\n  userId?: string\n}\n\nexport interface UpdateUserRequestBody {\n  firstName?: string\n  lastName?: string\n  middleName?: string\n}\n\nexport interface UpdateUserResponseBody extends User {\n  created?: string | Date | number\n  email?: string\n  firstName?: string\n  lastName?: string\n  middleName?: string\n  modified?: string | Date | number\n  phone?: string\n  userId?: string\n}\n\n// HANDLER REQUEST CLASSES\n\nexport class CreateInvitationByAccountIdRequest extends RequestPost<\n  CreateInvitationByAccountIdPathParameters,\n  undefined,\n  CreateInvitationByAccountIdRequestBody,\n  CreateInvitationByAccountIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'},\n    {routePart: 'invitations', sdkPartName: 'invitations'},\n  ]\n}\n\nexport class CreateProjectByAccountIdRequest extends RequestPost<\n  CreateProjectByAccountIdPathParameters,\n  undefined,\n  CreateProjectByAccountIdRequestBody,\n  CreateProjectByAccountIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'},\n    {routePart: 'projects', sdkPartName: 'projects'},\n  ]\n}\n\nexport class CreateUserByInvitationIdRequest extends RequestPost<\n  CreateUserByInvitationIdPathParameters,\n  undefined,\n  undefined,\n  CreateUserByInvitationIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'invitationId', routePart: 'invitations', sdkPartName: 'invitation'},\n    {routePart: 'users', sdkPartName: 'users'},\n  ]\n}\n\nexport class DeleteAccountRequest extends RequestDelete<DeleteAccountPathParameters, undefined, undefined> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'}]\n}\n\nexport class DeleteInvitationRequest extends RequestDelete<\n  DeleteInvitationPathParameters,\n  undefined,\n  DeleteInvitationResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'invitationId', routePart: 'invitations', sdkPartName: 'invitation'}]\n}\n\nexport class DeleteUserByAccountIdRequest extends RequestDelete<\n  DeleteUserByAccountIdPathParameters,\n  undefined,\n  DeleteUserByAccountIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'},\n    {parm: 'userId', routePart: 'users', sdkPartName: 'user'},\n  ]\n}\n\nexport class GetAccountRequest extends RequestGet<GetAccountPathParameters, undefined, GetAccountResponseBody> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'}]\n}\n\nexport class GetAssetsByAccountIdRequest extends RequestGet<\n  GetAssetsByAccountIdPathParameters,\n  GetAssetsByAccountIdQueryStringParameters,\n  GetAssetsByAccountIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'},\n    {routePart: 'assets', sdkPartName: 'assets'},\n  ]\n}\n\nexport class GetContactsByAccountIdRequest extends RequestGet<\n  GetContactsByAccountIdPathParameters,\n  GetContactsByAccountIdQueryStringParameters,\n  GetContactsByAccountIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'},\n    {routePart: 'contacts', sdkPartName: 'contacts'},\n  ]\n}\n\nexport class GetInvitationRequest extends RequestGet<\n  GetInvitationPathParameters,\n  undefined,\n  GetInvitationResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'invitationId', routePart: 'invitations', sdkPartName: 'invitation'}]\n}\n\nexport class GetPricePlanByAccountIdRequest extends RequestGet<\n  GetPricePlanByAccountIdPathParameters,\n  undefined,\n  GetPricePlanByAccountIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'},\n    {routePart: 'priceplan', sdkPartName: 'pricePlan'},\n  ]\n}\n\nexport class GetProjectsByAccountIdRequest extends RequestGet<\n  GetProjectsByAccountIdPathParameters,\n  GetProjectsByAccountIdQueryStringParameters,\n  GetProjectsByAccountIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'},\n    {routePart: 'projects', sdkPartName: 'projects'},\n  ]\n}\n\nexport class GetQrCodesByAccountIdRequest extends RequestGet<\n  GetQrCodesByAccountIdPathParameters,\n  GetQrCodesByAccountIdQueryStringParameters,\n  GetQrCodesByAccountIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'},\n    {routePart: 'qrcodes', sdkPartName: 'qrCodes'},\n  ]\n}\n\nexport class GetScansByAccountIdRequest extends RequestGet<\n  GetScansByAccountIdPathParameters,\n  GetScansByAccountIdQueryStringParameters,\n  GetScansByAccountIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'},\n    {routePart: 'scans', sdkPartName: 'scans'},\n  ]\n}\n\nexport class GetUsersByAccountIdRequest extends RequestGet<\n  GetUsersByAccountIdPathParameters,\n  GetUsersByAccountIdQueryStringParameters,\n  GetUsersByAccountIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'},\n    {routePart: 'users', sdkPartName: 'users'},\n  ]\n}\n\nexport class UpdateAccountRequest extends RequestPatch<\n  UpdateAccountPathParameters,\n  undefined,\n  UpdateAccountRequestBody,\n  UpdateAccountResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'}]\n}\n\nexport class UpdatePricePlanByAccountIdRequest extends RequestPatch<\n  UpdatePricePlanByAccountIdPathParameters,\n  undefined,\n  UpdatePricePlanByAccountIdRequestBody,\n  UpdatePricePlanByAccountIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'},\n    {routePart: 'priceplan', sdkPartName: 'pricePlan'},\n  ]\n}\n\nexport class CreateContactByAssetIdRequest extends RequestPost<\n  CreateContactByAssetIdPathParameters,\n  undefined,\n  CreateContactByAssetIdRequestBody,\n  CreateContactByAssetIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'assetId', routePart: 'assets', sdkPartName: 'asset'},\n    {routePart: 'contacts', sdkPartName: 'contacts'},\n  ]\n}\n\nexport class CreateQrCodeByAssetIdRequest extends RequestPost<\n  CreateQrCodeByAssetIdPathParameters,\n  undefined,\n  CreateQrCodeByAssetIdRequestBody,\n  CreateQrCodeByAssetIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'assetId', routePart: 'assets', sdkPartName: 'asset'},\n    {routePart: 'qrcodes', sdkPartName: 'qrCodes'},\n  ]\n}\n\nexport class DeleteAssetRequest extends RequestDelete<DeleteAssetPathParameters, undefined, DeleteAssetResponseBody> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'assetId', routePart: 'assets', sdkPartName: 'asset'}]\n}\n\nexport class DeleteAssetGroupRequest extends RequestDelete<\n  DeleteAssetGroupPathParameters,\n  undefined,\n  DeleteAssetGroupResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'groupId', routePart: 'assetGroups', sdkPartName: 'assetGroup'}]\n}\n\nexport class GetAssetRequest extends RequestGet<GetAssetPathParameters, undefined, GetAssetResponseBody> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'assetId', routePart: 'assets', sdkPartName: 'asset'}]\n}\n\nexport class GetAssetGroupRequest extends RequestGet<\n  GetAssetGroupPathParameters,\n  GetAssetGroupQueryStringParameters,\n  GetAssetGroupResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'groupId', routePart: 'assetGroups', sdkPartName: 'assetGroup'}]\n}\n\nexport class GetContactsByAssetIdRequest extends RequestGet<\n  GetContactsByAssetIdPathParameters,\n  GetContactsByAssetIdQueryStringParameters,\n  GetContactsByAssetIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'assetId', routePart: 'assets', sdkPartName: 'asset'},\n    {routePart: 'contacts', sdkPartName: 'contacts'},\n  ]\n}\n\nexport class GetQrCodesByAssetIdRequest extends RequestGet<\n  GetQrCodesByAssetIdPathParameters,\n  GetQrCodesByAssetIdQueryStringParameters,\n  GetQrCodesByAssetIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'assetId', routePart: 'assets', sdkPartName: 'asset'},\n    {routePart: 'qrcodes', sdkPartName: 'qrCodes'},\n  ]\n}\n\nexport class GetScansByAssetIdRequest extends RequestGet<\n  GetScansByAssetIdPathParameters,\n  GetScansByAssetIdQueryStringParameters,\n  GetScansByAssetIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'assetId', routePart: 'assets', sdkPartName: 'asset'},\n    {routePart: 'scans', sdkPartName: 'scans'},\n  ]\n}\n\nexport class LinkContactToAssetRequest extends RequestPost<\n  LinkContactToAssetPathParameters,\n  undefined,\n  LinkContactToAssetRequestBody,\n  LinkContactToAssetResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'assetId', routePart: 'assets', sdkPartName: 'asset'},\n    {parm: 'contactId', routePart: 'contacts', sdkPartName: 'contact'},\n  ]\n}\n\nexport class UnlinkContactToAssetRequest extends RequestDelete<\n  UnlinkContactToAssetPathParameters,\n  undefined,\n  undefined\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'assetId', routePart: 'assets', sdkPartName: 'asset'},\n    {parm: 'contactId', routePart: 'contacts', sdkPartName: 'contact'},\n  ]\n}\n\nexport class UpdateAssetRequest extends RequestPatch<\n  UpdateAssetPathParameters,\n  undefined,\n  UpdateAssetRequestBody,\n  UpdateAssetResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'assetId', routePart: 'assets', sdkPartName: 'asset'}]\n}\n\nexport class GetAccessTokenRequest extends RequestPost<\n  undefined,\n  undefined,\n  GetAccessTokenRequestBody,\n  GetAccessTokenResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{routePart: 'auth/getAccessToken', sdkPartName: 'authGetAccessToken'}]\n}\n\nexport class DeleteContactRequest extends RequestDelete<\n  DeleteContactPathParameters,\n  undefined,\n  DeleteContactResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'contactId', routePart: 'contacts', sdkPartName: 'contact'}]\n}\n\nexport class GetContactRequest extends RequestGet<GetContactPathParameters, undefined, GetContactResponseBody> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'contactId', routePart: 'contacts', sdkPartName: 'contact'}]\n}\n\nexport class UpdateContactRequest extends RequestPatch<\n  UpdateContactPathParameters,\n  undefined,\n  UpdateContactRequestBody,\n  UpdateContactResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'contactId', routePart: 'contacts', sdkPartName: 'contact'}]\n}\n\nexport class GetAccountsOverviewRequest extends RequestGet<undefined, undefined, GetAccountsOverviewResponseBody> {\n  routeSegments?: RequestRouteSegment[] = [{routePart: 'overview/accounts', sdkPartName: 'overviewAccounts'}]\n}\n\nexport class GetActivityOverviewRequest extends RequestGet<undefined, undefined, GetActivityOverviewResponseBody> {\n  routeSegments?: RequestRouteSegment[] = [{routePart: 'overview/activity', sdkPartName: 'overviewActivity'}]\n}\n\nexport class GetUsersOverviewRequest extends RequestGet<undefined, undefined, GetUsersOverviewResponseBody> {\n  routeSegments?: RequestRouteSegment[] = [{routePart: 'overview/users', sdkPartName: 'overviewUsers'}]\n}\n\nexport class CreateAssetByProjectIdRequest extends RequestPost<\n  CreateAssetByProjectIdPathParameters,\n  undefined,\n  CreateAssetByProjectIdRequestBody,\n  CreateAssetByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {routePart: 'assets', sdkPartName: 'assets'},\n  ]\n}\n\nexport class CreateAssetGroupByProjectIdRequest extends RequestPost<\n  CreateAssetGroupByProjectIdPathParameters,\n  undefined,\n  CreateAssetGroupByProjectIdRequestBody,\n  CreateAssetGroupByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {routePart: 'assetGroups', sdkPartName: 'assetGroups'},\n  ]\n}\n\nexport class CreateAssetsByProjectIdRequest extends RequestPost<\n  CreateAssetsByProjectIdPathParameters,\n  undefined,\n  CreateAssetsByProjectIdRequestBody,\n  CreateAssetsByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {routePart: 'assets/batch', sdkPartName: 'assetsBatch'},\n  ]\n}\n\nexport class CreateContactByProjectIdRequest extends RequestPost<\n  CreateContactByProjectIdPathParameters,\n  undefined,\n  CreateContactByProjectIdRequestBody,\n  CreateContactByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {routePart: 'contacts', sdkPartName: 'contacts'},\n  ]\n}\n\nexport class CreateContactsByProjectIdRequest extends RequestPost<\n  CreateContactsByProjectIdPathParameters,\n  undefined,\n  CreateContactsByProjectIdRequestBody,\n  CreateContactsByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {routePart: 'contacts/batch', sdkPartName: 'contactsBatch'},\n  ]\n}\n\nexport class CreateQrCodeByProjectIdRequest extends RequestPost<\n  CreateQrCodeByProjectIdPathParameters,\n  undefined,\n  CreateQrCodeByProjectIdRequestBody,\n  CreateQrCodeByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {routePart: 'qrcodes', sdkPartName: 'qrCodes'},\n  ]\n}\n\nexport class CreateSmsTemplateByProjectIdRequest extends RequestPost<\n  CreateSmsTemplateByProjectIdPathParameters,\n  undefined,\n  CreateSmsTemplateByProjectIdRequestBody,\n  CreateSmsTemplateByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {routePart: 'smstemplates', sdkPartName: 'smsTemplates'},\n  ]\n}\n\nexport class DeleteProjectRequest extends RequestDelete<\n  DeleteProjectPathParameters,\n  undefined,\n  DeleteProjectResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'projectId', routePart: 'projects', sdkPartName: 'project'}]\n}\n\nexport class DeleteSmsTemplateByProjectIdRequest extends RequestDelete<\n  DeleteSmsTemplateByProjectIdPathParameters,\n  undefined,\n  DeleteSmsTemplateByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {parm: 'smsTemplateName', routePart: 'smstemplates', sdkPartName: 'smsTemplate'},\n  ]\n}\n\nexport class GetAssetsByProjectIdRequest extends RequestGet<\n  GetAssetsByProjectIdPathParameters,\n  GetAssetsByProjectIdQueryStringParameters,\n  GetAssetsByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {routePart: 'assets', sdkPartName: 'assets'},\n  ]\n}\n\nexport class GetContactsByProjectIdRequest extends RequestGet<\n  GetContactsByProjectIdPathParameters,\n  GetContactsByProjectIdQueryStringParameters,\n  GetContactsByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {routePart: 'contacts', sdkPartName: 'contacts'},\n  ]\n}\n\nexport class GetProjectByProjectIdRequest extends RequestGet<\n  GetProjectByProjectIdPathParameters,\n  undefined,\n  GetProjectByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'projectId', routePart: 'projects', sdkPartName: 'project'}]\n}\n\nexport class GetQrCodesByProjectIdRequest extends RequestGet<\n  GetQrCodesByProjectIdPathParameters,\n  GetQrCodesByProjectIdQueryStringParameters,\n  GetQrCodesByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {routePart: 'qrcodes', sdkPartName: 'qrCodes'},\n  ]\n}\n\nexport class GetScansByProjectIdRequest extends RequestGet<\n  GetScansByProjectIdPathParameters,\n  GetScansByProjectIdQueryStringParameters,\n  GetScansByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {routePart: 'scans', sdkPartName: 'scans'},\n  ]\n}\n\nexport class GetSmsTemplateByProjectIdRequest extends RequestGet<\n  GetSmsTemplateByProjectIdPathParameters,\n  undefined,\n  GetSmsTemplateByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {parm: 'smsTemplateName', routePart: 'smstemplates', sdkPartName: 'smsTemplate'},\n  ]\n}\n\nexport class GetSmsTemplatesByProjectIdRequest extends RequestGet<\n  GetSmsTemplatesByProjectIdPathParameters,\n  GetSmsTemplatesByProjectIdQueryStringParameters,\n  GetSmsTemplatesByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {routePart: 'smstemplates', sdkPartName: 'smsTemplates'},\n  ]\n}\n\nexport class UpdateProjectByProjectIdRequest extends RequestPatch<\n  UpdateProjectByProjectIdPathParameters,\n  undefined,\n  UpdateProjectByProjectIdRequestBody,\n  UpdateProjectByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'projectId', routePart: 'projects', sdkPartName: 'project'}]\n}\n\nexport class UpdateSmsTemplateRequest extends RequestPatch<\n  UpdateSmsTemplatePathParameters,\n  undefined,\n  undefined,\n  UpdateSmsTemplateResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {parm: 'smsTemplateName', routePart: 'smstemplates', sdkPartName: 'smsTemplate'},\n  ]\n}\n\nexport class DeleteQrCodeRequest extends RequestDelete<\n  DeleteQrCodePathParameters,\n  undefined,\n  DeleteQrCodeResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'qrCodeId', routePart: 'qrcodes', sdkPartName: 'qrCode'}]\n}\n\nexport class GetQrCodeRequest extends RequestGet<\n  GetQrCodePathParameters,\n  GetQrCodeQueryStringParameters,\n  GetQrCodeResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'qrCodeId', routePart: 'qrcodes', sdkPartName: 'qrCode'}]\n}\n\nexport class UpdateQrCodeRequest extends RequestPatch<\n  UpdateQrCodePathParameters,\n  undefined,\n  UpdateQrCodeRequestBody,\n  UpdateQrCodeResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'qrCodeId', routePart: 'qrcodes', sdkPartName: 'qrCode'}]\n}\n\nexport class CreateContactByScanIdRequest extends RequestPost<\n  CreateContactByScanIdPathParameters,\n  undefined,\n  CreateContactByScanIdRequestBody,\n  CreateContactByScanIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'scanId', routePart: 'scans', sdkPartName: 'scan'},\n    {routePart: 'contacts', sdkPartName: 'contacts'},\n  ]\n}\n\nexport class GetScanRequest extends RequestGet<GetScanPathParameters, undefined, GetScanResponseBody> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'scanId', routePart: 'scans', sdkPartName: 'scan'}]\n}\n\nexport class SendSmsByScanIdRequest extends RequestPost<\n  SendSmsByScanIdPathParameters,\n  undefined,\n  SendSmsByScanIdRequestBody,\n  SendSmsByScanIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'scanId', routePart: 'scans', sdkPartName: 'scan'},\n    {routePart: 'sms', sdkPartName: 'sms'},\n  ]\n}\n\nexport class GetAccountDetailsRequest extends RequestGet<\n  GetAccountDetailsPathParameters,\n  undefined,\n  GetAccountDetailsResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'accountId', routePart: 'search/accounts', sdkPartName: 'searchAccount'},\n  ]\n}\n\nexport class GetUserDetailsRequest extends RequestGet<\n  GetUserDetailsPathParameters,\n  undefined,\n  GetUserDetailsResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'userId', routePart: 'search/users', sdkPartName: 'searchUser'}]\n}\n\nexport class SearchAccountsRequest extends RequestGet<\n  undefined,\n  SearchAccountsQueryStringParameters,\n  SearchAccountsResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{routePart: 'search/accounts', sdkPartName: 'searchAccounts'}]\n}\n\nexport class SearchUsersRequest extends RequestGet<\n  undefined,\n  SearchUsersQueryStringParameters,\n  SearchUsersResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{routePart: 'search/users', sdkPartName: 'searchUsers'}]\n}\n\nexport class CreateAccountByUserIdRequest extends RequestPost<\n  CreateAccountByUserIdPathParameters,\n  undefined,\n  CreateAccountByUserIdRequestBody,\n  CreateAccountByUserIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'userId', routePart: 'users', sdkPartName: 'user'},\n    {routePart: 'accounts', sdkPartName: 'accounts'},\n  ]\n}\n\nexport class GetAccountsByUserIdRequest extends RequestGet<\n  GetAccountsByUserIdPathParameters,\n  GetAccountsByUserIdQueryStringParameters,\n  GetAccountsByUserIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'userId', routePart: 'users', sdkPartName: 'user'},\n    {routePart: 'accounts', sdkPartName: 'accounts'},\n  ]\n}\n\nexport class GetErrorsByUserIdRequest extends RequestGet<\n  GetErrorsByUserIdPathParameters,\n  GetErrorsByUserIdQueryStringParameters,\n  GetErrorsByUserIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'userId', routePart: 'users', sdkPartName: 'user'},\n    {routePart: 'errors', sdkPartName: 'errors'},\n  ]\n}\n\nexport class GetInvitationsByUserIdRequest extends RequestGet<\n  GetInvitationsByUserIdPathParameters,\n  GetInvitationsByUserIdQueryStringParameters,\n  GetInvitationsByUserIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'userId', routePart: 'users', sdkPartName: 'user'},\n    {routePart: 'invitations', sdkPartName: 'invitations'},\n  ]\n}\n\nexport class GetUserRequest extends RequestGet<GetUserPathParameters, undefined, GetUserResponseBody> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'userId', routePart: 'users', sdkPartName: 'user'}]\n}\n\nexport class UpdateUserRequest extends RequestPatch<\n  UpdateUserPathParameters,\n  undefined,\n  UpdateUserRequestBody,\n  UpdateUserResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'userId', routePart: 'users', sdkPartName: 'user'}]\n}\n\n// HANDLER RESOURCE CLASSES\n\nexport class SdkAccountInvitationsResources extends Resources {\n  async create(\n    requestBody: CreateInvitationByAccountIdRequestBody,\n    options?: any,\n  ): Promise<CreateInvitationByAccountIdResponseBody> {\n    const request = new CreateInvitationByAccountIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkAccountProjectsResources extends Resources {\n  async create(\n    requestBody: CreateProjectByAccountIdRequestBody,\n    options?: any,\n  ): Promise<CreateProjectByAccountIdResponseBody> {\n    const request = new CreateProjectByAccountIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n\n  async get(\n    queryStringParameters: GetProjectsByAccountIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetProjectsByAccountIdResponseBody> {\n    const request = new GetProjectsByAccountIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkAccountUserResource extends Resource {\n  async delete(options?: any): Promise<DeleteUserByAccountIdResponseBody> {\n    const request = new DeleteUserByAccountIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n}\n\nexport class SdkAccountAssetsResources extends Resources {\n  async get(\n    queryStringParameters: GetAssetsByAccountIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetAssetsByAccountIdResponseBody> {\n    const request = new GetAssetsByAccountIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkAccountContactsResources extends Resources {\n  async get(\n    queryStringParameters: GetContactsByAccountIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetContactsByAccountIdResponseBody> {\n    const request = new GetContactsByAccountIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkAccountPricePlanResources extends Resources {\n  async get(options?: any): Promise<GetPricePlanByAccountIdResponseBody> {\n    const request = new GetPricePlanByAccountIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async update(\n    requestBody: UpdatePricePlanByAccountIdRequestBody,\n    options?: any,\n  ): Promise<UpdatePricePlanByAccountIdResponseBody> {\n    const request = new UpdatePricePlanByAccountIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkAccountQrCodesResources extends Resources {\n  async get(\n    queryStringParameters: GetQrCodesByAccountIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetQrCodesByAccountIdResponseBody> {\n    const request = new GetQrCodesByAccountIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkAccountScansResources extends Resources {\n  async get(\n    queryStringParameters: GetScansByAccountIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetScansByAccountIdResponseBody> {\n    const request = new GetScansByAccountIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkAccountUsersResources extends Resources {\n  async get(\n    queryStringParameters: GetUsersByAccountIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetUsersByAccountIdResponseBody> {\n    const request = new GetUsersByAccountIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkAccountResource extends Resource {\n  invitations(): SdkAccountInvitationsResources {\n    return new SdkAccountInvitationsResources(this.getSession(), this.pathParameters)\n  }\n\n  projects(): SdkAccountProjectsResources {\n    return new SdkAccountProjectsResources(this.getSession(), this.pathParameters)\n  }\n\n  user(userId: string): SdkAccountUserResource {\n    return new SdkAccountUserResource(this.getSession(), {...this.pathParameters, userId})\n  }\n\n  assets(): SdkAccountAssetsResources {\n    return new SdkAccountAssetsResources(this.getSession(), this.pathParameters)\n  }\n\n  contacts(): SdkAccountContactsResources {\n    return new SdkAccountContactsResources(this.getSession(), this.pathParameters)\n  }\n\n  pricePlan(): SdkAccountPricePlanResources {\n    return new SdkAccountPricePlanResources(this.getSession(), this.pathParameters)\n  }\n\n  qrCodes(): SdkAccountQrCodesResources {\n    return new SdkAccountQrCodesResources(this.getSession(), this.pathParameters)\n  }\n\n  scans(): SdkAccountScansResources {\n    return new SdkAccountScansResources(this.getSession(), this.pathParameters)\n  }\n\n  users(): SdkAccountUsersResources {\n    return new SdkAccountUsersResources(this.getSession(), this.pathParameters)\n  }\n\n  async delete(options?: any): Promise<any> {\n    const request = new DeleteAccountRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async get(options?: any): Promise<GetAccountResponseBody> {\n    const request = new GetAccountRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async update(requestBody: UpdateAccountRequestBody, options?: any): Promise<UpdateAccountResponseBody> {\n    const request = new UpdateAccountRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkInvitationUsersResources extends Resources {\n  async create(options?: any): Promise<CreateUserByInvitationIdResponseBody> {\n    const request = new CreateUserByInvitationIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n}\n\nexport class SdkInvitationResource extends Resource {\n  users(): SdkInvitationUsersResources {\n    return new SdkInvitationUsersResources(this.getSession(), this.pathParameters)\n  }\n\n  async delete(options?: any): Promise<DeleteInvitationResponseBody> {\n    const request = new DeleteInvitationRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async get(options?: any): Promise<GetInvitationResponseBody> {\n    const request = new GetInvitationRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n}\n\nexport class SdkAssetContactsResources extends Resources {\n  async create(\n    requestBody: CreateContactByAssetIdRequestBody,\n    options?: any,\n  ): Promise<CreateContactByAssetIdResponseBody> {\n    const request = new CreateContactByAssetIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n\n  async get(\n    queryStringParameters: GetContactsByAssetIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetContactsByAssetIdResponseBody> {\n    const request = new GetContactsByAssetIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkAssetQrCodesResources extends Resources {\n  async create(\n    requestBody: CreateQrCodeByAssetIdRequestBody,\n    options?: any,\n  ): Promise<CreateQrCodeByAssetIdResponseBody> {\n    const request = new CreateQrCodeByAssetIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n\n  async get(\n    queryStringParameters: GetQrCodesByAssetIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetQrCodesByAssetIdResponseBody> {\n    const request = new GetQrCodesByAssetIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkAssetScansResources extends Resources {\n  async get(\n    queryStringParameters: GetScansByAssetIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetScansByAssetIdResponseBody> {\n    const request = new GetScansByAssetIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkAssetContactResource extends Resource {\n  async link(requestBody: LinkContactToAssetRequestBody, options?: any): Promise<LinkContactToAssetResponseBody> {\n    const request = new LinkContactToAssetRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n\n  async unlink(options?: any): Promise<any> {\n    const request = new UnlinkContactToAssetRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n}\n\nexport class SdkAssetResource extends Resource {\n  contacts(): SdkAssetContactsResources {\n    return new SdkAssetContactsResources(this.getSession(), this.pathParameters)\n  }\n\n  qrCodes(): SdkAssetQrCodesResources {\n    return new SdkAssetQrCodesResources(this.getSession(), this.pathParameters)\n  }\n\n  scans(): SdkAssetScansResources {\n    return new SdkAssetScansResources(this.getSession(), this.pathParameters)\n  }\n\n  contact(contactId: string): SdkAssetContactResource {\n    return new SdkAssetContactResource(this.getSession(), {...this.pathParameters, contactId})\n  }\n\n  async delete(options?: any): Promise<DeleteAssetResponseBody> {\n    const request = new DeleteAssetRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async get(options?: any): Promise<GetAssetResponseBody> {\n    const request = new GetAssetRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async update(requestBody: UpdateAssetRequestBody, options?: any): Promise<UpdateAssetResponseBody> {\n    const request = new UpdateAssetRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkAssetGroupResource extends Resource {\n  async delete(options?: any): Promise<DeleteAssetGroupResponseBody> {\n    const request = new DeleteAssetGroupRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async get(\n    queryStringParameters: GetAssetGroupQueryStringParameters,\n    options?: any,\n  ): Promise<GetAssetGroupResponseBody> {\n    const request = new GetAssetGroupRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkAuthGetAccessTokenResources extends Resources {\n  async create(requestBody: GetAccessTokenRequestBody, options?: any): Promise<GetAccessTokenResponseBody> {\n    const request = new GetAccessTokenRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkContactResource extends Resource {\n  async delete(options?: any): Promise<DeleteContactResponseBody> {\n    const request = new DeleteContactRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async get(options?: any): Promise<GetContactResponseBody> {\n    const request = new GetContactRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async update(requestBody: UpdateContactRequestBody, options?: any): Promise<UpdateContactResponseBody> {\n    const request = new UpdateContactRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkOverviewAccountsResources extends Resources {\n  async get(options?: any): Promise<GetAccountsOverviewResponseBody> {\n    const request = new GetAccountsOverviewRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n}\n\nexport class SdkOverviewActivityResources extends Resources {\n  async get(options?: any): Promise<GetActivityOverviewResponseBody> {\n    const request = new GetActivityOverviewRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n}\n\nexport class SdkOverviewUsersResources extends Resources {\n  async get(options?: any): Promise<GetUsersOverviewResponseBody> {\n    const request = new GetUsersOverviewRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n}\n\nexport class SdkProjectAssetsResources extends Resources {\n  async create(\n    requestBody: CreateAssetByProjectIdRequestBody,\n    options?: any,\n  ): Promise<CreateAssetByProjectIdResponseBody> {\n    const request = new CreateAssetByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n\n  async get(\n    queryStringParameters: GetAssetsByProjectIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetAssetsByProjectIdResponseBody> {\n    const request = new GetAssetsByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkProjectAssetGroupsResources extends Resources {\n  async create(\n    requestBody: CreateAssetGroupByProjectIdRequestBody,\n    options?: any,\n  ): Promise<CreateAssetGroupByProjectIdResponseBody> {\n    const request = new CreateAssetGroupByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkProjectAssetsBatchResources extends Resources {\n  async create(\n    requestBody: CreateAssetsByProjectIdRequestBody,\n    options?: any,\n  ): Promise<CreateAssetsByProjectIdResponseBody> {\n    const request = new CreateAssetsByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkProjectContactsResources extends Resources {\n  async create(\n    requestBody: CreateContactByProjectIdRequestBody,\n    options?: any,\n  ): Promise<CreateContactByProjectIdResponseBody> {\n    const request = new CreateContactByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n\n  async get(\n    queryStringParameters: GetContactsByProjectIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetContactsByProjectIdResponseBody> {\n    const request = new GetContactsByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkProjectContactsBatchResources extends Resources {\n  async create(\n    requestBody: CreateContactsByProjectIdRequestBody,\n    options?: any,\n  ): Promise<CreateContactsByProjectIdResponseBody> {\n    const request = new CreateContactsByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkProjectQrCodesResources extends Resources {\n  async create(\n    requestBody: CreateQrCodeByProjectIdRequestBody,\n    options?: any,\n  ): Promise<CreateQrCodeByProjectIdResponseBody> {\n    const request = new CreateQrCodeByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n\n  async get(\n    queryStringParameters: GetQrCodesByProjectIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetQrCodesByProjectIdResponseBody> {\n    const request = new GetQrCodesByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkProjectSmsTemplatesResources extends Resources {\n  async create(\n    requestBody: CreateSmsTemplateByProjectIdRequestBody,\n    options?: any,\n  ): Promise<CreateSmsTemplateByProjectIdResponseBody> {\n    const request = new CreateSmsTemplateByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n\n  async get(\n    queryStringParameters: GetSmsTemplatesByProjectIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetSmsTemplatesByProjectIdResponseBody> {\n    const request = new GetSmsTemplatesByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkProjectSmsTemplateResource extends Resource {\n  async delete(options?: any): Promise<DeleteSmsTemplateByProjectIdResponseBody> {\n    const request = new DeleteSmsTemplateByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async get(options?: any): Promise<GetSmsTemplateByProjectIdResponseBody> {\n    const request = new GetSmsTemplateByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async update(options?: any): Promise<UpdateSmsTemplateResponseBody> {\n    const request = new UpdateSmsTemplateRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n}\n\nexport class SdkProjectScansResources extends Resources {\n  async get(\n    queryStringParameters: GetScansByProjectIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetScansByProjectIdResponseBody> {\n    const request = new GetScansByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkProjectResource extends Resource {\n  assets(): SdkProjectAssetsResources {\n    return new SdkProjectAssetsResources(this.getSession(), this.pathParameters)\n  }\n\n  assetGroups(): SdkProjectAssetGroupsResources {\n    return new SdkProjectAssetGroupsResources(this.getSession(), this.pathParameters)\n  }\n\n  assetsBatch(): SdkProjectAssetsBatchResources {\n    return new SdkProjectAssetsBatchResources(this.getSession(), this.pathParameters)\n  }\n\n  contacts(): SdkProjectContactsResources {\n    return new SdkProjectContactsResources(this.getSession(), this.pathParameters)\n  }\n\n  contactsBatch(): SdkProjectContactsBatchResources {\n    return new SdkProjectContactsBatchResources(this.getSession(), this.pathParameters)\n  }\n\n  qrCodes(): SdkProjectQrCodesResources {\n    return new SdkProjectQrCodesResources(this.getSession(), this.pathParameters)\n  }\n\n  smsTemplates(): SdkProjectSmsTemplatesResources {\n    return new SdkProjectSmsTemplatesResources(this.getSession(), this.pathParameters)\n  }\n\n  smsTemplate(smsTemplateName: string): SdkProjectSmsTemplateResource {\n    return new SdkProjectSmsTemplateResource(this.getSession(), {...this.pathParameters, smsTemplateName})\n  }\n\n  scans(): SdkProjectScansResources {\n    return new SdkProjectScansResources(this.getSession(), this.pathParameters)\n  }\n\n  async delete(options?: any): Promise<DeleteProjectResponseBody> {\n    const request = new DeleteProjectRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async get(options?: any): Promise<GetProjectByProjectIdResponseBody> {\n    const request = new GetProjectByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async update(\n    requestBody: UpdateProjectByProjectIdRequestBody,\n    options?: any,\n  ): Promise<UpdateProjectByProjectIdResponseBody> {\n    const request = new UpdateProjectByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkQrCodeResource extends Resource {\n  async delete(options?: any): Promise<DeleteQrCodeResponseBody> {\n    const request = new DeleteQrCodeRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async get(queryStringParameters: GetQrCodeQueryStringParameters, options?: any): Promise<GetQrCodeResponseBody> {\n    const request = new GetQrCodeRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n\n  async update(requestBody: UpdateQrCodeRequestBody, options?: any): Promise<UpdateQrCodeResponseBody> {\n    const request = new UpdateQrCodeRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkScanContactsResources extends Resources {\n  async create(\n    requestBody: CreateContactByScanIdRequestBody,\n    options?: any,\n  ): Promise<CreateContactByScanIdResponseBody> {\n    const request = new CreateContactByScanIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkScanSmsResources extends Resources {\n  async send(requestBody: SendSmsByScanIdRequestBody, options?: any): Promise<SendSmsByScanIdResponseBody> {\n    const request = new SendSmsByScanIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkScanResource extends Resource {\n  contacts(): SdkScanContactsResources {\n    return new SdkScanContactsResources(this.getSession(), this.pathParameters)\n  }\n\n  sms(): SdkScanSmsResources {\n    return new SdkScanSmsResources(this.getSession(), this.pathParameters)\n  }\n\n  async get(options?: any): Promise<GetScanResponseBody> {\n    const request = new GetScanRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n}\n\nexport class SdkSearchAccountResource extends Resource {\n  async get(options?: any): Promise<GetAccountDetailsResponseBody> {\n    const request = new GetAccountDetailsRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n}\n\nexport class SdkSearchUserResource extends Resource {\n  async get(options?: any): Promise<GetUserDetailsResponseBody> {\n    const request = new GetUserDetailsRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n}\n\nexport class SdkSearchAccountsResources extends Resources {\n  async get(\n    queryStringParameters: SearchAccountsQueryStringParameters,\n    options?: any,\n  ): Promise<SearchAccountsResponseBody> {\n    const request = new SearchAccountsRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkSearchUsersResources extends Resources {\n  async get(queryStringParameters: SearchUsersQueryStringParameters, options?: any): Promise<SearchUsersResponseBody> {\n    const request = new SearchUsersRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkUserAccountsResources extends Resources {\n  async create(\n    requestBody: CreateAccountByUserIdRequestBody,\n    options?: any,\n  ): Promise<CreateAccountByUserIdResponseBody> {\n    const request = new CreateAccountByUserIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n\n  async get(\n    queryStringParameters: GetAccountsByUserIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetAccountsByUserIdResponseBody> {\n    const request = new GetAccountsByUserIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkUserErrorsResources extends Resources {\n  async get(\n    queryStringParameters: GetErrorsByUserIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetErrorsByUserIdResponseBody> {\n    const request = new GetErrorsByUserIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkUserInvitationsResources extends Resources {\n  async get(\n    queryStringParameters: GetInvitationsByUserIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetInvitationsByUserIdResponseBody> {\n    const request = new GetInvitationsByUserIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkUserResource extends Resource {\n  accounts(): SdkUserAccountsResources {\n    return new SdkUserAccountsResources(this.getSession(), this.pathParameters)\n  }\n\n  errors(): SdkUserErrorsResources {\n    return new SdkUserErrorsResources(this.getSession(), this.pathParameters)\n  }\n\n  invitations(): SdkUserInvitationsResources {\n    return new SdkUserInvitationsResources(this.getSession(), this.pathParameters)\n  }\n\n  async get(options?: any): Promise<GetUserResponseBody> {\n    const request = new GetUserRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async update(requestBody: UpdateUserRequestBody, options?: any): Promise<UpdateUserResponseBody> {\n    const request = new UpdateUserRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkResources extends Resources {\n  account(accountId: string): SdkAccountResource {\n    return new SdkAccountResource(this.getSession(), {...this.pathParameters, accountId})\n  }\n\n  invitation(invitationId: string): SdkInvitationResource {\n    return new SdkInvitationResource(this.getSession(), {...this.pathParameters, invitationId})\n  }\n\n  asset(assetId: string): SdkAssetResource {\n    return new SdkAssetResource(this.getSession(), {...this.pathParameters, assetId})\n  }\n\n  assetGroup(groupId: string): SdkAssetGroupResource {\n    return new SdkAssetGroupResource(this.getSession(), {...this.pathParameters, groupId})\n  }\n\n  authGetAccessToken(): SdkAuthGetAccessTokenResources {\n    return new SdkAuthGetAccessTokenResources(this.getSession(), this.pathParameters)\n  }\n\n  contact(contactId: string): SdkContactResource {\n    return new SdkContactResource(this.getSession(), {...this.pathParameters, contactId})\n  }\n\n  overviewAccounts(): SdkOverviewAccountsResources {\n    return new SdkOverviewAccountsResources(this.getSession(), this.pathParameters)\n  }\n\n  overviewActivity(): SdkOverviewActivityResources {\n    return new SdkOverviewActivityResources(this.getSession(), this.pathParameters)\n  }\n\n  overviewUsers(): SdkOverviewUsersResources {\n    return new SdkOverviewUsersResources(this.getSession(), this.pathParameters)\n  }\n\n  project(projectId: string): SdkProjectResource {\n    return new SdkProjectResource(this.getSession(), {...this.pathParameters, projectId})\n  }\n\n  qrCode(qrCodeId: string): SdkQrCodeResource {\n    return new SdkQrCodeResource(this.getSession(), {...this.pathParameters, qrCodeId})\n  }\n\n  scan(scanId: string): SdkScanResource {\n    return new SdkScanResource(this.getSession(), {...this.pathParameters, scanId})\n  }\n\n  searchAccount(accountId: string): SdkSearchAccountResource {\n    return new SdkSearchAccountResource(this.getSession(), {...this.pathParameters, accountId})\n  }\n\n  searchUser(userId: string): SdkSearchUserResource {\n    return new SdkSearchUserResource(this.getSession(), {...this.pathParameters, userId})\n  }\n\n  searchAccounts(): SdkSearchAccountsResources {\n    return new SdkSearchAccountsResources(this.getSession(), this.pathParameters)\n  }\n\n  searchUsers(): SdkSearchUsersResources {\n    return new SdkSearchUsersResources(this.getSession(), this.pathParameters)\n  }\n\n  user(userId: string): SdkUserResource {\n    return new SdkUserResource(this.getSession(), {...this.pathParameters, userId})\n  }\n}\n","/* eslint-disable no-console */\nimport {Request} from './request'\n\nexport class RequestDelete<PathParameters, QueryParameters, ResponseBody> extends Request {\n  async go(pathParameters: PathParameters, queryParameters: QueryParameters, options?: Object): Promise<ResponseBody> {\n    try {\n      const url = await this.makeUri(pathParameters)\n      const headers = {Authorization: await this.getAuthorization()}\n      this.debugRequest('delete', url, queryParameters, null, options)\n      const axios = await this.session.getAxios()\n      const response = await axios.delete(url, {headers, params: queryParameters, ...options})\n      this.debugResponse(response)\n      return response.data as ResponseBody\n    } catch (err) {\n      throw this.handleAndDebugErr(err)\n    }\n  }\n}\n","/* eslint-disable no-console */\nimport {Request} from './request'\n\nexport class RequestGet<PathParameters, QueryParameters, ResponseBody> extends Request {\n  async go(pathParameters: PathParameters, queryParameters?: QueryParameters, options?: Object): Promise<ResponseBody> {\n    try {\n      const url = await this.makeUri(pathParameters)\n      const headers = {Authorization: await this.getAuthorization()}\n      this.debugRequest('get', url, queryParameters, null, options)\n      const axios = await this.session.getAxios()\n      const response = await axios.get(url, {headers, params: queryParameters, ...options})\n      this.debugResponse(response)\n      return response.data as ResponseBody\n    } catch (err) {\n      throw this.handleAndDebugErr(err)\n    }\n  }\n}\n","/* eslint-disable no-console */\nimport {Request} from './request'\n\nexport class RequestPatch<PathParameters, QueryParameters, RequestBody, ResponseBody> extends Request {\n  async go(\n    pathParameters: PathParameters,\n    queryParameters?: QueryParameters,\n    body?: RequestBody,\n    options?: Object,\n  ): Promise<ResponseBody> {\n    try {\n      const url = await this.makeUri(pathParameters)\n      const headers = {Authorization: await this.getAuthorization()}\n      this.debugRequest('patch', url, queryParameters, body, options)\n      const axios = await this.session.getAxios()\n      const response = await axios.patch(url, body, {headers, params: queryParameters, ...options})\n      this.debugResponse(response)\n      return response.data! as ResponseBody\n    } catch (err) {\n      throw this.handleAndDebugErr(err)\n    }\n  }\n}\n","/* eslint-disable no-console */\nimport {Request} from './request'\n\nexport class RequestPost<PathParameters, QueryParameters, RequestBody, ResponseBody> extends Request {\n  async go(\n    pathParameters: PathParameters,\n    queryParameters?: QueryParameters,\n    body?: RequestBody,\n    options?: Object,\n  ): Promise<ResponseBody> {\n    try {\n      const url = await this.makeUri(pathParameters)\n      const headers = {Authorization: await this.getAuthorization()}\n      this.debugRequest('post', url, queryParameters, body, options)\n      const axios = await this.session.getAxios()\n      const response = await axios.post(url, body, {headers, params: queryParameters, ...options})\n      this.debugResponse(response)\n      return response.data! as ResponseBody\n    } catch (err) {\n      throw this.handleAndDebugErr(err)\n    }\n  }\n}\n","import {IOpenscreenSession} from './openscreen-session'\n\nexport class Resources {\n  protected session: IOpenscreenSession\n  protected pathParameters: any\n\n  constructor(session: IOpenscreenSession, pathParameters: any) {\n    this.session = session\n    this.pathParameters = pathParameters\n  }\n\n  self() {\n    return this\n  }\n\n  getSession(): IOpenscreenSession {\n    return this.session\n  }\n}\n\nexport class Resource {\n  protected session: IOpenscreenSession\n  protected pathParameters: any\n  protected id?: string\n\n  constructor(session: IOpenscreenSession, pathParameters: any) {\n    this.session = session\n    this.pathParameters = pathParameters\n  }\n\n  getSession(): IOpenscreenSession {\n    return this.session\n  }\n}\n","import {CognitoUser, AuthenticationDetails, CognitoUserSession} from 'amazon-cognito-identity-js'\n\nexport interface AuthenticateResponse {\n  session?: CognitoUserSession\n  challengeName?: String\n  challengeParameters?: Object\n}\n\nexport class CognitoUserAsync extends CognitoUser {\n  async authenticateUser(authenticationDetails: AuthenticationDetails) {\n    return new Promise<AuthenticateResponse>((resolve, reject) => {\n      super.authenticateUser(authenticationDetails, {\n        onSuccess: (session: CognitoUserSession) => resolve({session}),\n        onFailure: (err: Error) => reject(err),\n        mfaRequired: (challengeName: String, challengeParameters: Object) =>\n          resolve({\n            challengeName,\n            challengeParameters,\n          }),\n        selectMFAType: (challengeName: String, challengeParameters: Object) =>\n          resolve({\n            challengeName,\n            challengeParameters,\n          }),\n        mfaSetup: (challengeName: String, challengeParameters: Object) =>\n          resolve({\n            challengeName,\n            challengeParameters,\n          }),\n        totpRequired: (challengeName: String, challengeParameters: Object) =>\n          resolve({\n            challengeName,\n            challengeParameters,\n          }),\n        customChallenge: (challengeParameters: Object) => resolve({challengeParameters}),\n      })\n    })\n  }\n\n  async getSession() {\n    return new Promise<CognitoUserSession>((resolve, reject) => {\n      super.getSession((err: any, session: CognitoUserSession) => {\n        if (err) return reject(err)\n        return resolve(session)\n      })\n    })\n  }\n}\n","import {CognitoUserPool, CognitoUserAttribute, ISignUpResult} from 'amazon-cognito-identity-js'\nimport {IAuthStorage} from './auth-storage'\n\nexport class CognitoUserPoolAsync extends CognitoUserPool {\n  getStorage(): IAuthStorage {\n    return (this as any).storage\n  }\n\n  getClientId(): string {\n    return (this as any).clientId\n  }\n\n  async signUp(\n    username: string,\n    password: string,\n    userAttributes: CognitoUserAttribute[],\n    validationData: CognitoUserAttribute[],\n  ) {\n    return new Promise<ISignUpResult>((resolve, reject) => {\n      super.signUp(username, password, userAttributes, validationData, (err?: Error, result?: ISignUpResult) => {\n        if (err) return reject(err)\n        return resolve(result!)\n      })\n    })\n  }\n}\n","import {AuthenticationDetails, CognitoUserAttribute} from 'amazon-cognito-identity-js'\nimport {CognitoUserAsync} from './cognito-user-async'\nimport {CognitoUserPoolAsync} from './cognito-user-pool-async'\nimport {IAuthStorage} from './auth-storage'\n\nexport class UserPool {\n  userPool: CognitoUserPoolAsync\n\n  constructor(userPoolId: string, clientId: string, storage?: IAuthStorage) {\n    this.userPool = new CognitoUserPoolAsync({\n      UserPoolId: userPoolId,\n      ClientId: clientId,\n      Storage: storage,\n    })\n  }\n\n  getCognitoUserPool(): CognitoUserPoolAsync {\n    return this.userPool\n  }\n\n  getStorage(): IAuthStorage {\n    return this.userPool.getStorage()\n  }\n\n  getUser(key: string): CognitoUserAsync | null {\n    if (key) {\n      const username = this.userPool.getStorage().getItem(`keyToUsername.${Buffer.from(key).toString('base64')}`)\n      if (username) {\n        return new CognitoUserAsync({\n          Username: username,\n          Pool: this.userPool,\n          Storage: this.userPool.getStorage(),\n        })\n      }\n      return null\n    }\n    const lastAuthUser = this.userPool\n      .getStorage()\n      .getItem(`CognitoIdentityServiceProvider.${this.userPool.getClientId()}.LastAuthUser`)\n    if (lastAuthUser) {\n      return new CognitoUserAsync({\n        Username: lastAuthUser,\n        Pool: this.userPool,\n        Storage: this.userPool.getStorage(),\n      })\n    }\n    return null\n  }\n\n  async authenticate(key: string, secret: string) {\n    const cognitoUser = new CognitoUserAsync({\n      Username: key,\n      Pool: this.userPool,\n      Storage: this.userPool.getStorage(),\n    })\n    const authenticationDetails = new AuthenticationDetails({\n      Username: key,\n      Password: secret,\n    })\n    return cognitoUser.authenticateUser(authenticationDetails).then((response) => {\n      if (response.session) {\n        const username = cognitoUser.getUsername()\n        this.userPool.getStorage().setItem(`keyToUsername.${Buffer.from(key).toString('base64')}`, username)\n        return cognitoUser\n      }\n      return null\n    })\n  }\n\n  async signUp(email: string, password: string, attributes: any) {\n    const attributeList: CognitoUserAttribute[] = []\n    attributeList.push(new CognitoUserAttribute({Name: 'given_name', Value: attributes.givenName}))\n    attributeList.push(new CognitoUserAttribute({Name: 'middle_name', Value: attributes.middleName}))\n    attributeList.push(new CognitoUserAttribute({Name: 'family_name', Value: attributes.familyName}))\n    attributeList.push(new CognitoUserAttribute({Name: 'phone_number', Value: attributes.phoneNumber}))\n    attributeList.push(new CognitoUserAttribute({Name: 'email', Value: email}))\n    return this.userPool.signUp(email, password, attributeList, [])\n  }\n}\n","import moment from 'moment'\nimport axios, {AxiosInstance} from 'axios'\nimport {CognitoUserSession} from 'amazon-cognito-identity-js'\nimport {CognitoUserAsync} from './auth/cognito-user-async'\nimport {SdkResources, QrCode} from './sdk'\nimport {ICloudConfig} from './cloud-config'\nimport {IConfig} from './config'\nimport {IOpenscreenSession} from './openscreen-session'\nimport {UserPool} from './auth/user-pool'\nimport {promises as fs} from 'fs'\n\nconst ProdConfigurationPath = 'prod-aNCxEnLyMSsR8sso'\n\nasync function getCloudConfig(pathToConfig: string): Promise<ICloudConfig> {\n  const thisAxios = axios.create({\n    baseURL: 'https://config.openscreen.com',\n    timeout: 25000,\n    responseType: 'json',\n    maxContentLength: 10 * 1024,\n    maxBodyLength: 10 * 1024,\n    maxRedirects: 1,\n    decompress: true,\n  })\n  const response = await thisAxios.get(`${pathToConfig}.json`).catch((err: {message: any}) => {\n    throw new Error(`Openscreen: unable to load cloud configuration '${pathToConfig}': ${err.message}`)\n  })\n  const {data} = response\n  if (pathToConfig.startsWith('web-')) {\n    return {\n      region: data.region,\n      userPoolId: data.poolId,\n      userClientId: data.clientId,\n      apiPoolId: '',\n      apiClientId: '',\n      endpoint: data.endpoint,\n      axios: data.axios,\n    }\n  }\n  if (pathToConfig.startsWith('api-')) {\n    return {\n      region: data.region,\n      userPoolId: '',\n      userClientId: '',\n      apiPoolId: data.poolId,\n      apiClientId: data.clientId,\n      endpoint: data.endpoint,\n      axios: data.axios,\n    }\n  }\n  return data as ICloudConfig\n}\n\nclass NullSession implements IOpenscreenSession {\n  public debugConfig = false\n  public debugAuth = false\n  public debugRequest = false\n  public debugResponse = false\n  public debugError = false\n  public debugQuery = false\n  public debugOptions = false\n  getConfig(): IConfig {\n    throw Error('no session')\n  }\n\n  getCloudConfig(): Promise<ICloudConfig> {\n    throw Error('no session')\n  }\n\n  getActiveUser(): Promise<CognitoUserAsync> {\n    throw Error('no session')\n  }\n\n  getActiveSession(): Promise<CognitoUserSession> {\n    throw Error('no session')\n  }\n\n  getAxios(): Promise<AxiosInstance> {\n    throw Error('no session')\n  }\n}\n\nexport class Openscreen extends SdkResources implements IOpenscreenSession {\n  protected _config?: IConfig\n  protected cloudConfigName?: string\n  protected cloudConfig?: Promise<ICloudConfig>\n  protected userPool?: UserPool\n  protected userId?: string\n  protected usingApiKey: boolean = false\n  protected isAdministrator?: boolean\n  protected activeUser?: Promise<CognitoUserAsync>\n  protected axios?: AxiosInstance\n  public debugConfig: boolean = false\n  public debugAuth: boolean = false\n  public debugRequest: boolean = false\n  public debugResponse: boolean = false\n  public debugError: boolean = false\n  public debugQuery: boolean = false\n  public debugOptions: boolean = false\n\n  constructor() {\n    super(new NullSession(), {})\n    let {OS_DEBUG} = process.env\n    if (OS_DEBUG) {\n      console.log(`OS_DEBUG=${OS_DEBUG}`)\n      OS_DEBUG = OS_DEBUG.toLowerCase()\n      let debug\n      switch (OS_DEBUG) {\n        case 'all':\n          this.debugConfig = true\n          this.debugAuth = true\n          this.debugRequest = true\n          this.debugResponse = true\n          this.debugError = true\n          this.debugQuery = true\n          this.debugOptions = true\n          break\n        case 'none':\n        case 'off':\n        case 'false':\n        case '':\n          this.debugConfig = false\n          this.debugAuth = false\n          this.debugRequest = false\n          this.debugResponse = false\n          this.debugError = false\n          this.debugQuery = false\n          this.debugOptions = false\n          break\n        default:\n          debug = OS_DEBUG.split(',')\n          this.debugConfig = debug.includes('config')\n          this.debugAuth = debug.includes('auth')\n          this.debugRequest = debug.includes('request')\n          this.debugResponse = debug.includes('response')\n          this.debugError = debug.includes('error')\n          this.debugQuery = debug.includes('query')\n          this.debugOptions = debug.includes('options')\n          if (\n            !(\n              this.debugConfig ||\n              this.debugAuth ||\n              this.debugRequest ||\n              this.debugResponse ||\n              this.debugError ||\n              this.debugQuery ||\n              this.debugOptions\n            )\n          ) {\n            console.warn(`Openscreen: OS_DEBUG environment var has invalid value: '${process.env.OS_DEBUG}'`)\n          }\n          break\n      }\n    }\n  }\n\n  getSession() {\n    return this\n  }\n\n  config(config: IConfig): Openscreen {\n    if (this._config) {\n      throw Error('Openscreen: client is already configured')\n    }\n    if (config.key) {\n      if (!config.secret) {\n        throw Error('Openscreen: invalid config, secret is missing')\n      }\n      if (config.email || config.password) {\n        throw Error('Openscreen: invalid config, use either API key and secret, or email and password, but not both')\n      }\n      this.usingApiKey = true\n    } else if (config.email) {\n      if (!config.password) {\n        throw Error('Openscreen: invalid config, password is missing')\n      }\n      if (config.key || config.secret) {\n        throw Error('Openscreen: invalid config, use either API key and secret, or email and password, but not both')\n      }\n    } else {\n      throw Error('Openscreen: invalid config, provide API key and secret, or email and password')\n    }\n    if (typeof config.environment === 'string') {\n      this.cloudConfigName = config.environment\n    } else if (typeof config.environment === 'object') {\n      this.cloudConfig = Promise.resolve(config.environment)\n    } else {\n      this.cloudConfigName = ProdConfigurationPath\n    }\n    // eslint-disable-next-line no-param-reassign\n    this._config = config\n    return this\n  }\n\n  getConfig(): IConfig {\n    if (!this._config) {\n      throw Error('Openscreen: client must be configured before accessing resources')\n    }\n    return this._config\n  }\n\n  async authorize(): Promise<CognitoUserAsync> {\n    const config = this.getConfig()\n    if (this.debugConfig) {\n      const c = {...config}\n      if (c.secret) c.secret = '*'.repeat(c.secret.length)\n      if (c.password) c.password = '*'.repeat(c.password.length)\n      console.debug(`Openscreen CONFIG: ${JSON.stringify(c, null, 2)}`)\n    }\n    const cloudConfig = await this.getCloudConfig()\n    if (this.debugConfig) {\n      console.debug(`Openscreen CONFIG: (environment) ${JSON.stringify(cloudConfig, null, 2)}`)\n    }\n    let userType\n    let key\n    let secret\n    let poolId\n    let clientId\n    if (this.usingApiKey) {\n      userType = 'API key'\n      key = config.key!\n      secret = config.secret!\n      poolId = cloudConfig.apiPoolId!\n      clientId = cloudConfig.apiClientId!\n    } else {\n      userType = 'email'\n      key = config.email!\n      secret = config.password!\n      poolId = cloudConfig.userPoolId!\n      clientId = cloudConfig.userClientId!\n    }\n    this.userPool = new UserPool(poolId, clientId, config.storage)\n    let user = this.userPool!.getUser(key)\n    let session: CognitoUserSession\n    if (user) {\n      if (this.debugAuth) console.info(`Openscreen AUTH: authorized ${userType} '${key}' retrieved from cache`)\n      await user!\n        .getSession()\n        .then((s) => {\n          session = s\n        })\n        .catch((err) => {\n          if (this.debugAuth) {\n            console.info(`Openscreen AUTH: ${err}`)\n          }\n          user = null\n        })\n    }\n    if (!user) {\n      if (this.debugAuth) console.info(`Openscreen AUTH: authorizing ${userType} '${key}'`)\n      user = await this.userPool!.authenticate(key, secret)\n      session = await user!.getSession()\n    }\n    const idToken = session!.getIdToken()\n    const idInfo = idToken.payload\n    this.userId = idInfo.sub\n    const groups = idInfo['cognito:groups']\n    this.isAdministrator = groups && groups.includes('appadmin')\n    if (this.debugAuth) {\n      if (idInfo.email) {\n        const isAdmin = this.isAdministrator ? ', administrator' : ''\n        console.info(\n          `Openscreen AUTH: authorized as '${idInfo.email}' (userId: ${idInfo.sub}${isAdmin}), session expires ${moment(\n            idToken.getExpiration() * 1000,\n          ).fromNow()}, authorized ${moment(idToken.getIssuedAt() * 1000).fromNow()}`,\n        )\n      } else {\n        const isAdmin = this.isAdministrator ? ' (administrator)' : ''\n        console.info(\n          `Openscreen AUTH: authorized as userId: ${idInfo.sub}${isAdmin}, session expires ${moment(\n            idToken.getExpiration() * 1000,\n          ).fromNow()}, authorized ${moment(idToken.getIssuedAt() * 1000).fromNow()}`,\n        )\n      }\n    }\n    return user!\n  }\n\n  async getCloudConfig(): Promise<ICloudConfig> {\n    if (!this.cloudConfig) {\n      if (!this.cloudConfigName) {\n        throw Error('Openscreen: environment name missing')\n      }\n      this.cloudConfig = getCloudConfig(this.cloudConfigName)\n    }\n    return this.cloudConfig\n  }\n\n  async getActiveUser(): Promise<CognitoUserAsync> {\n    if (!this.activeUser) {\n      this.activeUser = this.authorize()\n    }\n    return this.activeUser!\n  }\n\n  async getActiveSession(): Promise<CognitoUserSession> {\n    let user = await this.getActiveUser()\n    try {\n      return await user.getSession()\n    } catch {\n      this.activeUser = this.authorize()\n      user = await this.activeUser\n      return await user.getSession()\n    }\n  }\n\n  async authorizedUserId(): Promise<string> {\n    await this.getActiveUser()\n    return this.userId || ''\n  }\n\n  async amIAdministrator(): Promise<boolean> {\n    await this.getActiveUser()\n    return this.isAdministrator === true\n  }\n\n  async getAxios(): Promise<AxiosInstance> {\n    if (this.axios) return axios\n    const cloudConfig = await this.getCloudConfig()\n    const config = cloudConfig.axios || {\n      timeout: 25000,\n      responseType: 'json',\n      maxContentLength: 1024 * 1024,\n      maxBodyLength: 1024 * 1024,\n      maxRedirects: 1,\n      decompress: true,\n    }\n    this.axios = axios.create(config)\n    return axios!\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  async saveQrImageDataToFile(qrCode: QrCode, path?: string) {\n    const image = qrCode.image\n    if (!image || !image.data || !image.options) {\n      throw new Error(`No valid image data present for QR code, qrCodeId='${qrCode.qrCodeId || ''}'`)\n    }\n    const format = qrCode.image!.options!.format!.toLowerCase()\n    if (format === 'png') {\n      let binaryData: string\n      if (qrCode.image!.options!.dataUrl) {\n        binaryData = Buffer.from(qrCode.image!.data!.replace(/^data:image\\/\\w+;base64,/, ''), 'base64').toString(\n          'binary',\n        )\n      } else {\n        binaryData = Buffer.from(qrCode.image!.data!, 'base64').toString('binary')\n      }\n      if (!path) path = `${qrCode.qrCodeId}.png`\n      await fs.writeFile(path, binaryData, 'binary')\n    } else if (format === 'svg') {\n      if (!path) path = `${qrCode.qrCodeId}.svg`\n      await fs.writeFile(path, qrCode.image!.data!)\n    } else {\n      throw Error(`QR code image data was not returned in 'png' or 'svg' format`)\n    }\n  }\n}\n"],"names":["Request","AccountStatus","AccountUserRole","PricePlanName","PricePlanPaymentPeriod","PricePlanReporting","ProjectStatus","QrCodeDynamicRedirectType","QrCodeErrorCorrectionLevel","QrCodeIntentType","QrCodeLocatorKeyType","QrCodeStatus","QrCodeType","session","this","routeSegments","makeUri","pathParameters","_this2","getCloudConfig","cloudConfig","urlParts","endpoint","replace","forEach","segment","push","routePart","parm","value","Error","join","e","Promise","reject","_proto","getAuthorization","resolve","getActiveSession","getAccessToken","getJwtToken","token","debugRequest","method","url","queryParameters","body","options","console","debug","toUpperCase","JSON","stringify","debugQuery","debugOptions","debugResponse","response","data","handleAndDebugErr","err","debugError","error","RequestDelete","_Request","apply","arguments","_inheritsLoose","prototype","go","then","_this$getAuthorizatio","headers","Authorization","getAxios","axios","_extends","params","_catch","RequestGet","get","RequestPatch","patch","RequestPost","post","Resources","self","getSession","Resource","id","CreateInvitationByAccountIdRequest","sdkPartName","CreateProjectByAccountIdRequest","_RequestPost2","_len2","length","args","Array","_key2","call","concat","CreateUserByInvitationIdRequest","DeleteAccountRequest","DeleteInvitationRequest","_this5","DeleteUserByAccountIdRequest","_RequestDelete3","_this6","_len6","_key6","GetAccountRequest","_this7","GetAssetsByAccountIdRequest","_RequestGet2","_this8","_len8","_key8","GetContactsByAccountIdRequest","_RequestGet3","_this9","_len9","_key9","GetInvitationRequest","_RequestGet4","_this10","_len10","_key10","GetPricePlanByAccountIdRequest","_RequestGet5","_this11","_len11","_key11","GetProjectsByAccountIdRequest","_RequestGet6","_this12","_len12","_key12","GetQrCodesByAccountIdRequest","GetScansByAccountIdRequest","GetUsersByAccountIdRequest","UpdateAccountRequest","_RequestPatch","_this16","_len16","_key16","UpdatePricePlanByAccountIdRequest","CreateContactByAssetIdRequest","CreateQrCodeByAssetIdRequest","DeleteAssetRequest","DeleteAssetGroupRequest","_RequestDelete5","_this21","_len21","_key21","GetAssetRequest","_RequestGet10","_this22","_len22","_key22","GetAssetGroupRequest","GetContactsByAssetIdRequest","GetQrCodesByAssetIdRequest","_this25","GetScansByAssetIdRequest","_RequestGet14","_this26","_len26","_key26","LinkContactToAssetRequest","_this27","UnlinkContactToAssetRequest","_RequestDelete6","_this28","_len28","_key28","UpdateAssetRequest","GetAccessTokenRequest","_this30","DeleteContactRequest","GetContactRequest","UpdateContactRequest","_RequestPatch4","_this33","_len33","_key33","GetAccountsOverviewRequest","GetActivityOverviewRequest","_this35","GetUsersOverviewRequest","_RequestGet18","_this36","_len36","_key36","CreateAssetByProjectIdRequest","CreateAssetGroupByProjectIdRequest","_this38","CreateAssetsByProjectIdRequest","_this39","CreateContactByProjectIdRequest","_RequestPost11","_this40","_len40","_key40","CreateContactsByProjectIdRequest","_RequestPost12","_this41","_len41","_key41","CreateQrCodeByProjectIdRequest","_RequestPost13","_this42","_len42","_key42","CreateSmsTemplateByProjectIdRequest","DeleteProjectRequest","DeleteSmsTemplateByProjectIdRequest","_RequestDelete9","_this45","_len45","_key45","GetAssetsByProjectIdRequest","GetContactsByProjectIdRequest","_RequestGet20","_this47","_len47","_key47","GetProjectByProjectIdRequest","GetQrCodesByProjectIdRequest","GetScansByProjectIdRequest","GetSmsTemplateByProjectIdRequest","_this51","GetSmsTemplatesByProjectIdRequest","_RequestGet25","_this52","_len52","_key52","UpdateProjectByProjectIdRequest","UpdateSmsTemplateRequest","_RequestPatch6","_this54","_len54","_key54","DeleteQrCodeRequest","_RequestDelete10","_this55","_len55","_key55","GetQrCodeRequest","UpdateQrCodeRequest","CreateContactByScanIdRequest","GetScanRequest","SendSmsByScanIdRequest","GetAccountDetailsRequest","_RequestGet28","_this61","_len61","_key61","GetUserDetailsRequest","_RequestGet29","_this62","_len62","_key62","SearchAccountsRequest","SearchUsersRequest","_this64","CreateAccountByUserIdRequest","_RequestPost17","_this65","_len65","_key65","GetAccountsByUserIdRequest","_RequestGet32","_this66","_len66","_key66","GetErrorsByUserIdRequest","_RequestGet33","_this67","_len67","_key67","GetInvitationsByUserIdRequest","_RequestGet34","_this68","_len68","_key68","GetUserRequest","_RequestGet35","_this69","_len69","_key69","UpdateUserRequest","SdkAccountInvitationsResources","create","requestBody","request","undefined","SdkAccountProjectsResources","_Resources2","_proto2","queryStringParameters","SdkAccountUserResource","SdkAccountAssetsResources","SdkAccountContactsResources","_Resources4","SdkAccountPricePlanResources","update","SdkAccountQrCodesResources","SdkAccountScansResources","SdkAccountUsersResources","SdkAccountResource","_Resource2","_proto10","invitations","projects","user","userId","assets","contacts","pricePlan","qrCodes","scans","users","SdkInvitationUsersResources","SdkInvitationResource","SdkAssetContactsResources","_proto13","SdkAssetQrCodesResources","_proto14","SdkAssetScansResources","SdkAssetContactResource","link","unlink","SdkAssetResource","contact","contactId","_proto17","SdkAssetGroupResource","_proto18","SdkAuthGetAccessTokenResources","SdkContactResource","SdkOverviewAccountsResources","_Resources14","SdkOverviewActivityResources","_Resources15","SdkOverviewUsersResources","SdkProjectAssetsResources","_Resources17","_proto24","SdkProjectAssetGroupsResources","_Resources18","SdkProjectAssetsBatchResources","SdkProjectContactsResources","_proto27","SdkProjectContactsBatchResources","SdkProjectQrCodesResources","_Resources22","_proto29","SdkProjectSmsTemplatesResources","_Resources23","_proto30","SdkProjectSmsTemplateResource","_Resource8","_proto31","SdkProjectScansResources","_Resources24","SdkProjectResource","_proto33","assetGroups","assetsBatch","contactsBatch","smsTemplates","smsTemplate","smsTemplateName","SdkQrCodeResource","_proto34","SdkScanContactsResources","_Resources25","SdkScanSmsResources","send","SdkScanResource","sms","SdkSearchAccountResource","SdkSearchUserResource","SdkSearchAccountsResources","SdkSearchUsersResources","_Resources28","SdkUserAccountsResources","_proto42","SdkUserErrorsResources","SdkUserInvitationsResources","SdkUserResource","_Resource14","_proto45","accounts","errors","SdkResources","account","accountId","invitation","invitationId","asset","assetId","assetGroup","groupId","_proto46","authGetAccessToken","overviewAccounts","overviewActivity","overviewUsers","project","projectId","qrCode","qrCodeId","scan","scanId","searchAccount","searchUser","searchAccounts","searchUsers","CognitoUserAsync","authenticateUser","authenticationDetails","_CognitoUser","onSuccess","onFailure","mfaRequired","challengeName","challengeParameters","selectMFAType","mfaSetup","totpRequired","customChallenge","_this4","CognitoUser","CognitoUserPoolAsync","getStorage","storage","getClientId","clientId","signUp","username","password","userAttributes","validationData","_CognitoUserPool","result","CognitoUserPool","UserPool","userPoolId","userPool","UserPoolId","ClientId","Storage","getCognitoUserPool","getUser","key","getItem","Buffer","from","toString","Username","Pool","lastAuthUser","authenticate","secret","cognitoUser","AuthenticationDetails","Password","getUsername","setItem","email","attributes","attributeList","CognitoUserAttribute","Name","Value","givenName","middleName","familyName","phoneNumber","NullSession","debugConfig","debugAuth","getConfig","getActiveUser","Openscreen","_SdkResources","_this","_config","cloudConfigName","usingApiKey","isAdministrator","activeUser","OS_DEBUG","process","env","log","toLowerCase","split","includes","warn","config","environment","authorize","_this3","c","repeat","idToken","getIdToken","idInfo","payload","sub","groups","info","moment","getExpiration","fromNow","getIssuedAt","_temp","userType","_user$getSession","_temp2","poolId","apiPoolId","apiClientId","userClientId","s","_temp3","_temp4","pathToConfig","thisAxios","baseURL","timeout","responseType","maxContentLength","maxBodyLength","maxRedirects","decompress","message","startsWith","region","_this8$activeUser","authorizedUserId","amIAdministrator","_this13","_this15","saveQrImageDataToFile","path","image","format","binaryData","dataUrl","fs","writeFile"],"mappings":"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"}