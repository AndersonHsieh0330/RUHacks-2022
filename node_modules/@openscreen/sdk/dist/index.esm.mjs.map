{"version":3,"file":"index.esm.mjs","sources":["../src/request.ts","../src/request-delete.ts","../src/request-get.ts","../src/request-patch.ts","../src/request-post.ts","../src/resource.ts","../src/sdk.ts","../src/auth/cognito-user-async.ts","../src/auth/cognito-user-pool-async.ts","../src/auth/user-pool.ts","../src/openscreen.ts"],"sourcesContent":["/* eslint-disable no-console, import/no-cycle */\nimport {IOpenscreenSession} from './openscreen-session'\n\nexport interface RequestRouteSegment {\n  parm?: string\n  routePart: string\n  sdkPartName: string\n}\n\nexport class Request {\n  session: IOpenscreenSession\n  routeSegments?: RequestRouteSegment[]\n\n  constructor(session: IOpenscreenSession) {\n    this.session = session\n  }\n\n  async makeUri(pathParameters: any = {}) {\n    const cloudConfig = await this.session.getCloudConfig()\n    const urlParts: string[] = [cloudConfig.endpoint.replace(/\\/+$/, '')]\n    this.routeSegments!.forEach((segment) => {\n      urlParts.push(segment.routePart)\n      if (segment.parm) {\n        const value = pathParameters[segment.parm!]\n        if (!value) {\n          throw Error(`Openscreen: missing path parameter value for '${segment.parm!}'`)\n        }\n        urlParts.push(value)\n      }\n    })\n    return urlParts.join('/')\n  }\n\n  async getAuthorization(): Promise<string> {\n    const session = await this.session.getActiveSession()\n    const token = await session.getAccessToken().getJwtToken()\n    return `Bearer ${token}`\n  }\n\n  debugRequest(method: string, url: string, queryParameters?: any, body?: any, options?: any) {\n    if (this.session.debugRequest) {\n      console.debug(`Openscreen REQUEST: ${method.toUpperCase()} ${url}`)\n      if (body) console.debug(`Openscreen REQUEST: ${JSON.stringify(body, null, 2)}`)\n      if (queryParameters && this.session.debugQuery) {\n        console.debug(`Openscreen QUERY: ${JSON.stringify(queryParameters, null, 2)}`)\n      }\n      if (options && this.session.debugOptions) {\n        console.debug(`Openscreen OPTIONS: ${JSON.stringify(options, null, 2)}`)\n      }\n    }\n  }\n\n  debugResponse(response: any) {\n    if (this.session.debugResponse) {\n      console.debug(`Openscreen RESPONSE: ${JSON.stringify(response.data || {}, null, 2)}`)\n    }\n  }\n\n  handleAndDebugErr(err: any): any {\n    if (err.response && err.response.data) {\n      if (this.session.debugError) {\n        console.error(`Openscreen ERROR: ${JSON.stringify(err.response.data, null, 2)}`)\n      } else if (this.session.debugResponse) {\n        console.error(`Openscreen RESPONSE: ${JSON.stringify(err.response.data, null, 2)}`)\n      }\n      return err.response.data\n    }\n    if (this.session.debugError) {\n      try {\n        console.error(err)\n      } catch {\n        console.error(`Openscreen: (unable to print error)`)\n      }\n    }\n    return err\n  }\n}\n","/* eslint-disable no-console */\nimport {Request} from './request'\n\nexport class RequestDelete<PathParameters, QueryParameters, ResponseBody> extends Request {\n  async go(pathParameters: PathParameters, queryParameters: QueryParameters, options?: Object): Promise<ResponseBody> {\n    try {\n      const url = await this.makeUri(pathParameters)\n      const headers = {Authorization: await this.getAuthorization()}\n      this.debugRequest('delete', url, queryParameters, null, options)\n      const axios = await this.session.getAxios()\n      const response = await axios.delete(url, {headers, params: queryParameters, ...options})\n      this.debugResponse(response)\n      return response.data as ResponseBody\n    } catch (err) {\n      throw this.handleAndDebugErr(err)\n    }\n  }\n}\n","/* eslint-disable no-console */\nimport {Request} from './request'\n\nexport class RequestGet<PathParameters, QueryParameters, ResponseBody> extends Request {\n  async go(pathParameters: PathParameters, queryParameters?: QueryParameters, options?: Object): Promise<ResponseBody> {\n    try {\n      const url = await this.makeUri(pathParameters)\n      const headers = {Authorization: await this.getAuthorization()}\n      this.debugRequest('get', url, queryParameters, null, options)\n      const axios = await this.session.getAxios()\n      const response = await axios.get(url, {headers, params: queryParameters, ...options})\n      this.debugResponse(response)\n      return response.data as ResponseBody\n    } catch (err) {\n      throw this.handleAndDebugErr(err)\n    }\n  }\n}\n","/* eslint-disable no-console */\nimport {Request} from './request'\n\nexport class RequestPatch<PathParameters, QueryParameters, RequestBody, ResponseBody> extends Request {\n  async go(\n    pathParameters: PathParameters,\n    queryParameters?: QueryParameters,\n    body?: RequestBody,\n    options?: Object,\n  ): Promise<ResponseBody> {\n    try {\n      const url = await this.makeUri(pathParameters)\n      const headers = {Authorization: await this.getAuthorization()}\n      this.debugRequest('patch', url, queryParameters, body, options)\n      const axios = await this.session.getAxios()\n      const response = await axios.patch(url, body, {headers, params: queryParameters, ...options})\n      this.debugResponse(response)\n      return response.data! as ResponseBody\n    } catch (err) {\n      throw this.handleAndDebugErr(err)\n    }\n  }\n}\n","/* eslint-disable no-console */\nimport {Request} from './request'\n\nexport class RequestPost<PathParameters, QueryParameters, RequestBody, ResponseBody> extends Request {\n  async go(\n    pathParameters: PathParameters,\n    queryParameters?: QueryParameters,\n    body?: RequestBody,\n    options?: Object,\n  ): Promise<ResponseBody> {\n    try {\n      const url = await this.makeUri(pathParameters)\n      const headers = {Authorization: await this.getAuthorization()}\n      this.debugRequest('post', url, queryParameters, body, options)\n      const axios = await this.session.getAxios()\n      const response = await axios.post(url, body, {headers, params: queryParameters, ...options})\n      this.debugResponse(response)\n      return response.data! as ResponseBody\n    } catch (err) {\n      throw this.handleAndDebugErr(err)\n    }\n  }\n}\n","import {IOpenscreenSession} from './openscreen-session'\n\nexport class Resources {\n  protected session: IOpenscreenSession\n  protected pathParameters: any\n\n  constructor(session: IOpenscreenSession, pathParameters: any) {\n    this.session = session\n    this.pathParameters = pathParameters\n  }\n\n  self() {\n    return this\n  }\n\n  getSession(): IOpenscreenSession {\n    return this.session\n  }\n}\n\nexport class Resource {\n  protected session: IOpenscreenSession\n  protected pathParameters: any\n  protected id?: string\n\n  constructor(session: IOpenscreenSession, pathParameters: any) {\n    this.session = session\n    this.pathParameters = pathParameters\n  }\n\n  getSession(): IOpenscreenSession {\n    return this.session\n  }\n}\n","import {RequestRouteSegment} from './request'\nimport {RequestDelete} from './request-delete'\nimport {RequestGet} from './request-get'\nimport {RequestPatch} from './request-patch'\nimport {RequestPost} from './request-post'\nimport {Resource, Resources} from './resource'\n\nexport interface NestedKeyValueObject {\n  [key: string]: string | number | boolean | NestedKeyValueObject\n}\n// ENUMERATIONS\n\nexport enum AccountStatus {\n  ACTIVE = 'ACTIVE',\n  SUSPENDED = 'SUSPENDED',\n}\n\nexport enum AccountUserRole {\n  OWNER = 'OWNER',\n  ADMINISTRATOR = 'ADMINISTRATOR',\n  BILLING_CONTACT = 'BILLING_CONTACT',\n  MEMBER = 'MEMBER',\n  API_KEY = 'API_KEY',\n  INVITATION_DECLINED = 'INVITATION_DECLINED',\n}\n\nexport enum PricePlanName {\n  INDIVIDUAL_STARTER = 'individualStarter',\n  INDIVIDUAL_PRO = 'individualPro',\n  ENTERPRISE_STARTER = 'enterpriseStarter',\n  ENTERPRISE_PRO = 'enterprisePro',\n  ENTERPRISE_CUSTOM = 'enterpriseCustom',\n  UNLIMITED = 'unlimited',\n}\n\nexport enum PricePlanPaymentPeriod {\n  MONTHLY = 'monthly',\n  ANNUAL = 'annual',\n}\n\nexport enum PricePlanReporting {\n  BASIC = 'basic',\n  ADVANCED = 'advanced',\n  basic = 'basic',\n  advance = 'advanced',\n}\n\nexport enum ProjectStatus {\n  ACTIVE = 'ACTIVE',\n  SUSPENDED = 'SUSPENDED',\n}\n\nexport enum QrCodeDynamicRedirectType {\n  NO_SCAN_ID = 'NO_SCAN_ID',\n  SCAN_ID_IN_PATH_PARAMETER = 'SCAN_ID_IN_PATH_PARAMETER',\n  SCAN_ID_IN_QUERY_STRING_PARAMETER = 'SCAN_ID_IN_QUERY_STRING_PARAMETER',\n}\n\nexport enum QrCodeErrorCorrectionLevel {\n  L = 'L',\n  M = 'M',\n  Q = 'Q',\n  H = 'H',\n}\n\nexport enum QrCodeIntentType {\n  STATIC_REDIRECT = 'STATIC_REDIRECT',\n  DYNAMIC_REDIRECT = 'DYNAMIC_REDIRECT',\n  DYNAMIC_REDIRECT_TO_APP = 'DYNAMIC_REDIRECT_TO_APP',\n}\n\nexport enum QrCodeLocatorKeyType {\n  SHORT_URL = 'SHORT_URL',\n  HASHED_ID = 'HASHED_ID',\n  SECURE_ID = 'SECURE_ID',\n}\n\nexport enum QrCodeStatus {\n  ACTIVE = 'ACTIVE',\n  INACTIVE = 'INACTIVE',\n  SUSPENDED = 'SUSPENDED',\n}\n\nexport enum QrCodeType {\n  PNG = 'PNG',\n  JPEG = 'JPEG',\n  SVG = 'SVG',\n  png = 'png',\n  jpeg = 'jpeg',\n  svg = 'svg',\n}\n\n// APPLICATION ENTITIES\n\nexport interface Entity {}\n\nexport interface DdbEntity {\n  created?: string | Date | number\n  modified?: string | Date | number\n}\n\nexport interface Response {\n  body?: DdbEntity\n  code?: number\n  created?: string | Date | number\n  data?: NestedKeyValueObject\n  message?: string\n  modified?: string | Date | number\n  name?: string\n  request?: string\n  responseId?: string\n  source?: string\n  stack?: Array<any>\n  userId?: string\n}\n\nexport interface DdbAggregatedEntity {\n  created?: string | Date | number\n  modified?: string | Date | number\n}\n\nexport interface Account {\n  accountId?: string\n  assetCount?: number\n  collectTaxInfo?: boolean\n  companyName?: string\n  contactCount?: number\n  created?: string | Date | number\n  dynamicQrCodeCount?: number\n  lastScanId?: string\n  modified?: string | Date | number\n  needsPaymentUpdate?: boolean\n  projectCount?: number\n  scanCount?: number\n  staticQrCodeCount?: number\n  status?: AccountStatus\n  stripeCustomerId?: string\n}\n\nexport interface AccountInvitation {\n  accountId?: string\n  companyName?: string\n  created?: string | Date | number\n  email?: string\n  expiresAt?: string | Date | number\n  firstName?: string\n  invitationId?: string\n  lastName?: string\n  modified?: string | Date | number\n  sendersFirstName?: string\n  sendersLastName?: string\n  sendersUserId?: string\n  userRole?: AccountUserRole\n}\n\nexport interface AccountResponse extends Account {\n  accountId?: string\n  assetCount?: number\n  collectTaxInfo?: boolean\n  companyName?: string\n  contactCount?: number\n  created?: string | Date | number\n  currentPeriod?: PricePlanPeriod\n  dynamicQrCodeCount?: number\n  lastScanId?: string\n  modified?: string | Date | number\n  needsPaymentUpdate?: boolean\n  pricePlan?: PricePlan\n  projectCount?: number\n  scanCount?: number\n  staticQrCodeCount?: number\n  status?: AccountStatus\n  stripeCustomerId?: string\n}\n\nexport interface AccountUser {\n  accountId?: string\n  created?: string | Date | number\n  modified?: string | Date | number\n  userId?: string\n  userRole?: AccountUserRole\n}\n\nexport interface ApiKey {\n  apiKeyId?: string\n  created?: string | Date | number\n  description?: string\n  key?: string\n  modified?: string | Date | number\n  name?: string\n}\n\nexport interface Asset {\n  assetId?: string\n  created?: string | Date | number\n  customAttributes?: NestedKeyValueObject\n  description?: string\n  groupId?: string\n  modified?: string | Date | number\n  name?: string\n  projectId?: string\n  scanCount?: number\n}\n\nexport interface AssetContact {\n  assetId?: string\n  contactId?: string\n  created?: string | Date | number\n  modified?: string | Date | number\n  type?: string\n}\n\nexport interface AssetGroupAsset {\n  assetId?: string\n  created?: string | Date | number\n  groupId?: string\n  modified?: string | Date | number\n}\n\nexport interface Contact {\n  cellPhone?: string\n  consent?: ContactConsent[]\n  contactId?: string\n  created?: string | Date | number\n  customAttributes?: NestedKeyValueObject\n  emailAddress?: string\n  firstName?: string\n  lastName?: string\n  mailingAddress?: ContactMailingAddress\n  middleName?: string\n  modified?: string | Date | number\n  nickname?: string\n}\n\nexport interface ContactConsent {\n  consented?: boolean\n  consentedAt?: string | Date | number\n  url?: string\n}\n\nexport interface ContactEmail {\n  contactId?: string\n  created?: string | Date | number\n  email?: string\n  modified?: string | Date | number\n  projectId?: string\n}\n\nexport interface ContactMailingAddress {\n  address?: string\n  city?: string\n  country?: string\n  postalOrZip?: string\n  provinceOrState?: string\n}\n\nexport interface ContactPhone {\n  contactId?: string\n  created?: string | Date | number\n  modified?: string | Date | number\n  phone?: string\n  projectId?: string\n}\n\nexport interface EmailInvitation {\n  accountId?: string\n  created?: string | Date | number\n  email?: string\n  expiresAt?: string | Date | number\n  invitationId?: string\n  modified?: string | Date | number\n}\n\nexport interface NestedAsset {\n  customAttributes?: NestedKeyValueObject\n  description?: string\n  groupId?: string\n  name?: string\n  qrCodes?: NestedQrCode[]\n}\n\nexport interface NestedContact {\n  asset?: NestedAsset\n  cellPhone?: string\n  consent?: ContactConsent[]\n  customAttributes?: NestedKeyValueObject\n  emailAddress?: string\n  firstName?: string\n  lastName?: string\n  mailingAddress?: ContactMailingAddress\n  middleName?: string\n  nickname?: string\n  type?: string\n}\n\nexport interface NestedQrCode {\n  dynamicRedirectType?: QrCodeDynamicRedirectType\n  intent?: string\n  intentState?: NestedKeyValueObject\n  intentType?: QrCodeIntentType\n  locatorKeyType?: QrCodeLocatorKeyType\n  status?: QrCodeStatus\n  validFrom?: string | Date | number\n  validTo?: string | Date | number\n}\n\nexport interface PricePlan {\n  additionalScanCost?: number\n  annualPrice?: number\n  created?: string | Date | number\n  dataExport?: boolean\n  modified?: string | Date | number\n  monthlyPrice?: number\n  monthlyScans?: number\n  name?: string\n  paymentPeriod?: string\n  pricePlanId?: string\n  projects?: number\n  qrCodes?: number\n  reporting?: PricePlanReporting\n  roleBasedManagement?: boolean\n  stripeCustomerId?: string\n  stripePlanId?: string\n  stripeSubscriptionId?: string\n  subscriptionItemId?: string\n  users?: number\n}\n\nexport interface PricePlanPeriod {\n  additionalScans?: number\n  additionalScansCost?: number\n  created?: string | Date | number\n  modified?: string | Date | number\n  period?: string | Date | number\n  periodEndDate?: string | Date | number\n  pricePlanId?: string\n  projects?: number\n  projectsCreated?: number\n  projectsRemaining?: number\n  qrCodes?: number\n  qrCodesCreated?: number\n  qrCodesRemaining?: number\n  qrScansRemaining?: number\n  scansUsed?: number\n  users?: number\n  usersCreated?: number\n  usersRemaining?: number\n}\n\nexport interface Project {\n  assetCount?: number\n  companyName?: string\n  contactCount?: number\n  created?: string | Date | number\n  description?: string\n  dynamicQrCodeCount?: number\n  lastScanId?: string\n  modified?: string | Date | number\n  name?: string\n  projectId?: string\n  scanCount?: number\n  staticQrCodeCount?: number\n  status?: ProjectStatus\n}\n\nexport interface ProjectAccount {\n  accountId?: string\n  created?: string | Date | number\n  modified?: string | Date | number\n  projectId?: string\n}\n\nexport interface ProjectContact {\n  contactId?: string\n  created?: string | Date | number\n  modified?: string | Date | number\n  projectId?: string\n}\n\nexport interface QrCode {\n  assetId?: string\n  created?: string | Date | number\n  dynamicRedirectType?: QrCodeDynamicRedirectType\n  image?: QrCodeImage\n  intent?: string\n  intentState?: NestedKeyValueObject\n  intentType?: QrCodeIntentType\n  locatorKey?: string\n  locatorKeyType?: QrCodeLocatorKeyType\n  modified?: string | Date | number\n  qrCodeId?: string\n  scanCount?: number\n  status?: QrCodeStatus\n  validFrom?: string | Date | number\n  validTo?: string | Date | number\n}\n\nexport interface QrCodeImage {\n  data?: string\n  options?: QrCodeOptions\n}\n\nexport interface QrCodeLocator {\n  created?: string | Date | number\n  locatorKey?: string\n  modified?: string | Date | number\n  qrCodeId?: string\n}\n\nexport interface QrCodeOptions {\n  background?: string\n  backgroundGradientColors?: string\n  backgroundGradientRotation?: number\n  backgroundGradientType?: string\n  cornerDotColor?: string\n  cornerDotType?: string\n  cornerSquareColor?: string\n  cornerSquareType?: string\n  darkColor?: string\n  dataUrl?: boolean\n  dotType?: string\n  errorCorrectionLevel?: QrCodeErrorCorrectionLevel\n  foreground?: string\n  foregroundGradientColors?: string\n  foregroundGradientRotation?: number\n  foregroundGradientType?: string\n  format?: QrCodeType\n  image?: string\n  lightColor?: string\n  margin?: number\n  scale?: number\n  version?: number\n  width?: number\n}\n\nexport interface ResponseAsset {\n  assetId?: string\n  created?: string | Date | number\n  customAttributes?: NestedKeyValueObject\n  description?: string\n  groupId?: string\n  modified?: string | Date | number\n  name?: string\n  projectId?: string\n  qrCodes?: QrCode[]\n}\n\nexport interface ResponseContact extends Contact {\n  cellPhone?: string\n  consent?: ContactConsent[]\n  contactId?: string\n  created?: string | Date | number\n  customAttributes?: NestedKeyValueObject\n  emailAddress?: string\n  firstName?: string\n  lastName?: string\n  mailingAddress?: ContactMailingAddress\n  middleName?: string\n  modified?: string | Date | number\n  nickname?: string\n  type?: string\n}\n\nexport interface Scan {\n  assetId?: string\n  browserName?: string\n  browserVersion?: string\n  cpuArchitecture?: string\n  created?: string | Date | number\n  deviceModel?: string\n  deviceType?: string\n  deviceVendor?: string\n  engineName?: string\n  engineVersion?: string\n  ipAddress?: string\n  locationCityName?: string\n  locationCountryCode?: string\n  locationCountryName?: string\n  locationLatitude?: string\n  locationLongitude?: string\n  locationPostalCode?: string\n  locationRegionCode?: string\n  locationRegionName?: string\n  locationTimeZone?: string\n  modified?: string | Date | number\n  osName?: string\n  osVersion?: string\n  projectId?: string\n  qrCodeId?: string\n  scanId?: string\n  scanTime?: string | Date | number\n  userAgent?: string\n}\n\nexport interface ScanContact {\n  contactId?: string\n  created?: string | Date | number\n  modified?: string | Date | number\n  scanId?: string\n}\n\nexport interface Sms {\n  body?: string\n  contactId?: string\n  created?: string | Date | number\n  delivered?: boolean\n  deliveredAt?: string | Date | number\n  from?: string\n  inbound?: boolean\n  modified?: string | Date | number\n  phone?: string\n  price?: number\n  priceUnit?: string\n  projectId?: string\n  smsId?: string\n  smsTemplateName?: string\n  status?: string\n  to?: string\n}\n\nexport interface SmsTemplate {\n  body?: string\n  created?: string | Date | number\n  modified?: string | Date | number\n  projectId?: string\n  responseUrl?: string\n  smsTemplateName?: string\n  statusUrl?: string\n}\n\nexport interface User {\n  created?: string | Date | number\n  email?: string\n  firstName?: string\n  lastName?: string\n  middleName?: string\n  modified?: string | Date | number\n  phone?: string\n  userId?: string\n}\n\nexport interface UserCombined extends User {\n  created?: string | Date | number\n  email?: string\n  expiresAt?: string | Date | number\n  firstName?: string\n  invitationId?: string\n  lastName?: string\n  middleName?: string\n  modified?: string | Date | number\n  phone?: string\n  userId?: string\n  userRole?: AccountUserRole\n}\n\nexport interface ScanContactAccountIndex {\n  accountId?: string\n  assetId?: string\n  contactId?: string\n  created?: string | Date | number\n  indexedEntityName?: string\n  modified?: string | Date | number\n  scanId?: string\n}\n\nexport interface ScanContactProjectIndex {\n  assetId?: string\n  contactId?: string\n  created?: string | Date | number\n  indexedEntityName?: string\n  modified?: string | Date | number\n  projectId?: string\n  scanId?: string\n}\n\nexport interface ExportedScan extends Scan {\n  assetId?: string\n  assetName?: string\n  browserName?: string\n  browserVersion?: string\n  cpuArchitecture?: string\n  created?: string | Date | number\n  deviceModel?: string\n  deviceType?: string\n  deviceVendor?: string\n  engineName?: string\n  engineVersion?: string\n  ipAddress?: string\n  locationCityName?: string\n  locationCountryCode?: string\n  locationCountryName?: string\n  locationLatitude?: string\n  locationLongitude?: string\n  locationPostalCode?: string\n  locationRegionCode?: string\n  locationRegionName?: string\n  locationTimeZone?: string\n  modified?: string | Date | number\n  osName?: string\n  osVersion?: string\n  projectId?: string\n  qrCodeId?: string\n  scanId?: string\n  scanTime?: string | Date | number\n  userAgent?: string\n}\n\nexport interface AccountContact {\n  accountId?: string\n  contactId?: string\n  created?: string | Date | number\n  modified?: string | Date | number\n}\n\n// HANDLER INTERFACE TYPES\n\nexport interface CreateInvitationByAccountIdPathParameters {\n  accountId?: string\n}\n\nexport interface CreateInvitationByAccountIdRequestBody {\n  email?: string\n  firstName?: string\n  lastName?: string\n  userRole?: AccountUserRole\n}\n\nexport interface CreateInvitationByAccountIdResponseBody {\n  accountInvitation?: AccountInvitation\n  emailInvitation?: EmailInvitation\n}\n\nexport interface CreateProjectByAccountIdPathParameters {\n  accountId?: string\n}\n\nexport interface CreateProjectByAccountIdRequestBody {\n  companyName?: string\n  description?: string\n  name?: string\n}\n\nexport interface CreateProjectByAccountIdResponseBody {\n  accountId?: string\n  project?: Project\n}\n\nexport interface CreateUserByInvitationIdPathParameters {\n  invitationId?: string\n}\n\nexport interface CreateUserByInvitationIdResponseBody {\n  account?: Account\n  accountUser?: AccountUser\n}\n\nexport interface DeleteAccountPathParameters {\n  accountId?: string\n}\n\nexport interface DeleteInvitationPathParameters {\n  invitationId?: string\n}\n\nexport interface DeleteInvitationResponseBody {\n  accountInvitation?: AccountInvitation\n  emailInvitation?: EmailInvitation\n}\n\nexport interface DeleteUserByAccountIdPathParameters {\n  accountId?: string\n  userId?: string\n}\n\nexport interface DeleteUserByAccountIdResponseBody {\n  user?: User\n}\n\nexport interface GetAccountPathParameters {\n  accountId?: string\n}\n\nexport interface GetAccountResponseBody extends Account {\n  accountId?: string\n  assetCount?: number\n  collectTaxInfo?: boolean\n  companyName?: string\n  contactCount?: number\n  created?: string | Date | number\n  currentPeriod?: PricePlanPeriod\n  dynamicQrCodeCount?: number\n  lastScanId?: string\n  modified?: string | Date | number\n  needsPaymentUpdate?: boolean\n  pricePlan?: PricePlan\n  projectCount?: number\n  scanCount?: number\n  staticQrCodeCount?: number\n  status?: AccountStatus\n  stripeCustomerId?: string\n}\n\nexport interface GetAssetsByAccountIdPathParameters {\n  accountId?: string\n}\n\nexport interface GetAssetsByAccountIdQueryStringParameters {\n  lastKey?: string\n  limit?: number\n  name?: string\n}\n\nexport interface GetAssetsByAccountIdResponseBody {\n  accountId?: string\n  assets?: Asset[]\n  lastKey?: string\n  numberOfAssets?: number\n}\n\nexport interface GetContactsByAccountIdPathParameters {\n  accountId?: string\n}\n\nexport interface GetContactsByAccountIdQueryStringParameters {\n  assetName?: string\n  lastKey?: string\n  limit?: number\n}\n\nexport interface GetContactsByAccountIdResponseBody {\n  accountId?: string\n  contacts?: Contact[]\n  lastKey?: string\n  numberOfContacts?: number\n}\n\nexport interface GetInvitationPathParameters {\n  invitationId?: string\n}\n\nexport interface GetInvitationResponseBody {\n  accountInvitation?: AccountInvitation\n}\n\nexport interface GetPricePlanByAccountIdPathParameters {\n  accountId?: string\n}\n\nexport interface GetPricePlanByAccountIdResponseBody {\n  pricePlan?: PricePlan\n  pricePlanPeriod?: PricePlanPeriod\n}\n\nexport interface GetProjectsByAccountIdPathParameters {\n  accountId?: string\n}\n\nexport interface GetProjectsByAccountIdQueryStringParameters {\n  lastKey?: string\n  limit?: number\n  next?: string\n}\n\nexport interface GetProjectsByAccountIdResponseBody {\n  accountId?: string\n  lastKey?: string\n  next?: string\n  numberOfProjects?: number\n  projects?: Project[]\n}\n\nexport interface GetQrCodesByAccountIdPathParameters {\n  accountId?: string\n}\n\nexport interface GetQrCodesByAccountIdQueryStringParameters {\n  assetName?: string\n  lastKey?: string\n  limit?: number\n}\n\nexport interface GetQrCodesByAccountIdResponseBody {\n  accountId?: string\n  lastKey?: string\n  numberOfQrCodes?: number\n  qrCodes?: QrCode[]\n}\n\nexport interface GetScansByAccountIdPathParameters {\n  accountId?: string\n}\n\nexport interface GetScansByAccountIdQueryStringParameters {\n  assetName?: string\n  contactId?: string\n  lastKey?: string\n  limit?: number\n}\n\nexport interface GetScansByAccountIdResponseBody {\n  accountId?: string\n  lastKey?: string\n  numberOfScans?: number\n  scans?: Scan[]\n}\n\nexport interface GetUsersByAccountIdPathParameters {\n  accountId?: string\n}\n\nexport interface GetUsersByAccountIdQueryStringParameters {\n  lastKey?: string\n  limit?: number\n}\n\nexport interface GetUsersByAccountIdResponseBody {\n  accountId?: string\n  invitations?: UserCombined[]\n  lastKey?: string\n  numberOfInvitations?: number\n  numberOfUsers?: number\n  users?: UserCombined[]\n}\n\nexport interface UpdateAccountPathParameters {\n  accountId?: string\n}\n\nexport interface UpdateAccountRequestBody {\n  companyName?: string\n}\n\nexport interface UpdateAccountResponseBody extends Account {\n  accountId?: string\n  assetCount?: number\n  collectTaxInfo?: boolean\n  companyName?: string\n  contactCount?: number\n  created?: string | Date | number\n  dynamicQrCodeCount?: number\n  lastScanId?: string\n  modified?: string | Date | number\n  needsPaymentUpdate?: boolean\n  projectCount?: number\n  scanCount?: number\n  staticQrCodeCount?: number\n  status?: AccountStatus\n  stripeCustomerId?: string\n}\n\nexport interface UpdatePricePlanByAccountIdPathParameters {\n  accountId?: string\n}\n\nexport interface UpdatePricePlanByAccountIdRequestBody {\n  paymentPeriod?: PricePlanPaymentPeriod\n  pricePlanName?: PricePlanName\n}\n\nexport interface UpdatePricePlanByAccountIdResponseBody {\n  pricePlan?: PricePlan\n  pricePlanPeriod?: PricePlanPeriod\n}\n\nexport interface CreateContactByAssetIdPathParameters {\n  assetId?: string\n}\n\nexport interface CreateContactByAssetIdRequestBody {\n  cellPhone?: string\n  consent?: ContactConsent[]\n  customAttributes?: NestedKeyValueObject\n  emailAddress?: string\n  firstName?: string\n  lastName?: string\n  mailingAddress?: ContactMailingAddress\n  middleName?: string\n  nickname?: string\n  type?: string\n}\n\nexport interface CreateContactByAssetIdResponseBody {\n  asset?: Asset\n  assetContact?: AssetContact\n  assetId?: string\n  contact?: Contact\n  contactEmail?: ContactEmail\n  contactPhone?: ContactPhone\n  projectContact?: ProjectContact\n}\n\nexport interface CreateQrCodeByAssetIdPathParameters {\n  assetId?: string\n}\n\nexport interface CreateQrCodeByAssetIdRequestBody {\n  dynamicRedirectType?: QrCodeDynamicRedirectType\n  intent?: string\n  intentState?: NestedKeyValueObject\n  intentType?: QrCodeIntentType\n  locatorKeyType?: QrCodeLocatorKeyType\n  status?: QrCodeStatus\n  validFrom?: string | Date | number\n  validTo?: string | Date | number\n}\n\nexport interface CreateQrCodeByAssetIdResponseBody {\n  asset?: Asset\n  assetId?: string\n  locatorKey?: string\n  qrCode?: QrCode\n  qrCodeId?: string\n}\n\nexport interface DeleteAssetPathParameters {\n  assetId?: string\n}\n\nexport interface DeleteAssetResponseBody {\n  asset?: Asset\n}\n\nexport interface DeleteAssetGroupPathParameters {\n  groupId?: string\n}\n\nexport interface DeleteAssetGroupResponseBody {\n  deletedAssetsCount?: number\n  deletedQrCodesCount?: number\n  groupId?: string\n}\n\nexport interface GetAssetPathParameters {\n  assetId?: string\n}\n\nexport interface GetAssetResponseBody {\n  asset?: ResponseAsset\n  assetId?: string\n}\n\nexport interface GetAssetGroupPathParameters {\n  groupId?: string\n}\n\nexport interface GetAssetGroupQueryStringParameters {\n  lastKey?: string\n  limit?: number\n}\n\nexport interface GetAssetGroupResponseBody {\n  assets?: Asset[]\n  groupId?: string\n  lastKey?: string\n  numberOfAssets?: number\n}\n\nexport interface GetContactsByAssetIdPathParameters {\n  assetId?: string\n}\n\nexport interface GetContactsByAssetIdQueryStringParameters {\n  lastKey?: string\n  limit?: number\n}\n\nexport interface GetContactsByAssetIdResponseBody {\n  assetContacts?: AssetContact[]\n  assetId?: string\n  contacts?: Contact[]\n  lastKey?: string\n  numberOfContacts?: number\n}\n\nexport interface GetQrCodesByAssetIdPathParameters {\n  assetId?: string\n}\n\nexport interface GetQrCodesByAssetIdQueryStringParameters extends QrCodeOptions {\n  background?: string\n  backgroundGradientColors?: string\n  backgroundGradientRotation?: number\n  backgroundGradientType?: string\n  cornerDotColor?: string\n  cornerDotType?: string\n  cornerSquareColor?: string\n  cornerSquareType?: string\n  darkColor?: string\n  dataUrl?: boolean\n  dotType?: string\n  errorCorrectionLevel?: QrCodeErrorCorrectionLevel\n  foreground?: string\n  foregroundGradientColors?: string\n  foregroundGradientRotation?: number\n  foregroundGradientType?: string\n  format?: QrCodeType\n  image?: string\n  lastKey?: string\n  lightColor?: string\n  limit?: number\n  margin?: number\n  scale?: number\n  version?: number\n  width?: number\n}\n\nexport interface GetQrCodesByAssetIdResponseBody {\n  assetId?: string\n  lastKey?: string\n  numberOfQrCodes?: number\n  qrCodes?: QrCode[]\n}\n\nexport interface GetScansByAssetIdPathParameters {\n  assetId?: string\n}\n\nexport interface GetScansByAssetIdQueryStringParameters {\n  lastKey?: string\n  limit?: number\n}\n\nexport interface GetScansByAssetIdResponseBody {\n  assetId?: string\n  lastKey?: string\n  numberOfScans?: number\n  scans?: Scan[]\n}\n\nexport interface LinkContactToAssetPathParameters {\n  assetId?: string\n  contactId?: string\n}\n\nexport interface LinkContactToAssetRequestBody {\n  type?: string\n}\n\nexport interface LinkContactToAssetResponseBody {\n  assetContact?: AssetContact\n  projectContact?: ProjectContact\n}\n\nexport interface UnlinkContactToAssetPathParameters {\n  assetId?: string\n  contactId?: string\n}\n\nexport interface UpdateAssetPathParameters {\n  assetId?: string\n}\n\nexport interface UpdateAssetRequestBody {\n  customAttributes?: NestedKeyValueObject\n  description?: string\n  groupId?: string\n}\n\nexport interface UpdateAssetResponseBody {\n  asset?: Asset\n  assetId?: string\n}\n\nexport interface GetAccessTokenRequestBody {\n  accessKey?: string\n  accessSecret?: string\n}\n\nexport interface GetAccessTokenResponseBody {\n  error?: string\n  token?: string\n}\n\nexport interface DeleteContactPathParameters {\n  contactId?: string\n}\n\nexport interface DeleteContactResponseBody {\n  contact?: Contact\n}\n\nexport interface GetContactPathParameters {\n  contactId?: string\n}\n\nexport interface GetContactResponseBody {\n  contact?: Contact\n}\n\nexport interface UpdateContactPathParameters {\n  contactId?: string\n}\n\nexport interface UpdateContactRequestBody {\n  cellPhone?: string\n  consent?: ContactConsent[]\n  customAttributes?: NestedKeyValueObject\n  emailAddress?: string\n  firstName?: string\n  lastName?: string\n  mailingAddress?: ContactMailingAddress\n  middleName?: string\n  nickname?: string\n}\n\nexport interface UpdateContactResponseBody {\n  contact?: Contact\n}\n\nexport interface GetAccountsOverviewResponseBody {\n  enterpriseCustom?: NestedKeyValueObject\n  enterprisePro?: NestedKeyValueObject\n  enterpriseStarter?: NestedKeyValueObject\n  individualPro?: NestedKeyValueObject\n  individualStarter?: NestedKeyValueObject\n  unlimited?: NestedKeyValueObject\n}\n\nexport interface GetActivityOverviewResponseBody {\n  assets?: NestedKeyValueObject\n  contacts?: NestedKeyValueObject\n  logins?: NestedKeyValueObject\n  qrCodes?: NestedKeyValueObject\n  scans?: NestedKeyValueObject\n}\n\nexport interface GetUsersOverviewResponseBody {\n  active?: NestedKeyValueObject\n  pending?: NestedKeyValueObject\n  total?: NestedKeyValueObject\n}\n\nexport interface CreateAssetByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface CreateAssetByProjectIdRequestBody extends NestedAsset {\n  customAttributes?: NestedKeyValueObject\n  description?: string\n  groupId?: string\n  name?: string\n  qrCodes?: NestedQrCode[]\n}\n\nexport interface CreateAssetByProjectIdResponseBody {\n  asset?: ResponseAsset\n  projectId?: string\n}\n\nexport interface CreateAssetGroupByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface CreateAssetGroupByProjectIdRequestBody {\n  assets?: NestedAsset[]\n}\n\nexport interface CreateAssetGroupByProjectIdResponseBody {\n  assets?: ResponseAsset[]\n  groupId?: string\n  numberOfAssets?: number\n  projectId?: string\n}\n\nexport interface CreateAssetsByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface CreateAssetsByProjectIdRequestBody {\n  assets?: NestedAsset[]\n}\n\nexport interface CreateAssetsByProjectIdResponseBody {\n  assets?: ResponseAsset[]\n  numberOfAssets?: number\n  projectId?: string\n}\n\nexport interface CreateContactByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface CreateContactByProjectIdRequestBody {\n  asset?: NestedAsset\n  cellPhone?: string\n  consent?: ContactConsent[]\n  customAttributes?: NestedKeyValueObject\n  emailAddress?: string\n  firstName?: string\n  lastName?: string\n  mailingAddress?: ContactMailingAddress\n  middleName?: string\n  nickname?: string\n  type?: string\n}\n\nexport interface CreateContactByProjectIdResponseBody {\n  asset?: Asset\n  assetContact?: AssetContact\n  contact?: Contact\n  contactEmail?: ContactEmail\n  contactPhone?: ContactPhone\n  projectContact?: ProjectContact\n  projectId?: string\n  qrCodes?: QrCode[]\n}\n\nexport interface CreateContactsByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface CreateContactsByProjectIdRequestBody {\n  contacts?: NestedContact[]\n}\n\nexport interface CreateContactsByProjectIdResponseBody {\n  contacts?: Array<any>\n  numberOfContacts?: number\n  projectId?: string\n}\n\nexport interface CreateQrCodeByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface CreateQrCodeByProjectIdRequestBody {\n  intent?: string\n  intentState?: NestedKeyValueObject\n  status?: QrCodeStatus\n}\n\nexport interface CreateQrCodeByProjectIdResponseBody {\n  locatorKey?: string\n  projectId?: string\n  qrCode?: QrCode\n  qrCodeId?: string\n}\n\nexport interface CreateSmsTemplateByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface CreateSmsTemplateByProjectIdRequestBody {\n  body?: string\n  responseUrl?: string\n  smsTemplateName?: string\n  statusUrl?: string\n}\n\nexport interface CreateSmsTemplateByProjectIdResponseBody {\n  smsTemplate?: SmsTemplate\n}\n\nexport interface DeleteProjectPathParameters {\n  projectId?: string\n}\n\nexport interface DeleteProjectResponseBody {\n  project?: Project\n}\n\nexport interface DeleteSmsTemplateByProjectIdPathParameters {\n  projectId?: string\n  smsTemplateName?: string\n}\n\nexport interface DeleteSmsTemplateByProjectIdResponseBody {\n  body?: string\n  projectId?: string\n  responseUrl?: string\n  smsTemplateName?: string\n  statusUrl?: string\n}\n\nexport interface GetAssetsByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface GetAssetsByProjectIdQueryStringParameters {\n  lastKey?: string\n  limit?: number\n  name?: string\n}\n\nexport interface GetAssetsByProjectIdResponseBody {\n  assets?: Asset[]\n  lastKey?: string\n  numberOfAssets?: number\n  projectId?: string\n}\n\nexport interface GetContactsByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface GetContactsByProjectIdQueryStringParameters {\n  assetName?: string\n  email?: string\n  lastKey?: string\n  limit?: number\n  phone?: string\n}\n\nexport interface GetContactsByProjectIdResponseBody {\n  contacts?: Contact[]\n  lastKey?: string\n  numberOfContacts?: number\n  projectContacts?: ProjectContact[]\n  projectId?: string\n}\n\nexport interface GetProjectByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface GetProjectByProjectIdResponseBody {\n  project?: Project\n}\n\nexport interface GetQrCodesByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface GetQrCodesByProjectIdQueryStringParameters {\n  assetName?: string\n  lastKey?: string\n  limit?: number\n}\n\nexport interface GetQrCodesByProjectIdResponseBody {\n  lastKey?: string\n  numberOfQrCodes?: number\n  projectId?: string\n  qrCodes?: QrCode[]\n}\n\nexport interface GetScansByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface GetScansByProjectIdQueryStringParameters {\n  assetName?: string\n  contactId?: string\n  lastKey?: string\n  limit?: number\n}\n\nexport interface GetScansByProjectIdResponseBody {\n  lastKey?: string\n  numberOfScans?: number\n  projectId?: string\n  scans?: Scan[]\n}\n\nexport interface GetSmsTemplateByProjectIdPathParameters {\n  projectId?: string\n  smsTemplateName?: string\n}\n\nexport interface GetSmsTemplateByProjectIdResponseBody {\n  body?: string\n  projectId?: string\n  responseUrl?: string\n  smsTemplateName?: string\n  statusUrl?: string\n}\n\nexport interface GetSmsTemplatesByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface GetSmsTemplatesByProjectIdQueryStringParameters {\n  lastKey?: string\n  limit?: number\n}\n\nexport interface GetSmsTemplatesByProjectIdResponseBody {\n  lastKey?: string\n  numberOfSmsTemplates?: number\n  projectId?: string\n  smsTemplates?: SmsTemplate[]\n}\n\nexport interface UpdateProjectByProjectIdPathParameters {\n  projectId?: string\n}\n\nexport interface UpdateProjectByProjectIdRequestBody {\n  companyName?: string\n  description?: string\n  name?: string\n  status?: ProjectStatus\n}\n\nexport interface UpdateProjectByProjectIdResponseBody {\n  project?: Project\n}\n\nexport interface UpdateSmsTemplatePathParameters {\n  projectId?: string\n  smsTemplateName?: string\n}\n\nexport interface UpdateSmsTemplateResponseBody {\n  body?: string\n  projectId?: string\n  responseUrl?: string\n  smsTemplateName?: string\n  statusUrl?: string\n}\n\nexport interface DeleteQrCodePathParameters {\n  qrCodeId?: string\n}\n\nexport interface DeleteQrCodeResponseBody {\n  qrCode?: QrCode\n}\n\nexport interface GetQrCodePathParameters {\n  qrCodeId?: string\n}\n\nexport interface GetQrCodeQueryStringParameters extends QrCodeOptions {\n  background?: string\n  backgroundGradientColors?: string\n  backgroundGradientRotation?: number\n  backgroundGradientType?: string\n  cornerDotColor?: string\n  cornerDotType?: string\n  cornerSquareColor?: string\n  cornerSquareType?: string\n  darkColor?: string\n  dataUrl?: boolean\n  dotType?: string\n  errorCorrectionLevel?: QrCodeErrorCorrectionLevel\n  foreground?: string\n  foregroundGradientColors?: string\n  foregroundGradientRotation?: number\n  foregroundGradientType?: string\n  format?: QrCodeType\n  image?: string\n  lightColor?: string\n  margin?: number\n  scale?: number\n  version?: number\n  width?: number\n}\n\nexport interface GetQrCodeResponseBody extends QrCode {\n  assetId?: string\n  created?: string | Date | number\n  dynamicRedirectType?: QrCodeDynamicRedirectType\n  image?: QrCodeImage\n  intent?: string\n  intentState?: NestedKeyValueObject\n  intentType?: QrCodeIntentType\n  locatorKey?: string\n  locatorKeyType?: QrCodeLocatorKeyType\n  modified?: string | Date | number\n  qrCodeId?: string\n  scanCount?: number\n  status?: QrCodeStatus\n  validFrom?: string | Date | number\n  validTo?: string | Date | number\n}\n\nexport interface UpdateQrCodePathParameters {\n  qrCodeId?: string\n}\n\nexport interface UpdateQrCodeRequestBody {\n  dynamicRedirectType?: QrCodeDynamicRedirectType\n  intent?: string\n  intentState?: NestedKeyValueObject\n  intentType?: QrCodeIntentType\n  status?: QrCodeStatus\n}\n\nexport interface UpdateQrCodeResponseBody {\n  qrCode?: QrCode\n}\n\nexport interface CreateContactByScanIdPathParameters {\n  scanId?: string\n}\n\nexport interface CreateContactByScanIdRequestBody {\n  cellPhone?: string\n  consent?: ContactConsent[]\n  customAttributes?: NestedKeyValueObject\n  emailAddress?: string\n  firstName?: string\n  lastName?: string\n  mailingAddress?: ContactMailingAddress\n  middleName?: string\n  nickname?: string\n  type?: string\n}\n\nexport interface CreateContactByScanIdResponseBody {\n  asset?: Asset\n  assetContact?: AssetContact\n  assetId?: string\n  contact?: Contact\n  contactEmail?: ContactEmail\n  contactPhone?: ContactPhone\n  projectContact?: ProjectContact\n  scanContact?: ScanContact\n}\n\nexport interface GetScanPathParameters {\n  scanId?: string\n}\n\nexport interface GetScanResponseBody {\n  asset?: Asset\n  contacts?: ResponseContact[]\n  qrCode?: QrCode\n  scan?: Scan\n}\n\nexport interface SendSmsByScanIdPathParameters {\n  scanId?: string\n}\n\nexport interface SendSmsByScanIdRequestBody {\n  customVariables?: NestedKeyValueObject\n  smsTemplateName?: string\n  to?: string\n}\n\nexport interface SendSmsByScanIdResponseBody {\n  sms?: Sms\n}\n\nexport interface GetAccountDetailsPathParameters {\n  accountId?: string\n}\n\nexport interface GetAccountDetailsResponseBody {\n  account?: NestedKeyValueObject\n  assets?: NestedKeyValueObject\n  contacts?: NestedKeyValueObject\n  projects?: NestedKeyValueObject\n  qrCodes?: NestedKeyValueObject\n  scans?: NestedKeyValueObject\n  users?: Array<any>\n}\n\nexport interface GetUserDetailsPathParameters {\n  userId?: string\n}\n\nexport interface GetUserDetailsResponseBody {\n  accounts?: Array<any>\n  logins?: Array<any>\n  user?: NestedKeyValueObject\n}\n\nexport interface SearchAccountsQueryStringParameters {\n  limit?: number\n  nextToken?: string\n  queryExecutionId?: string\n  search?: string\n}\n\nexport interface SearchAccountsResponseBody {\n  accounts?: Array<any>\n  nextToken?: string\n  queryExecutionId?: string\n}\n\nexport interface SearchUsersQueryStringParameters {\n  limit?: number\n  nextToken?: string\n  queryExecutionId?: string\n  search?: string\n}\n\nexport interface SearchUsersResponseBody {\n  nextToken?: string\n  queryExecutionId?: string\n  users?: Array<any>\n}\n\nexport interface CreateAccountByUserIdPathParameters {\n  userId?: string\n}\n\nexport interface CreateAccountByUserIdRequestBody {\n  companyName?: string\n}\n\nexport interface CreateAccountByUserIdResponseBody extends Account {\n  accountId?: string\n  assetCount?: number\n  collectTaxInfo?: boolean\n  companyName?: string\n  contactCount?: number\n  created?: string | Date | number\n  dynamicQrCodeCount?: number\n  lastScanId?: string\n  modified?: string | Date | number\n  needsPaymentUpdate?: boolean\n  projectCount?: number\n  scanCount?: number\n  staticQrCodeCount?: number\n  status?: AccountStatus\n  stripeCustomerId?: string\n}\n\nexport interface GetAccountsByUserIdPathParameters {\n  userId?: string\n}\n\nexport interface GetAccountsByUserIdQueryStringParameters {\n  lastKey?: string\n  limit?: number\n}\n\nexport interface GetAccountsByUserIdResponseBody {\n  accounts?: AccountResponse[]\n  lastKey?: string\n  next?: string\n  numberOfAccounts?: number\n  userId?: string\n}\n\nexport interface GetErrorsByUserIdPathParameters {\n  userId?: string\n}\n\nexport interface GetErrorsByUserIdQueryStringParameters {\n  lastKey?: string\n  limit?: number\n}\n\nexport interface GetErrorsByUserIdResponseBody {\n  errors?: Response[]\n  lastKey?: string\n  numberOfErrors?: number\n  userId?: string\n}\n\nexport interface GetInvitationsByUserIdPathParameters {\n  userId?: string\n}\n\nexport interface GetInvitationsByUserIdQueryStringParameters {\n  lastKey?: string\n  limit?: number\n}\n\nexport interface GetInvitationsByUserIdResponseBody {\n  accountInvitations?: AccountInvitation[]\n  lastKey?: string\n  numberOfInvitations?: number\n  userId?: string\n}\n\nexport interface GetUserPathParameters {\n  userId?: string\n}\n\nexport interface GetUserResponseBody extends User {\n  created?: string | Date | number\n  email?: string\n  firstName?: string\n  lastName?: string\n  middleName?: string\n  modified?: string | Date | number\n  phone?: string\n  userId?: string\n}\n\nexport interface UpdateUserPathParameters {\n  userId?: string\n}\n\nexport interface UpdateUserRequestBody {\n  firstName?: string\n  lastName?: string\n  middleName?: string\n}\n\nexport interface UpdateUserResponseBody extends User {\n  created?: string | Date | number\n  email?: string\n  firstName?: string\n  lastName?: string\n  middleName?: string\n  modified?: string | Date | number\n  phone?: string\n  userId?: string\n}\n\n// HANDLER REQUEST CLASSES\n\nexport class CreateInvitationByAccountIdRequest extends RequestPost<\n  CreateInvitationByAccountIdPathParameters,\n  undefined,\n  CreateInvitationByAccountIdRequestBody,\n  CreateInvitationByAccountIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'},\n    {routePart: 'invitations', sdkPartName: 'invitations'},\n  ]\n}\n\nexport class CreateProjectByAccountIdRequest extends RequestPost<\n  CreateProjectByAccountIdPathParameters,\n  undefined,\n  CreateProjectByAccountIdRequestBody,\n  CreateProjectByAccountIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'},\n    {routePart: 'projects', sdkPartName: 'projects'},\n  ]\n}\n\nexport class CreateUserByInvitationIdRequest extends RequestPost<\n  CreateUserByInvitationIdPathParameters,\n  undefined,\n  undefined,\n  CreateUserByInvitationIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'invitationId', routePart: 'invitations', sdkPartName: 'invitation'},\n    {routePart: 'users', sdkPartName: 'users'},\n  ]\n}\n\nexport class DeleteAccountRequest extends RequestDelete<DeleteAccountPathParameters, undefined, undefined> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'}]\n}\n\nexport class DeleteInvitationRequest extends RequestDelete<\n  DeleteInvitationPathParameters,\n  undefined,\n  DeleteInvitationResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'invitationId', routePart: 'invitations', sdkPartName: 'invitation'}]\n}\n\nexport class DeleteUserByAccountIdRequest extends RequestDelete<\n  DeleteUserByAccountIdPathParameters,\n  undefined,\n  DeleteUserByAccountIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'},\n    {parm: 'userId', routePart: 'users', sdkPartName: 'user'},\n  ]\n}\n\nexport class GetAccountRequest extends RequestGet<GetAccountPathParameters, undefined, GetAccountResponseBody> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'}]\n}\n\nexport class GetAssetsByAccountIdRequest extends RequestGet<\n  GetAssetsByAccountIdPathParameters,\n  GetAssetsByAccountIdQueryStringParameters,\n  GetAssetsByAccountIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'},\n    {routePart: 'assets', sdkPartName: 'assets'},\n  ]\n}\n\nexport class GetContactsByAccountIdRequest extends RequestGet<\n  GetContactsByAccountIdPathParameters,\n  GetContactsByAccountIdQueryStringParameters,\n  GetContactsByAccountIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'},\n    {routePart: 'contacts', sdkPartName: 'contacts'},\n  ]\n}\n\nexport class GetInvitationRequest extends RequestGet<\n  GetInvitationPathParameters,\n  undefined,\n  GetInvitationResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'invitationId', routePart: 'invitations', sdkPartName: 'invitation'}]\n}\n\nexport class GetPricePlanByAccountIdRequest extends RequestGet<\n  GetPricePlanByAccountIdPathParameters,\n  undefined,\n  GetPricePlanByAccountIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'},\n    {routePart: 'priceplan', sdkPartName: 'pricePlan'},\n  ]\n}\n\nexport class GetProjectsByAccountIdRequest extends RequestGet<\n  GetProjectsByAccountIdPathParameters,\n  GetProjectsByAccountIdQueryStringParameters,\n  GetProjectsByAccountIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'},\n    {routePart: 'projects', sdkPartName: 'projects'},\n  ]\n}\n\nexport class GetQrCodesByAccountIdRequest extends RequestGet<\n  GetQrCodesByAccountIdPathParameters,\n  GetQrCodesByAccountIdQueryStringParameters,\n  GetQrCodesByAccountIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'},\n    {routePart: 'qrcodes', sdkPartName: 'qrCodes'},\n  ]\n}\n\nexport class GetScansByAccountIdRequest extends RequestGet<\n  GetScansByAccountIdPathParameters,\n  GetScansByAccountIdQueryStringParameters,\n  GetScansByAccountIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'},\n    {routePart: 'scans', sdkPartName: 'scans'},\n  ]\n}\n\nexport class GetUsersByAccountIdRequest extends RequestGet<\n  GetUsersByAccountIdPathParameters,\n  GetUsersByAccountIdQueryStringParameters,\n  GetUsersByAccountIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'},\n    {routePart: 'users', sdkPartName: 'users'},\n  ]\n}\n\nexport class UpdateAccountRequest extends RequestPatch<\n  UpdateAccountPathParameters,\n  undefined,\n  UpdateAccountRequestBody,\n  UpdateAccountResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'}]\n}\n\nexport class UpdatePricePlanByAccountIdRequest extends RequestPatch<\n  UpdatePricePlanByAccountIdPathParameters,\n  undefined,\n  UpdatePricePlanByAccountIdRequestBody,\n  UpdatePricePlanByAccountIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'accountId', routePart: 'accounts', sdkPartName: 'account'},\n    {routePart: 'priceplan', sdkPartName: 'pricePlan'},\n  ]\n}\n\nexport class CreateContactByAssetIdRequest extends RequestPost<\n  CreateContactByAssetIdPathParameters,\n  undefined,\n  CreateContactByAssetIdRequestBody,\n  CreateContactByAssetIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'assetId', routePart: 'assets', sdkPartName: 'asset'},\n    {routePart: 'contacts', sdkPartName: 'contacts'},\n  ]\n}\n\nexport class CreateQrCodeByAssetIdRequest extends RequestPost<\n  CreateQrCodeByAssetIdPathParameters,\n  undefined,\n  CreateQrCodeByAssetIdRequestBody,\n  CreateQrCodeByAssetIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'assetId', routePart: 'assets', sdkPartName: 'asset'},\n    {routePart: 'qrcodes', sdkPartName: 'qrCodes'},\n  ]\n}\n\nexport class DeleteAssetRequest extends RequestDelete<DeleteAssetPathParameters, undefined, DeleteAssetResponseBody> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'assetId', routePart: 'assets', sdkPartName: 'asset'}]\n}\n\nexport class DeleteAssetGroupRequest extends RequestDelete<\n  DeleteAssetGroupPathParameters,\n  undefined,\n  DeleteAssetGroupResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'groupId', routePart: 'assetGroups', sdkPartName: 'assetGroup'}]\n}\n\nexport class GetAssetRequest extends RequestGet<GetAssetPathParameters, undefined, GetAssetResponseBody> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'assetId', routePart: 'assets', sdkPartName: 'asset'}]\n}\n\nexport class GetAssetGroupRequest extends RequestGet<\n  GetAssetGroupPathParameters,\n  GetAssetGroupQueryStringParameters,\n  GetAssetGroupResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'groupId', routePart: 'assetGroups', sdkPartName: 'assetGroup'}]\n}\n\nexport class GetContactsByAssetIdRequest extends RequestGet<\n  GetContactsByAssetIdPathParameters,\n  GetContactsByAssetIdQueryStringParameters,\n  GetContactsByAssetIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'assetId', routePart: 'assets', sdkPartName: 'asset'},\n    {routePart: 'contacts', sdkPartName: 'contacts'},\n  ]\n}\n\nexport class GetQrCodesByAssetIdRequest extends RequestGet<\n  GetQrCodesByAssetIdPathParameters,\n  GetQrCodesByAssetIdQueryStringParameters,\n  GetQrCodesByAssetIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'assetId', routePart: 'assets', sdkPartName: 'asset'},\n    {routePart: 'qrcodes', sdkPartName: 'qrCodes'},\n  ]\n}\n\nexport class GetScansByAssetIdRequest extends RequestGet<\n  GetScansByAssetIdPathParameters,\n  GetScansByAssetIdQueryStringParameters,\n  GetScansByAssetIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'assetId', routePart: 'assets', sdkPartName: 'asset'},\n    {routePart: 'scans', sdkPartName: 'scans'},\n  ]\n}\n\nexport class LinkContactToAssetRequest extends RequestPost<\n  LinkContactToAssetPathParameters,\n  undefined,\n  LinkContactToAssetRequestBody,\n  LinkContactToAssetResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'assetId', routePart: 'assets', sdkPartName: 'asset'},\n    {parm: 'contactId', routePart: 'contacts', sdkPartName: 'contact'},\n  ]\n}\n\nexport class UnlinkContactToAssetRequest extends RequestDelete<\n  UnlinkContactToAssetPathParameters,\n  undefined,\n  undefined\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'assetId', routePart: 'assets', sdkPartName: 'asset'},\n    {parm: 'contactId', routePart: 'contacts', sdkPartName: 'contact'},\n  ]\n}\n\nexport class UpdateAssetRequest extends RequestPatch<\n  UpdateAssetPathParameters,\n  undefined,\n  UpdateAssetRequestBody,\n  UpdateAssetResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'assetId', routePart: 'assets', sdkPartName: 'asset'}]\n}\n\nexport class GetAccessTokenRequest extends RequestPost<\n  undefined,\n  undefined,\n  GetAccessTokenRequestBody,\n  GetAccessTokenResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{routePart: 'auth/getAccessToken', sdkPartName: 'authGetAccessToken'}]\n}\n\nexport class DeleteContactRequest extends RequestDelete<\n  DeleteContactPathParameters,\n  undefined,\n  DeleteContactResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'contactId', routePart: 'contacts', sdkPartName: 'contact'}]\n}\n\nexport class GetContactRequest extends RequestGet<GetContactPathParameters, undefined, GetContactResponseBody> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'contactId', routePart: 'contacts', sdkPartName: 'contact'}]\n}\n\nexport class UpdateContactRequest extends RequestPatch<\n  UpdateContactPathParameters,\n  undefined,\n  UpdateContactRequestBody,\n  UpdateContactResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'contactId', routePart: 'contacts', sdkPartName: 'contact'}]\n}\n\nexport class GetAccountsOverviewRequest extends RequestGet<undefined, undefined, GetAccountsOverviewResponseBody> {\n  routeSegments?: RequestRouteSegment[] = [{routePart: 'overview/accounts', sdkPartName: 'overviewAccounts'}]\n}\n\nexport class GetActivityOverviewRequest extends RequestGet<undefined, undefined, GetActivityOverviewResponseBody> {\n  routeSegments?: RequestRouteSegment[] = [{routePart: 'overview/activity', sdkPartName: 'overviewActivity'}]\n}\n\nexport class GetUsersOverviewRequest extends RequestGet<undefined, undefined, GetUsersOverviewResponseBody> {\n  routeSegments?: RequestRouteSegment[] = [{routePart: 'overview/users', sdkPartName: 'overviewUsers'}]\n}\n\nexport class CreateAssetByProjectIdRequest extends RequestPost<\n  CreateAssetByProjectIdPathParameters,\n  undefined,\n  CreateAssetByProjectIdRequestBody,\n  CreateAssetByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {routePart: 'assets', sdkPartName: 'assets'},\n  ]\n}\n\nexport class CreateAssetGroupByProjectIdRequest extends RequestPost<\n  CreateAssetGroupByProjectIdPathParameters,\n  undefined,\n  CreateAssetGroupByProjectIdRequestBody,\n  CreateAssetGroupByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {routePart: 'assetGroups', sdkPartName: 'assetGroups'},\n  ]\n}\n\nexport class CreateAssetsByProjectIdRequest extends RequestPost<\n  CreateAssetsByProjectIdPathParameters,\n  undefined,\n  CreateAssetsByProjectIdRequestBody,\n  CreateAssetsByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {routePart: 'assets/batch', sdkPartName: 'assetsBatch'},\n  ]\n}\n\nexport class CreateContactByProjectIdRequest extends RequestPost<\n  CreateContactByProjectIdPathParameters,\n  undefined,\n  CreateContactByProjectIdRequestBody,\n  CreateContactByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {routePart: 'contacts', sdkPartName: 'contacts'},\n  ]\n}\n\nexport class CreateContactsByProjectIdRequest extends RequestPost<\n  CreateContactsByProjectIdPathParameters,\n  undefined,\n  CreateContactsByProjectIdRequestBody,\n  CreateContactsByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {routePart: 'contacts/batch', sdkPartName: 'contactsBatch'},\n  ]\n}\n\nexport class CreateQrCodeByProjectIdRequest extends RequestPost<\n  CreateQrCodeByProjectIdPathParameters,\n  undefined,\n  CreateQrCodeByProjectIdRequestBody,\n  CreateQrCodeByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {routePart: 'qrcodes', sdkPartName: 'qrCodes'},\n  ]\n}\n\nexport class CreateSmsTemplateByProjectIdRequest extends RequestPost<\n  CreateSmsTemplateByProjectIdPathParameters,\n  undefined,\n  CreateSmsTemplateByProjectIdRequestBody,\n  CreateSmsTemplateByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {routePart: 'smstemplates', sdkPartName: 'smsTemplates'},\n  ]\n}\n\nexport class DeleteProjectRequest extends RequestDelete<\n  DeleteProjectPathParameters,\n  undefined,\n  DeleteProjectResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'projectId', routePart: 'projects', sdkPartName: 'project'}]\n}\n\nexport class DeleteSmsTemplateByProjectIdRequest extends RequestDelete<\n  DeleteSmsTemplateByProjectIdPathParameters,\n  undefined,\n  DeleteSmsTemplateByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {parm: 'smsTemplateName', routePart: 'smstemplates', sdkPartName: 'smsTemplate'},\n  ]\n}\n\nexport class GetAssetsByProjectIdRequest extends RequestGet<\n  GetAssetsByProjectIdPathParameters,\n  GetAssetsByProjectIdQueryStringParameters,\n  GetAssetsByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {routePart: 'assets', sdkPartName: 'assets'},\n  ]\n}\n\nexport class GetContactsByProjectIdRequest extends RequestGet<\n  GetContactsByProjectIdPathParameters,\n  GetContactsByProjectIdQueryStringParameters,\n  GetContactsByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {routePart: 'contacts', sdkPartName: 'contacts'},\n  ]\n}\n\nexport class GetProjectByProjectIdRequest extends RequestGet<\n  GetProjectByProjectIdPathParameters,\n  undefined,\n  GetProjectByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'projectId', routePart: 'projects', sdkPartName: 'project'}]\n}\n\nexport class GetQrCodesByProjectIdRequest extends RequestGet<\n  GetQrCodesByProjectIdPathParameters,\n  GetQrCodesByProjectIdQueryStringParameters,\n  GetQrCodesByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {routePart: 'qrcodes', sdkPartName: 'qrCodes'},\n  ]\n}\n\nexport class GetScansByProjectIdRequest extends RequestGet<\n  GetScansByProjectIdPathParameters,\n  GetScansByProjectIdQueryStringParameters,\n  GetScansByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {routePart: 'scans', sdkPartName: 'scans'},\n  ]\n}\n\nexport class GetSmsTemplateByProjectIdRequest extends RequestGet<\n  GetSmsTemplateByProjectIdPathParameters,\n  undefined,\n  GetSmsTemplateByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {parm: 'smsTemplateName', routePart: 'smstemplates', sdkPartName: 'smsTemplate'},\n  ]\n}\n\nexport class GetSmsTemplatesByProjectIdRequest extends RequestGet<\n  GetSmsTemplatesByProjectIdPathParameters,\n  GetSmsTemplatesByProjectIdQueryStringParameters,\n  GetSmsTemplatesByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {routePart: 'smstemplates', sdkPartName: 'smsTemplates'},\n  ]\n}\n\nexport class UpdateProjectByProjectIdRequest extends RequestPatch<\n  UpdateProjectByProjectIdPathParameters,\n  undefined,\n  UpdateProjectByProjectIdRequestBody,\n  UpdateProjectByProjectIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'projectId', routePart: 'projects', sdkPartName: 'project'}]\n}\n\nexport class UpdateSmsTemplateRequest extends RequestPatch<\n  UpdateSmsTemplatePathParameters,\n  undefined,\n  undefined,\n  UpdateSmsTemplateResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'projectId', routePart: 'projects', sdkPartName: 'project'},\n    {parm: 'smsTemplateName', routePart: 'smstemplates', sdkPartName: 'smsTemplate'},\n  ]\n}\n\nexport class DeleteQrCodeRequest extends RequestDelete<\n  DeleteQrCodePathParameters,\n  undefined,\n  DeleteQrCodeResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'qrCodeId', routePart: 'qrcodes', sdkPartName: 'qrCode'}]\n}\n\nexport class GetQrCodeRequest extends RequestGet<\n  GetQrCodePathParameters,\n  GetQrCodeQueryStringParameters,\n  GetQrCodeResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'qrCodeId', routePart: 'qrcodes', sdkPartName: 'qrCode'}]\n}\n\nexport class UpdateQrCodeRequest extends RequestPatch<\n  UpdateQrCodePathParameters,\n  undefined,\n  UpdateQrCodeRequestBody,\n  UpdateQrCodeResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'qrCodeId', routePart: 'qrcodes', sdkPartName: 'qrCode'}]\n}\n\nexport class CreateContactByScanIdRequest extends RequestPost<\n  CreateContactByScanIdPathParameters,\n  undefined,\n  CreateContactByScanIdRequestBody,\n  CreateContactByScanIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'scanId', routePart: 'scans', sdkPartName: 'scan'},\n    {routePart: 'contacts', sdkPartName: 'contacts'},\n  ]\n}\n\nexport class GetScanRequest extends RequestGet<GetScanPathParameters, undefined, GetScanResponseBody> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'scanId', routePart: 'scans', sdkPartName: 'scan'}]\n}\n\nexport class SendSmsByScanIdRequest extends RequestPost<\n  SendSmsByScanIdPathParameters,\n  undefined,\n  SendSmsByScanIdRequestBody,\n  SendSmsByScanIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'scanId', routePart: 'scans', sdkPartName: 'scan'},\n    {routePart: 'sms', sdkPartName: 'sms'},\n  ]\n}\n\nexport class GetAccountDetailsRequest extends RequestGet<\n  GetAccountDetailsPathParameters,\n  undefined,\n  GetAccountDetailsResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'accountId', routePart: 'search/accounts', sdkPartName: 'searchAccount'},\n  ]\n}\n\nexport class GetUserDetailsRequest extends RequestGet<\n  GetUserDetailsPathParameters,\n  undefined,\n  GetUserDetailsResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'userId', routePart: 'search/users', sdkPartName: 'searchUser'}]\n}\n\nexport class SearchAccountsRequest extends RequestGet<\n  undefined,\n  SearchAccountsQueryStringParameters,\n  SearchAccountsResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{routePart: 'search/accounts', sdkPartName: 'searchAccounts'}]\n}\n\nexport class SearchUsersRequest extends RequestGet<\n  undefined,\n  SearchUsersQueryStringParameters,\n  SearchUsersResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{routePart: 'search/users', sdkPartName: 'searchUsers'}]\n}\n\nexport class CreateAccountByUserIdRequest extends RequestPost<\n  CreateAccountByUserIdPathParameters,\n  undefined,\n  CreateAccountByUserIdRequestBody,\n  CreateAccountByUserIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'userId', routePart: 'users', sdkPartName: 'user'},\n    {routePart: 'accounts', sdkPartName: 'accounts'},\n  ]\n}\n\nexport class GetAccountsByUserIdRequest extends RequestGet<\n  GetAccountsByUserIdPathParameters,\n  GetAccountsByUserIdQueryStringParameters,\n  GetAccountsByUserIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'userId', routePart: 'users', sdkPartName: 'user'},\n    {routePart: 'accounts', sdkPartName: 'accounts'},\n  ]\n}\n\nexport class GetErrorsByUserIdRequest extends RequestGet<\n  GetErrorsByUserIdPathParameters,\n  GetErrorsByUserIdQueryStringParameters,\n  GetErrorsByUserIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'userId', routePart: 'users', sdkPartName: 'user'},\n    {routePart: 'errors', sdkPartName: 'errors'},\n  ]\n}\n\nexport class GetInvitationsByUserIdRequest extends RequestGet<\n  GetInvitationsByUserIdPathParameters,\n  GetInvitationsByUserIdQueryStringParameters,\n  GetInvitationsByUserIdResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [\n    {parm: 'userId', routePart: 'users', sdkPartName: 'user'},\n    {routePart: 'invitations', sdkPartName: 'invitations'},\n  ]\n}\n\nexport class GetUserRequest extends RequestGet<GetUserPathParameters, undefined, GetUserResponseBody> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'userId', routePart: 'users', sdkPartName: 'user'}]\n}\n\nexport class UpdateUserRequest extends RequestPatch<\n  UpdateUserPathParameters,\n  undefined,\n  UpdateUserRequestBody,\n  UpdateUserResponseBody\n> {\n  routeSegments?: RequestRouteSegment[] = [{parm: 'userId', routePart: 'users', sdkPartName: 'user'}]\n}\n\n// HANDLER RESOURCE CLASSES\n\nexport class SdkAccountInvitationsResources extends Resources {\n  async create(\n    requestBody: CreateInvitationByAccountIdRequestBody,\n    options?: any,\n  ): Promise<CreateInvitationByAccountIdResponseBody> {\n    const request = new CreateInvitationByAccountIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkAccountProjectsResources extends Resources {\n  async create(\n    requestBody: CreateProjectByAccountIdRequestBody,\n    options?: any,\n  ): Promise<CreateProjectByAccountIdResponseBody> {\n    const request = new CreateProjectByAccountIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n\n  async get(\n    queryStringParameters: GetProjectsByAccountIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetProjectsByAccountIdResponseBody> {\n    const request = new GetProjectsByAccountIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkAccountUserResource extends Resource {\n  async delete(options?: any): Promise<DeleteUserByAccountIdResponseBody> {\n    const request = new DeleteUserByAccountIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n}\n\nexport class SdkAccountAssetsResources extends Resources {\n  async get(\n    queryStringParameters: GetAssetsByAccountIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetAssetsByAccountIdResponseBody> {\n    const request = new GetAssetsByAccountIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkAccountContactsResources extends Resources {\n  async get(\n    queryStringParameters: GetContactsByAccountIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetContactsByAccountIdResponseBody> {\n    const request = new GetContactsByAccountIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkAccountPricePlanResources extends Resources {\n  async get(options?: any): Promise<GetPricePlanByAccountIdResponseBody> {\n    const request = new GetPricePlanByAccountIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async update(\n    requestBody: UpdatePricePlanByAccountIdRequestBody,\n    options?: any,\n  ): Promise<UpdatePricePlanByAccountIdResponseBody> {\n    const request = new UpdatePricePlanByAccountIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkAccountQrCodesResources extends Resources {\n  async get(\n    queryStringParameters: GetQrCodesByAccountIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetQrCodesByAccountIdResponseBody> {\n    const request = new GetQrCodesByAccountIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkAccountScansResources extends Resources {\n  async get(\n    queryStringParameters: GetScansByAccountIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetScansByAccountIdResponseBody> {\n    const request = new GetScansByAccountIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkAccountUsersResources extends Resources {\n  async get(\n    queryStringParameters: GetUsersByAccountIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetUsersByAccountIdResponseBody> {\n    const request = new GetUsersByAccountIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkAccountResource extends Resource {\n  invitations(): SdkAccountInvitationsResources {\n    return new SdkAccountInvitationsResources(this.getSession(), this.pathParameters)\n  }\n\n  projects(): SdkAccountProjectsResources {\n    return new SdkAccountProjectsResources(this.getSession(), this.pathParameters)\n  }\n\n  user(userId: string): SdkAccountUserResource {\n    return new SdkAccountUserResource(this.getSession(), {...this.pathParameters, userId})\n  }\n\n  assets(): SdkAccountAssetsResources {\n    return new SdkAccountAssetsResources(this.getSession(), this.pathParameters)\n  }\n\n  contacts(): SdkAccountContactsResources {\n    return new SdkAccountContactsResources(this.getSession(), this.pathParameters)\n  }\n\n  pricePlan(): SdkAccountPricePlanResources {\n    return new SdkAccountPricePlanResources(this.getSession(), this.pathParameters)\n  }\n\n  qrCodes(): SdkAccountQrCodesResources {\n    return new SdkAccountQrCodesResources(this.getSession(), this.pathParameters)\n  }\n\n  scans(): SdkAccountScansResources {\n    return new SdkAccountScansResources(this.getSession(), this.pathParameters)\n  }\n\n  users(): SdkAccountUsersResources {\n    return new SdkAccountUsersResources(this.getSession(), this.pathParameters)\n  }\n\n  async delete(options?: any): Promise<any> {\n    const request = new DeleteAccountRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async get(options?: any): Promise<GetAccountResponseBody> {\n    const request = new GetAccountRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async update(requestBody: UpdateAccountRequestBody, options?: any): Promise<UpdateAccountResponseBody> {\n    const request = new UpdateAccountRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkInvitationUsersResources extends Resources {\n  async create(options?: any): Promise<CreateUserByInvitationIdResponseBody> {\n    const request = new CreateUserByInvitationIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n}\n\nexport class SdkInvitationResource extends Resource {\n  users(): SdkInvitationUsersResources {\n    return new SdkInvitationUsersResources(this.getSession(), this.pathParameters)\n  }\n\n  async delete(options?: any): Promise<DeleteInvitationResponseBody> {\n    const request = new DeleteInvitationRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async get(options?: any): Promise<GetInvitationResponseBody> {\n    const request = new GetInvitationRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n}\n\nexport class SdkAssetContactsResources extends Resources {\n  async create(\n    requestBody: CreateContactByAssetIdRequestBody,\n    options?: any,\n  ): Promise<CreateContactByAssetIdResponseBody> {\n    const request = new CreateContactByAssetIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n\n  async get(\n    queryStringParameters: GetContactsByAssetIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetContactsByAssetIdResponseBody> {\n    const request = new GetContactsByAssetIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkAssetQrCodesResources extends Resources {\n  async create(\n    requestBody: CreateQrCodeByAssetIdRequestBody,\n    options?: any,\n  ): Promise<CreateQrCodeByAssetIdResponseBody> {\n    const request = new CreateQrCodeByAssetIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n\n  async get(\n    queryStringParameters: GetQrCodesByAssetIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetQrCodesByAssetIdResponseBody> {\n    const request = new GetQrCodesByAssetIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkAssetScansResources extends Resources {\n  async get(\n    queryStringParameters: GetScansByAssetIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetScansByAssetIdResponseBody> {\n    const request = new GetScansByAssetIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkAssetContactResource extends Resource {\n  async link(requestBody: LinkContactToAssetRequestBody, options?: any): Promise<LinkContactToAssetResponseBody> {\n    const request = new LinkContactToAssetRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n\n  async unlink(options?: any): Promise<any> {\n    const request = new UnlinkContactToAssetRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n}\n\nexport class SdkAssetResource extends Resource {\n  contacts(): SdkAssetContactsResources {\n    return new SdkAssetContactsResources(this.getSession(), this.pathParameters)\n  }\n\n  qrCodes(): SdkAssetQrCodesResources {\n    return new SdkAssetQrCodesResources(this.getSession(), this.pathParameters)\n  }\n\n  scans(): SdkAssetScansResources {\n    return new SdkAssetScansResources(this.getSession(), this.pathParameters)\n  }\n\n  contact(contactId: string): SdkAssetContactResource {\n    return new SdkAssetContactResource(this.getSession(), {...this.pathParameters, contactId})\n  }\n\n  async delete(options?: any): Promise<DeleteAssetResponseBody> {\n    const request = new DeleteAssetRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async get(options?: any): Promise<GetAssetResponseBody> {\n    const request = new GetAssetRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async update(requestBody: UpdateAssetRequestBody, options?: any): Promise<UpdateAssetResponseBody> {\n    const request = new UpdateAssetRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkAssetGroupResource extends Resource {\n  async delete(options?: any): Promise<DeleteAssetGroupResponseBody> {\n    const request = new DeleteAssetGroupRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async get(\n    queryStringParameters: GetAssetGroupQueryStringParameters,\n    options?: any,\n  ): Promise<GetAssetGroupResponseBody> {\n    const request = new GetAssetGroupRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkAuthGetAccessTokenResources extends Resources {\n  async create(requestBody: GetAccessTokenRequestBody, options?: any): Promise<GetAccessTokenResponseBody> {\n    const request = new GetAccessTokenRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkContactResource extends Resource {\n  async delete(options?: any): Promise<DeleteContactResponseBody> {\n    const request = new DeleteContactRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async get(options?: any): Promise<GetContactResponseBody> {\n    const request = new GetContactRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async update(requestBody: UpdateContactRequestBody, options?: any): Promise<UpdateContactResponseBody> {\n    const request = new UpdateContactRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkOverviewAccountsResources extends Resources {\n  async get(options?: any): Promise<GetAccountsOverviewResponseBody> {\n    const request = new GetAccountsOverviewRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n}\n\nexport class SdkOverviewActivityResources extends Resources {\n  async get(options?: any): Promise<GetActivityOverviewResponseBody> {\n    const request = new GetActivityOverviewRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n}\n\nexport class SdkOverviewUsersResources extends Resources {\n  async get(options?: any): Promise<GetUsersOverviewResponseBody> {\n    const request = new GetUsersOverviewRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n}\n\nexport class SdkProjectAssetsResources extends Resources {\n  async create(\n    requestBody: CreateAssetByProjectIdRequestBody,\n    options?: any,\n  ): Promise<CreateAssetByProjectIdResponseBody> {\n    const request = new CreateAssetByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n\n  async get(\n    queryStringParameters: GetAssetsByProjectIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetAssetsByProjectIdResponseBody> {\n    const request = new GetAssetsByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkProjectAssetGroupsResources extends Resources {\n  async create(\n    requestBody: CreateAssetGroupByProjectIdRequestBody,\n    options?: any,\n  ): Promise<CreateAssetGroupByProjectIdResponseBody> {\n    const request = new CreateAssetGroupByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkProjectAssetsBatchResources extends Resources {\n  async create(\n    requestBody: CreateAssetsByProjectIdRequestBody,\n    options?: any,\n  ): Promise<CreateAssetsByProjectIdResponseBody> {\n    const request = new CreateAssetsByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkProjectContactsResources extends Resources {\n  async create(\n    requestBody: CreateContactByProjectIdRequestBody,\n    options?: any,\n  ): Promise<CreateContactByProjectIdResponseBody> {\n    const request = new CreateContactByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n\n  async get(\n    queryStringParameters: GetContactsByProjectIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetContactsByProjectIdResponseBody> {\n    const request = new GetContactsByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkProjectContactsBatchResources extends Resources {\n  async create(\n    requestBody: CreateContactsByProjectIdRequestBody,\n    options?: any,\n  ): Promise<CreateContactsByProjectIdResponseBody> {\n    const request = new CreateContactsByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkProjectQrCodesResources extends Resources {\n  async create(\n    requestBody: CreateQrCodeByProjectIdRequestBody,\n    options?: any,\n  ): Promise<CreateQrCodeByProjectIdResponseBody> {\n    const request = new CreateQrCodeByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n\n  async get(\n    queryStringParameters: GetQrCodesByProjectIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetQrCodesByProjectIdResponseBody> {\n    const request = new GetQrCodesByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkProjectSmsTemplatesResources extends Resources {\n  async create(\n    requestBody: CreateSmsTemplateByProjectIdRequestBody,\n    options?: any,\n  ): Promise<CreateSmsTemplateByProjectIdResponseBody> {\n    const request = new CreateSmsTemplateByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n\n  async get(\n    queryStringParameters: GetSmsTemplatesByProjectIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetSmsTemplatesByProjectIdResponseBody> {\n    const request = new GetSmsTemplatesByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkProjectSmsTemplateResource extends Resource {\n  async delete(options?: any): Promise<DeleteSmsTemplateByProjectIdResponseBody> {\n    const request = new DeleteSmsTemplateByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async get(options?: any): Promise<GetSmsTemplateByProjectIdResponseBody> {\n    const request = new GetSmsTemplateByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async update(options?: any): Promise<UpdateSmsTemplateResponseBody> {\n    const request = new UpdateSmsTemplateRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n}\n\nexport class SdkProjectScansResources extends Resources {\n  async get(\n    queryStringParameters: GetScansByProjectIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetScansByProjectIdResponseBody> {\n    const request = new GetScansByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkProjectResource extends Resource {\n  assets(): SdkProjectAssetsResources {\n    return new SdkProjectAssetsResources(this.getSession(), this.pathParameters)\n  }\n\n  assetGroups(): SdkProjectAssetGroupsResources {\n    return new SdkProjectAssetGroupsResources(this.getSession(), this.pathParameters)\n  }\n\n  assetsBatch(): SdkProjectAssetsBatchResources {\n    return new SdkProjectAssetsBatchResources(this.getSession(), this.pathParameters)\n  }\n\n  contacts(): SdkProjectContactsResources {\n    return new SdkProjectContactsResources(this.getSession(), this.pathParameters)\n  }\n\n  contactsBatch(): SdkProjectContactsBatchResources {\n    return new SdkProjectContactsBatchResources(this.getSession(), this.pathParameters)\n  }\n\n  qrCodes(): SdkProjectQrCodesResources {\n    return new SdkProjectQrCodesResources(this.getSession(), this.pathParameters)\n  }\n\n  smsTemplates(): SdkProjectSmsTemplatesResources {\n    return new SdkProjectSmsTemplatesResources(this.getSession(), this.pathParameters)\n  }\n\n  smsTemplate(smsTemplateName: string): SdkProjectSmsTemplateResource {\n    return new SdkProjectSmsTemplateResource(this.getSession(), {...this.pathParameters, smsTemplateName})\n  }\n\n  scans(): SdkProjectScansResources {\n    return new SdkProjectScansResources(this.getSession(), this.pathParameters)\n  }\n\n  async delete(options?: any): Promise<DeleteProjectResponseBody> {\n    const request = new DeleteProjectRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async get(options?: any): Promise<GetProjectByProjectIdResponseBody> {\n    const request = new GetProjectByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async update(\n    requestBody: UpdateProjectByProjectIdRequestBody,\n    options?: any,\n  ): Promise<UpdateProjectByProjectIdResponseBody> {\n    const request = new UpdateProjectByProjectIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkQrCodeResource extends Resource {\n  async delete(options?: any): Promise<DeleteQrCodeResponseBody> {\n    const request = new DeleteQrCodeRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async get(queryStringParameters: GetQrCodeQueryStringParameters, options?: any): Promise<GetQrCodeResponseBody> {\n    const request = new GetQrCodeRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n\n  async update(requestBody: UpdateQrCodeRequestBody, options?: any): Promise<UpdateQrCodeResponseBody> {\n    const request = new UpdateQrCodeRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkScanContactsResources extends Resources {\n  async create(\n    requestBody: CreateContactByScanIdRequestBody,\n    options?: any,\n  ): Promise<CreateContactByScanIdResponseBody> {\n    const request = new CreateContactByScanIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkScanSmsResources extends Resources {\n  async send(requestBody: SendSmsByScanIdRequestBody, options?: any): Promise<SendSmsByScanIdResponseBody> {\n    const request = new SendSmsByScanIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkScanResource extends Resource {\n  contacts(): SdkScanContactsResources {\n    return new SdkScanContactsResources(this.getSession(), this.pathParameters)\n  }\n\n  sms(): SdkScanSmsResources {\n    return new SdkScanSmsResources(this.getSession(), this.pathParameters)\n  }\n\n  async get(options?: any): Promise<GetScanResponseBody> {\n    const request = new GetScanRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n}\n\nexport class SdkSearchAccountResource extends Resource {\n  async get(options?: any): Promise<GetAccountDetailsResponseBody> {\n    const request = new GetAccountDetailsRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n}\n\nexport class SdkSearchUserResource extends Resource {\n  async get(options?: any): Promise<GetUserDetailsResponseBody> {\n    const request = new GetUserDetailsRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n}\n\nexport class SdkSearchAccountsResources extends Resources {\n  async get(\n    queryStringParameters: SearchAccountsQueryStringParameters,\n    options?: any,\n  ): Promise<SearchAccountsResponseBody> {\n    const request = new SearchAccountsRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkSearchUsersResources extends Resources {\n  async get(queryStringParameters: SearchUsersQueryStringParameters, options?: any): Promise<SearchUsersResponseBody> {\n    const request = new SearchUsersRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkUserAccountsResources extends Resources {\n  async create(\n    requestBody: CreateAccountByUserIdRequestBody,\n    options?: any,\n  ): Promise<CreateAccountByUserIdResponseBody> {\n    const request = new CreateAccountByUserIdRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n\n  async get(\n    queryStringParameters: GetAccountsByUserIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetAccountsByUserIdResponseBody> {\n    const request = new GetAccountsByUserIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkUserErrorsResources extends Resources {\n  async get(\n    queryStringParameters: GetErrorsByUserIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetErrorsByUserIdResponseBody> {\n    const request = new GetErrorsByUserIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkUserInvitationsResources extends Resources {\n  async get(\n    queryStringParameters: GetInvitationsByUserIdQueryStringParameters,\n    options?: any,\n  ): Promise<GetInvitationsByUserIdResponseBody> {\n    const request = new GetInvitationsByUserIdRequest(this.session)\n    return request.go(this.pathParameters, queryStringParameters, options)\n  }\n}\n\nexport class SdkUserResource extends Resource {\n  accounts(): SdkUserAccountsResources {\n    return new SdkUserAccountsResources(this.getSession(), this.pathParameters)\n  }\n\n  errors(): SdkUserErrorsResources {\n    return new SdkUserErrorsResources(this.getSession(), this.pathParameters)\n  }\n\n  invitations(): SdkUserInvitationsResources {\n    return new SdkUserInvitationsResources(this.getSession(), this.pathParameters)\n  }\n\n  async get(options?: any): Promise<GetUserResponseBody> {\n    const request = new GetUserRequest(this.session)\n    return request.go(this.pathParameters, undefined, options)\n  }\n\n  async update(requestBody: UpdateUserRequestBody, options?: any): Promise<UpdateUserResponseBody> {\n    const request = new UpdateUserRequest(this.session)\n    return request.go(this.pathParameters, undefined, requestBody, options)\n  }\n}\n\nexport class SdkResources extends Resources {\n  account(accountId: string): SdkAccountResource {\n    return new SdkAccountResource(this.getSession(), {...this.pathParameters, accountId})\n  }\n\n  invitation(invitationId: string): SdkInvitationResource {\n    return new SdkInvitationResource(this.getSession(), {...this.pathParameters, invitationId})\n  }\n\n  asset(assetId: string): SdkAssetResource {\n    return new SdkAssetResource(this.getSession(), {...this.pathParameters, assetId})\n  }\n\n  assetGroup(groupId: string): SdkAssetGroupResource {\n    return new SdkAssetGroupResource(this.getSession(), {...this.pathParameters, groupId})\n  }\n\n  authGetAccessToken(): SdkAuthGetAccessTokenResources {\n    return new SdkAuthGetAccessTokenResources(this.getSession(), this.pathParameters)\n  }\n\n  contact(contactId: string): SdkContactResource {\n    return new SdkContactResource(this.getSession(), {...this.pathParameters, contactId})\n  }\n\n  overviewAccounts(): SdkOverviewAccountsResources {\n    return new SdkOverviewAccountsResources(this.getSession(), this.pathParameters)\n  }\n\n  overviewActivity(): SdkOverviewActivityResources {\n    return new SdkOverviewActivityResources(this.getSession(), this.pathParameters)\n  }\n\n  overviewUsers(): SdkOverviewUsersResources {\n    return new SdkOverviewUsersResources(this.getSession(), this.pathParameters)\n  }\n\n  project(projectId: string): SdkProjectResource {\n    return new SdkProjectResource(this.getSession(), {...this.pathParameters, projectId})\n  }\n\n  qrCode(qrCodeId: string): SdkQrCodeResource {\n    return new SdkQrCodeResource(this.getSession(), {...this.pathParameters, qrCodeId})\n  }\n\n  scan(scanId: string): SdkScanResource {\n    return new SdkScanResource(this.getSession(), {...this.pathParameters, scanId})\n  }\n\n  searchAccount(accountId: string): SdkSearchAccountResource {\n    return new SdkSearchAccountResource(this.getSession(), {...this.pathParameters, accountId})\n  }\n\n  searchUser(userId: string): SdkSearchUserResource {\n    return new SdkSearchUserResource(this.getSession(), {...this.pathParameters, userId})\n  }\n\n  searchAccounts(): SdkSearchAccountsResources {\n    return new SdkSearchAccountsResources(this.getSession(), this.pathParameters)\n  }\n\n  searchUsers(): SdkSearchUsersResources {\n    return new SdkSearchUsersResources(this.getSession(), this.pathParameters)\n  }\n\n  user(userId: string): SdkUserResource {\n    return new SdkUserResource(this.getSession(), {...this.pathParameters, userId})\n  }\n}\n","import {CognitoUser, AuthenticationDetails, CognitoUserSession} from 'amazon-cognito-identity-js'\n\nexport interface AuthenticateResponse {\n  session?: CognitoUserSession\n  challengeName?: String\n  challengeParameters?: Object\n}\n\nexport class CognitoUserAsync extends CognitoUser {\n  async authenticateUser(authenticationDetails: AuthenticationDetails) {\n    return new Promise<AuthenticateResponse>((resolve, reject) => {\n      super.authenticateUser(authenticationDetails, {\n        onSuccess: (session: CognitoUserSession) => resolve({session}),\n        onFailure: (err: Error) => reject(err),\n        mfaRequired: (challengeName: String, challengeParameters: Object) =>\n          resolve({\n            challengeName,\n            challengeParameters,\n          }),\n        selectMFAType: (challengeName: String, challengeParameters: Object) =>\n          resolve({\n            challengeName,\n            challengeParameters,\n          }),\n        mfaSetup: (challengeName: String, challengeParameters: Object) =>\n          resolve({\n            challengeName,\n            challengeParameters,\n          }),\n        totpRequired: (challengeName: String, challengeParameters: Object) =>\n          resolve({\n            challengeName,\n            challengeParameters,\n          }),\n        customChallenge: (challengeParameters: Object) => resolve({challengeParameters}),\n      })\n    })\n  }\n\n  async getSession() {\n    return new Promise<CognitoUserSession>((resolve, reject) => {\n      super.getSession((err: any, session: CognitoUserSession) => {\n        if (err) return reject(err)\n        return resolve(session)\n      })\n    })\n  }\n}\n","import {CognitoUserPool, CognitoUserAttribute, ISignUpResult} from 'amazon-cognito-identity-js'\nimport {IAuthStorage} from './auth-storage'\n\nexport class CognitoUserPoolAsync extends CognitoUserPool {\n  getStorage(): IAuthStorage {\n    return (this as any).storage\n  }\n\n  getClientId(): string {\n    return (this as any).clientId\n  }\n\n  async signUp(\n    username: string,\n    password: string,\n    userAttributes: CognitoUserAttribute[],\n    validationData: CognitoUserAttribute[],\n  ) {\n    return new Promise<ISignUpResult>((resolve, reject) => {\n      super.signUp(username, password, userAttributes, validationData, (err?: Error, result?: ISignUpResult) => {\n        if (err) return reject(err)\n        return resolve(result!)\n      })\n    })\n  }\n}\n","import {AuthenticationDetails, CognitoUserAttribute} from 'amazon-cognito-identity-js'\nimport {CognitoUserAsync} from './cognito-user-async'\nimport {CognitoUserPoolAsync} from './cognito-user-pool-async'\nimport {IAuthStorage} from './auth-storage'\n\nexport class UserPool {\n  userPool: CognitoUserPoolAsync\n\n  constructor(userPoolId: string, clientId: string, storage?: IAuthStorage) {\n    this.userPool = new CognitoUserPoolAsync({\n      UserPoolId: userPoolId,\n      ClientId: clientId,\n      Storage: storage,\n    })\n  }\n\n  getCognitoUserPool(): CognitoUserPoolAsync {\n    return this.userPool\n  }\n\n  getStorage(): IAuthStorage {\n    return this.userPool.getStorage()\n  }\n\n  getUser(key: string): CognitoUserAsync | null {\n    if (key) {\n      const username = this.userPool.getStorage().getItem(`keyToUsername.${Buffer.from(key).toString('base64')}`)\n      if (username) {\n        return new CognitoUserAsync({\n          Username: username,\n          Pool: this.userPool,\n          Storage: this.userPool.getStorage(),\n        })\n      }\n      return null\n    }\n    const lastAuthUser = this.userPool\n      .getStorage()\n      .getItem(`CognitoIdentityServiceProvider.${this.userPool.getClientId()}.LastAuthUser`)\n    if (lastAuthUser) {\n      return new CognitoUserAsync({\n        Username: lastAuthUser,\n        Pool: this.userPool,\n        Storage: this.userPool.getStorage(),\n      })\n    }\n    return null\n  }\n\n  async authenticate(key: string, secret: string) {\n    const cognitoUser = new CognitoUserAsync({\n      Username: key,\n      Pool: this.userPool,\n      Storage: this.userPool.getStorage(),\n    })\n    const authenticationDetails = new AuthenticationDetails({\n      Username: key,\n      Password: secret,\n    })\n    return cognitoUser.authenticateUser(authenticationDetails).then((response) => {\n      if (response.session) {\n        const username = cognitoUser.getUsername()\n        this.userPool.getStorage().setItem(`keyToUsername.${Buffer.from(key).toString('base64')}`, username)\n        return cognitoUser\n      }\n      return null\n    })\n  }\n\n  async signUp(email: string, password: string, attributes: any) {\n    const attributeList: CognitoUserAttribute[] = []\n    attributeList.push(new CognitoUserAttribute({Name: 'given_name', Value: attributes.givenName}))\n    attributeList.push(new CognitoUserAttribute({Name: 'middle_name', Value: attributes.middleName}))\n    attributeList.push(new CognitoUserAttribute({Name: 'family_name', Value: attributes.familyName}))\n    attributeList.push(new CognitoUserAttribute({Name: 'phone_number', Value: attributes.phoneNumber}))\n    attributeList.push(new CognitoUserAttribute({Name: 'email', Value: email}))\n    return this.userPool.signUp(email, password, attributeList, [])\n  }\n}\n","import moment from 'moment'\nimport axios, {AxiosInstance} from 'axios'\nimport {CognitoUserSession} from 'amazon-cognito-identity-js'\nimport {CognitoUserAsync} from './auth/cognito-user-async'\nimport {SdkResources, QrCode} from './sdk'\nimport {ICloudConfig} from './cloud-config'\nimport {IConfig} from './config'\nimport {IOpenscreenSession} from './openscreen-session'\nimport {UserPool} from './auth/user-pool'\nimport {promises as fs} from 'fs'\n\nconst ProdConfigurationPath = 'prod-aNCxEnLyMSsR8sso'\n\nasync function getCloudConfig(pathToConfig: string): Promise<ICloudConfig> {\n  const thisAxios = axios.create({\n    baseURL: 'https://config.openscreen.com',\n    timeout: 25000,\n    responseType: 'json',\n    maxContentLength: 10 * 1024,\n    maxBodyLength: 10 * 1024,\n    maxRedirects: 1,\n    decompress: true,\n  })\n  const response = await thisAxios.get(`${pathToConfig}.json`).catch((err: {message: any}) => {\n    throw new Error(`Openscreen: unable to load cloud configuration '${pathToConfig}': ${err.message}`)\n  })\n  const {data} = response\n  if (pathToConfig.startsWith('web-')) {\n    return {\n      region: data.region,\n      userPoolId: data.poolId,\n      userClientId: data.clientId,\n      apiPoolId: '',\n      apiClientId: '',\n      endpoint: data.endpoint,\n      axios: data.axios,\n    }\n  }\n  if (pathToConfig.startsWith('api-')) {\n    return {\n      region: data.region,\n      userPoolId: '',\n      userClientId: '',\n      apiPoolId: data.poolId,\n      apiClientId: data.clientId,\n      endpoint: data.endpoint,\n      axios: data.axios,\n    }\n  }\n  return data as ICloudConfig\n}\n\nclass NullSession implements IOpenscreenSession {\n  public debugConfig = false\n  public debugAuth = false\n  public debugRequest = false\n  public debugResponse = false\n  public debugError = false\n  public debugQuery = false\n  public debugOptions = false\n  getConfig(): IConfig {\n    throw Error('no session')\n  }\n\n  getCloudConfig(): Promise<ICloudConfig> {\n    throw Error('no session')\n  }\n\n  getActiveUser(): Promise<CognitoUserAsync> {\n    throw Error('no session')\n  }\n\n  getActiveSession(): Promise<CognitoUserSession> {\n    throw Error('no session')\n  }\n\n  getAxios(): Promise<AxiosInstance> {\n    throw Error('no session')\n  }\n}\n\nexport class Openscreen extends SdkResources implements IOpenscreenSession {\n  protected _config?: IConfig\n  protected cloudConfigName?: string\n  protected cloudConfig?: Promise<ICloudConfig>\n  protected userPool?: UserPool\n  protected userId?: string\n  protected usingApiKey: boolean = false\n  protected isAdministrator?: boolean\n  protected activeUser?: Promise<CognitoUserAsync>\n  protected axios?: AxiosInstance\n  public debugConfig: boolean = false\n  public debugAuth: boolean = false\n  public debugRequest: boolean = false\n  public debugResponse: boolean = false\n  public debugError: boolean = false\n  public debugQuery: boolean = false\n  public debugOptions: boolean = false\n\n  constructor() {\n    super(new NullSession(), {})\n    let {OS_DEBUG} = process.env\n    if (OS_DEBUG) {\n      console.log(`OS_DEBUG=${OS_DEBUG}`)\n      OS_DEBUG = OS_DEBUG.toLowerCase()\n      let debug\n      switch (OS_DEBUG) {\n        case 'all':\n          this.debugConfig = true\n          this.debugAuth = true\n          this.debugRequest = true\n          this.debugResponse = true\n          this.debugError = true\n          this.debugQuery = true\n          this.debugOptions = true\n          break\n        case 'none':\n        case 'off':\n        case 'false':\n        case '':\n          this.debugConfig = false\n          this.debugAuth = false\n          this.debugRequest = false\n          this.debugResponse = false\n          this.debugError = false\n          this.debugQuery = false\n          this.debugOptions = false\n          break\n        default:\n          debug = OS_DEBUG.split(',')\n          this.debugConfig = debug.includes('config')\n          this.debugAuth = debug.includes('auth')\n          this.debugRequest = debug.includes('request')\n          this.debugResponse = debug.includes('response')\n          this.debugError = debug.includes('error')\n          this.debugQuery = debug.includes('query')\n          this.debugOptions = debug.includes('options')\n          if (\n            !(\n              this.debugConfig ||\n              this.debugAuth ||\n              this.debugRequest ||\n              this.debugResponse ||\n              this.debugError ||\n              this.debugQuery ||\n              this.debugOptions\n            )\n          ) {\n            console.warn(`Openscreen: OS_DEBUG environment var has invalid value: '${process.env.OS_DEBUG}'`)\n          }\n          break\n      }\n    }\n  }\n\n  getSession() {\n    return this\n  }\n\n  config(config: IConfig): Openscreen {\n    if (this._config) {\n      throw Error('Openscreen: client is already configured')\n    }\n    if (config.key) {\n      if (!config.secret) {\n        throw Error('Openscreen: invalid config, secret is missing')\n      }\n      if (config.email || config.password) {\n        throw Error('Openscreen: invalid config, use either API key and secret, or email and password, but not both')\n      }\n      this.usingApiKey = true\n    } else if (config.email) {\n      if (!config.password) {\n        throw Error('Openscreen: invalid config, password is missing')\n      }\n      if (config.key || config.secret) {\n        throw Error('Openscreen: invalid config, use either API key and secret, or email and password, but not both')\n      }\n    } else {\n      throw Error('Openscreen: invalid config, provide API key and secret, or email and password')\n    }\n    if (typeof config.environment === 'string') {\n      this.cloudConfigName = config.environment\n    } else if (typeof config.environment === 'object') {\n      this.cloudConfig = Promise.resolve(config.environment)\n    } else {\n      this.cloudConfigName = ProdConfigurationPath\n    }\n    // eslint-disable-next-line no-param-reassign\n    this._config = config\n    return this\n  }\n\n  getConfig(): IConfig {\n    if (!this._config) {\n      throw Error('Openscreen: client must be configured before accessing resources')\n    }\n    return this._config\n  }\n\n  async authorize(): Promise<CognitoUserAsync> {\n    const config = this.getConfig()\n    if (this.debugConfig) {\n      const c = {...config}\n      if (c.secret) c.secret = '*'.repeat(c.secret.length)\n      if (c.password) c.password = '*'.repeat(c.password.length)\n      console.debug(`Openscreen CONFIG: ${JSON.stringify(c, null, 2)}`)\n    }\n    const cloudConfig = await this.getCloudConfig()\n    if (this.debugConfig) {\n      console.debug(`Openscreen CONFIG: (environment) ${JSON.stringify(cloudConfig, null, 2)}`)\n    }\n    let userType\n    let key\n    let secret\n    let poolId\n    let clientId\n    if (this.usingApiKey) {\n      userType = 'API key'\n      key = config.key!\n      secret = config.secret!\n      poolId = cloudConfig.apiPoolId!\n      clientId = cloudConfig.apiClientId!\n    } else {\n      userType = 'email'\n      key = config.email!\n      secret = config.password!\n      poolId = cloudConfig.userPoolId!\n      clientId = cloudConfig.userClientId!\n    }\n    this.userPool = new UserPool(poolId, clientId, config.storage)\n    let user = this.userPool!.getUser(key)\n    let session: CognitoUserSession\n    if (user) {\n      if (this.debugAuth) console.info(`Openscreen AUTH: authorized ${userType} '${key}' retrieved from cache`)\n      await user!\n        .getSession()\n        .then((s) => {\n          session = s\n        })\n        .catch((err) => {\n          if (this.debugAuth) {\n            console.info(`Openscreen AUTH: ${err}`)\n          }\n          user = null\n        })\n    }\n    if (!user) {\n      if (this.debugAuth) console.info(`Openscreen AUTH: authorizing ${userType} '${key}'`)\n      user = await this.userPool!.authenticate(key, secret)\n      session = await user!.getSession()\n    }\n    const idToken = session!.getIdToken()\n    const idInfo = idToken.payload\n    this.userId = idInfo.sub\n    const groups = idInfo['cognito:groups']\n    this.isAdministrator = groups && groups.includes('appadmin')\n    if (this.debugAuth) {\n      if (idInfo.email) {\n        const isAdmin = this.isAdministrator ? ', administrator' : ''\n        console.info(\n          `Openscreen AUTH: authorized as '${idInfo.email}' (userId: ${idInfo.sub}${isAdmin}), session expires ${moment(\n            idToken.getExpiration() * 1000,\n          ).fromNow()}, authorized ${moment(idToken.getIssuedAt() * 1000).fromNow()}`,\n        )\n      } else {\n        const isAdmin = this.isAdministrator ? ' (administrator)' : ''\n        console.info(\n          `Openscreen AUTH: authorized as userId: ${idInfo.sub}${isAdmin}, session expires ${moment(\n            idToken.getExpiration() * 1000,\n          ).fromNow()}, authorized ${moment(idToken.getIssuedAt() * 1000).fromNow()}`,\n        )\n      }\n    }\n    return user!\n  }\n\n  async getCloudConfig(): Promise<ICloudConfig> {\n    if (!this.cloudConfig) {\n      if (!this.cloudConfigName) {\n        throw Error('Openscreen: environment name missing')\n      }\n      this.cloudConfig = getCloudConfig(this.cloudConfigName)\n    }\n    return this.cloudConfig\n  }\n\n  async getActiveUser(): Promise<CognitoUserAsync> {\n    if (!this.activeUser) {\n      this.activeUser = this.authorize()\n    }\n    return this.activeUser!\n  }\n\n  async getActiveSession(): Promise<CognitoUserSession> {\n    let user = await this.getActiveUser()\n    try {\n      return await user.getSession()\n    } catch {\n      this.activeUser = this.authorize()\n      user = await this.activeUser\n      return await user.getSession()\n    }\n  }\n\n  async authorizedUserId(): Promise<string> {\n    await this.getActiveUser()\n    return this.userId || ''\n  }\n\n  async amIAdministrator(): Promise<boolean> {\n    await this.getActiveUser()\n    return this.isAdministrator === true\n  }\n\n  async getAxios(): Promise<AxiosInstance> {\n    if (this.axios) return axios\n    const cloudConfig = await this.getCloudConfig()\n    const config = cloudConfig.axios || {\n      timeout: 25000,\n      responseType: 'json',\n      maxContentLength: 1024 * 1024,\n      maxBodyLength: 1024 * 1024,\n      maxRedirects: 1,\n      decompress: true,\n    }\n    this.axios = axios.create(config)\n    return axios!\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  async saveQrImageDataToFile(qrCode: QrCode, path?: string) {\n    const image = qrCode.image\n    if (!image || !image.data || !image.options) {\n      throw new Error(`No valid image data present for QR code, qrCodeId='${qrCode.qrCodeId || ''}'`)\n    }\n    const format = qrCode.image!.options!.format!.toLowerCase()\n    if (format === 'png') {\n      let binaryData: string\n      if (qrCode.image!.options!.dataUrl) {\n        binaryData = Buffer.from(qrCode.image!.data!.replace(/^data:image\\/\\w+;base64,/, ''), 'base64').toString(\n          'binary',\n        )\n      } else {\n        binaryData = Buffer.from(qrCode.image!.data!, 'base64').toString('binary')\n      }\n      if (!path) path = `${qrCode.qrCodeId}.png`\n      await fs.writeFile(path, binaryData, 'binary')\n    } else if (format === 'svg') {\n      if (!path) path = `${qrCode.qrCodeId}.svg`\n      await fs.writeFile(path, qrCode.image!.data!)\n    } else {\n      throw Error(`QR code image data was not returned in 'png' or 'svg' format`)\n    }\n  }\n}\n"],"names":["Request","constructor","session","this","routeSegments","async","pathParameters","urlParts","getCloudConfig","endpoint","replace","forEach","segment","push","routePart","parm","value","Error","join","getActiveSession","getAccessToken","getJwtToken","debugRequest","method","url","queryParameters","body","options","console","debug","toUpperCase","JSON","stringify","debugQuery","debugOptions","debugResponse","response","data","handleAndDebugErr","err","debugError","error","_unused","RequestDelete","makeUri","headers","Authorization","getAuthorization","axios","getAxios","delete","params","RequestGet","get","RequestPatch","patch","_extends","RequestPost","post","Resources","self","getSession","Resource","id","AccountStatus","AccountUserRole","PricePlanName","PricePlanPaymentPeriod","PricePlanReporting","ProjectStatus","QrCodeDynamicRedirectType","QrCodeErrorCorrectionLevel","QrCodeIntentType","QrCodeLocatorKeyType","QrCodeStatus","QrCodeType","CreateInvitationByAccountIdRequest","sdkPartName","CreateProjectByAccountIdRequest","args","super","CreateUserByInvitationIdRequest","DeleteAccountRequest","DeleteInvitationRequest","DeleteUserByAccountIdRequest","GetAccountRequest","GetAssetsByAccountIdRequest","GetContactsByAccountIdRequest","GetInvitationRequest","GetPricePlanByAccountIdRequest","GetProjectsByAccountIdRequest","GetQrCodesByAccountIdRequest","GetScansByAccountIdRequest","GetUsersByAccountIdRequest","UpdateAccountRequest","UpdatePricePlanByAccountIdRequest","CreateContactByAssetIdRequest","CreateQrCodeByAssetIdRequest","DeleteAssetRequest","DeleteAssetGroupRequest","GetAssetRequest","GetAssetGroupRequest","GetContactsByAssetIdRequest","GetQrCodesByAssetIdRequest","GetScansByAssetIdRequest","LinkContactToAssetRequest","UnlinkContactToAssetRequest","UpdateAssetRequest","GetAccessTokenRequest","DeleteContactRequest","GetContactRequest","UpdateContactRequest","GetAccountsOverviewRequest","GetActivityOverviewRequest","GetUsersOverviewRequest","CreateAssetByProjectIdRequest","CreateAssetGroupByProjectIdRequest","CreateAssetsByProjectIdRequest","CreateContactByProjectIdRequest","CreateContactsByProjectIdRequest","CreateQrCodeByProjectIdRequest","CreateSmsTemplateByProjectIdRequest","DeleteProjectRequest","DeleteSmsTemplateByProjectIdRequest","GetAssetsByProjectIdRequest","GetContactsByProjectIdRequest","GetProjectByProjectIdRequest","GetQrCodesByProjectIdRequest","GetScansByProjectIdRequest","GetSmsTemplateByProjectIdRequest","GetSmsTemplatesByProjectIdRequest","UpdateProjectByProjectIdRequest","UpdateSmsTemplateRequest","DeleteQrCodeRequest","GetQrCodeRequest","UpdateQrCodeRequest","CreateContactByScanIdRequest","GetScanRequest","SendSmsByScanIdRequest","GetAccountDetailsRequest","GetUserDetailsRequest","SearchAccountsRequest","SearchUsersRequest","CreateAccountByUserIdRequest","GetAccountsByUserIdRequest","GetErrorsByUserIdRequest","GetInvitationsByUserIdRequest","GetUserRequest","UpdateUserRequest","SdkAccountInvitationsResources","requestBody","go","undefined","SdkAccountProjectsResources","queryStringParameters","SdkAccountUserResource","SdkAccountAssetsResources","SdkAccountContactsResources","SdkAccountPricePlanResources","SdkAccountQrCodesResources","SdkAccountScansResources","SdkAccountUsersResources","SdkAccountResource","invitations","projects","user","userId","assets","contacts","pricePlan","qrCodes","scans","users","SdkInvitationUsersResources","SdkInvitationResource","SdkAssetContactsResources","SdkAssetQrCodesResources","SdkAssetScansResources","SdkAssetContactResource","SdkAssetResource","contact","contactId","SdkAssetGroupResource","SdkAuthGetAccessTokenResources","SdkContactResource","SdkOverviewAccountsResources","SdkOverviewActivityResources","SdkOverviewUsersResources","SdkProjectAssetsResources","SdkProjectAssetGroupsResources","SdkProjectAssetsBatchResources","SdkProjectContactsResources","SdkProjectContactsBatchResources","SdkProjectQrCodesResources","SdkProjectSmsTemplatesResources","SdkProjectSmsTemplateResource","SdkProjectScansResources","SdkProjectResource","assetGroups","assetsBatch","contactsBatch","smsTemplates","smsTemplate","smsTemplateName","SdkQrCodeResource","SdkScanContactsResources","SdkScanSmsResources","SdkScanResource","sms","SdkSearchAccountResource","SdkSearchUserResource","SdkSearchAccountsResources","SdkSearchUsersResources","SdkUserAccountsResources","SdkUserErrorsResources","SdkUserInvitationsResources","SdkUserResource","accounts","errors","SdkResources","account","accountId","invitation","invitationId","asset","assetId","assetGroup","groupId","authGetAccessToken","overviewAccounts","overviewActivity","overviewUsers","project","projectId","qrCode","qrCodeId","scan","scanId","searchAccount","searchUser","searchAccounts","searchUsers","CognitoUserAsync","CognitoUser","authenticationDetails","Promise","resolve","reject","authenticateUser","onSuccess","onFailure","mfaRequired","challengeName","challengeParameters","selectMFAType","mfaSetup","totpRequired","customChallenge","CognitoUserPoolAsync","CognitoUserPool","getStorage","storage","getClientId","clientId","username","password","userAttributes","validationData","signUp","result","UserPool","userPoolId","userPool","UserPoolId","ClientId","Storage","getCognitoUserPool","getUser","key","getItem","Buffer","from","toString","Username","Pool","lastAuthUser","secret","cognitoUser","AuthenticationDetails","Password","then","getUsername","setItem","email","attributes","attributeList","CognitoUserAttribute","Name","Value","givenName","middleName","familyName","phoneNumber","NullSession","debugConfig","debugAuth","getConfig","getActiveUser","Openscreen","_config","cloudConfigName","cloudConfig","usingApiKey","isAdministrator","activeUser","OS_DEBUG","process","env","log","toLowerCase","split","includes","warn","config","environment","c","repeat","length","userType","poolId","apiPoolId","apiClientId","userClientId","info","s","catch","authenticate","idToken","getIdToken","idInfo","payload","sub","groups","moment","getExpiration","fromNow","getIssuedAt","pathToConfig","thisAxios","create","baseURL","timeout","responseType","maxContentLength","maxBodyLength","maxRedirects","decompress","message","startsWith","region","authorize","path","image","format","binaryData","dataUrl","fs","writeFile"],"mappings":"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"}