import { RequestRouteSegment } from './request';
import { RequestDelete } from './request-delete';
import { RequestGet } from './request-get';
import { RequestPatch } from './request-patch';
import { RequestPost } from './request-post';
import { Resource, Resources } from './resource';
export interface NestedKeyValueObject {
    [key: string]: string | number | boolean | NestedKeyValueObject;
}
export declare enum AccountStatus {
    ACTIVE = "ACTIVE",
    SUSPENDED = "SUSPENDED"
}
export declare enum AccountUserRole {
    OWNER = "OWNER",
    ADMINISTRATOR = "ADMINISTRATOR",
    BILLING_CONTACT = "BILLING_CONTACT",
    MEMBER = "MEMBER",
    API_KEY = "API_KEY",
    INVITATION_DECLINED = "INVITATION_DECLINED"
}
export declare enum PricePlanName {
    INDIVIDUAL_STARTER = "individualStarter",
    INDIVIDUAL_PRO = "individualPro",
    ENTERPRISE_STARTER = "enterpriseStarter",
    ENTERPRISE_PRO = "enterprisePro",
    ENTERPRISE_CUSTOM = "enterpriseCustom",
    UNLIMITED = "unlimited"
}
export declare enum PricePlanPaymentPeriod {
    MONTHLY = "monthly",
    ANNUAL = "annual"
}
export declare enum PricePlanReporting {
    BASIC = "basic",
    ADVANCED = "advanced",
    basic = "basic",
    advance = "advanced"
}
export declare enum ProjectStatus {
    ACTIVE = "ACTIVE",
    SUSPENDED = "SUSPENDED"
}
export declare enum QrCodeDynamicRedirectType {
    NO_SCAN_ID = "NO_SCAN_ID",
    SCAN_ID_IN_PATH_PARAMETER = "SCAN_ID_IN_PATH_PARAMETER",
    SCAN_ID_IN_QUERY_STRING_PARAMETER = "SCAN_ID_IN_QUERY_STRING_PARAMETER"
}
export declare enum QrCodeErrorCorrectionLevel {
    L = "L",
    M = "M",
    Q = "Q",
    H = "H"
}
export declare enum QrCodeIntentType {
    STATIC_REDIRECT = "STATIC_REDIRECT",
    DYNAMIC_REDIRECT = "DYNAMIC_REDIRECT",
    DYNAMIC_REDIRECT_TO_APP = "DYNAMIC_REDIRECT_TO_APP"
}
export declare enum QrCodeLocatorKeyType {
    SHORT_URL = "SHORT_URL",
    HASHED_ID = "HASHED_ID",
    SECURE_ID = "SECURE_ID"
}
export declare enum QrCodeStatus {
    ACTIVE = "ACTIVE",
    INACTIVE = "INACTIVE",
    SUSPENDED = "SUSPENDED"
}
export declare enum QrCodeType {
    PNG = "PNG",
    JPEG = "JPEG",
    SVG = "SVG",
    png = "png",
    jpeg = "jpeg",
    svg = "svg"
}
export interface Entity {
}
export interface DdbEntity {
    created?: string | Date | number;
    modified?: string | Date | number;
}
export interface Response {
    body?: DdbEntity;
    code?: number;
    created?: string | Date | number;
    data?: NestedKeyValueObject;
    message?: string;
    modified?: string | Date | number;
    name?: string;
    request?: string;
    responseId?: string;
    source?: string;
    stack?: Array<any>;
    userId?: string;
}
export interface DdbAggregatedEntity {
    created?: string | Date | number;
    modified?: string | Date | number;
}
export interface Account {
    accountId?: string;
    assetCount?: number;
    collectTaxInfo?: boolean;
    companyName?: string;
    contactCount?: number;
    created?: string | Date | number;
    dynamicQrCodeCount?: number;
    lastScanId?: string;
    modified?: string | Date | number;
    needsPaymentUpdate?: boolean;
    projectCount?: number;
    scanCount?: number;
    staticQrCodeCount?: number;
    status?: AccountStatus;
    stripeCustomerId?: string;
}
export interface AccountInvitation {
    accountId?: string;
    companyName?: string;
    created?: string | Date | number;
    email?: string;
    expiresAt?: string | Date | number;
    firstName?: string;
    invitationId?: string;
    lastName?: string;
    modified?: string | Date | number;
    sendersFirstName?: string;
    sendersLastName?: string;
    sendersUserId?: string;
    userRole?: AccountUserRole;
}
export interface AccountResponse extends Account {
    accountId?: string;
    assetCount?: number;
    collectTaxInfo?: boolean;
    companyName?: string;
    contactCount?: number;
    created?: string | Date | number;
    currentPeriod?: PricePlanPeriod;
    dynamicQrCodeCount?: number;
    lastScanId?: string;
    modified?: string | Date | number;
    needsPaymentUpdate?: boolean;
    pricePlan?: PricePlan;
    projectCount?: number;
    scanCount?: number;
    staticQrCodeCount?: number;
    status?: AccountStatus;
    stripeCustomerId?: string;
}
export interface AccountUser {
    accountId?: string;
    created?: string | Date | number;
    modified?: string | Date | number;
    userId?: string;
    userRole?: AccountUserRole;
}
export interface ApiKey {
    apiKeyId?: string;
    created?: string | Date | number;
    description?: string;
    key?: string;
    modified?: string | Date | number;
    name?: string;
}
export interface Asset {
    assetId?: string;
    created?: string | Date | number;
    customAttributes?: NestedKeyValueObject;
    description?: string;
    groupId?: string;
    modified?: string | Date | number;
    name?: string;
    projectId?: string;
    scanCount?: number;
}
export interface AssetContact {
    assetId?: string;
    contactId?: string;
    created?: string | Date | number;
    modified?: string | Date | number;
    type?: string;
}
export interface AssetGroupAsset {
    assetId?: string;
    created?: string | Date | number;
    groupId?: string;
    modified?: string | Date | number;
}
export interface Contact {
    cellPhone?: string;
    consent?: ContactConsent[];
    contactId?: string;
    created?: string | Date | number;
    customAttributes?: NestedKeyValueObject;
    emailAddress?: string;
    firstName?: string;
    lastName?: string;
    mailingAddress?: ContactMailingAddress;
    middleName?: string;
    modified?: string | Date | number;
    nickname?: string;
}
export interface ContactConsent {
    consented?: boolean;
    consentedAt?: string | Date | number;
    url?: string;
}
export interface ContactEmail {
    contactId?: string;
    created?: string | Date | number;
    email?: string;
    modified?: string | Date | number;
    projectId?: string;
}
export interface ContactMailingAddress {
    address?: string;
    city?: string;
    country?: string;
    postalOrZip?: string;
    provinceOrState?: string;
}
export interface ContactPhone {
    contactId?: string;
    created?: string | Date | number;
    modified?: string | Date | number;
    phone?: string;
    projectId?: string;
}
export interface EmailInvitation {
    accountId?: string;
    created?: string | Date | number;
    email?: string;
    expiresAt?: string | Date | number;
    invitationId?: string;
    modified?: string | Date | number;
}
export interface NestedAsset {
    customAttributes?: NestedKeyValueObject;
    description?: string;
    groupId?: string;
    name?: string;
    qrCodes?: NestedQrCode[];
}
export interface NestedContact {
    asset?: NestedAsset;
    cellPhone?: string;
    consent?: ContactConsent[];
    customAttributes?: NestedKeyValueObject;
    emailAddress?: string;
    firstName?: string;
    lastName?: string;
    mailingAddress?: ContactMailingAddress;
    middleName?: string;
    nickname?: string;
    type?: string;
}
export interface NestedQrCode {
    dynamicRedirectType?: QrCodeDynamicRedirectType;
    intent?: string;
    intentState?: NestedKeyValueObject;
    intentType?: QrCodeIntentType;
    locatorKeyType?: QrCodeLocatorKeyType;
    status?: QrCodeStatus;
    validFrom?: string | Date | number;
    validTo?: string | Date | number;
}
export interface PricePlan {
    additionalScanCost?: number;
    annualPrice?: number;
    created?: string | Date | number;
    dataExport?: boolean;
    modified?: string | Date | number;
    monthlyPrice?: number;
    monthlyScans?: number;
    name?: string;
    paymentPeriod?: string;
    pricePlanId?: string;
    projects?: number;
    qrCodes?: number;
    reporting?: PricePlanReporting;
    roleBasedManagement?: boolean;
    stripeCustomerId?: string;
    stripePlanId?: string;
    stripeSubscriptionId?: string;
    subscriptionItemId?: string;
    users?: number;
}
export interface PricePlanPeriod {
    additionalScans?: number;
    additionalScansCost?: number;
    created?: string | Date | number;
    modified?: string | Date | number;
    period?: string | Date | number;
    periodEndDate?: string | Date | number;
    pricePlanId?: string;
    projects?: number;
    projectsCreated?: number;
    projectsRemaining?: number;
    qrCodes?: number;
    qrCodesCreated?: number;
    qrCodesRemaining?: number;
    qrScansRemaining?: number;
    scansUsed?: number;
    users?: number;
    usersCreated?: number;
    usersRemaining?: number;
}
export interface Project {
    assetCount?: number;
    companyName?: string;
    contactCount?: number;
    created?: string | Date | number;
    description?: string;
    dynamicQrCodeCount?: number;
    lastScanId?: string;
    modified?: string | Date | number;
    name?: string;
    projectId?: string;
    scanCount?: number;
    staticQrCodeCount?: number;
    status?: ProjectStatus;
}
export interface ProjectAccount {
    accountId?: string;
    created?: string | Date | number;
    modified?: string | Date | number;
    projectId?: string;
}
export interface ProjectContact {
    contactId?: string;
    created?: string | Date | number;
    modified?: string | Date | number;
    projectId?: string;
}
export interface QrCode {
    assetId?: string;
    created?: string | Date | number;
    dynamicRedirectType?: QrCodeDynamicRedirectType;
    image?: QrCodeImage;
    intent?: string;
    intentState?: NestedKeyValueObject;
    intentType?: QrCodeIntentType;
    locatorKey?: string;
    locatorKeyType?: QrCodeLocatorKeyType;
    modified?: string | Date | number;
    qrCodeId?: string;
    scanCount?: number;
    status?: QrCodeStatus;
    validFrom?: string | Date | number;
    validTo?: string | Date | number;
}
export interface QrCodeImage {
    data?: string;
    options?: QrCodeOptions;
}
export interface QrCodeLocator {
    created?: string | Date | number;
    locatorKey?: string;
    modified?: string | Date | number;
    qrCodeId?: string;
}
export interface QrCodeOptions {
    background?: string;
    backgroundGradientColors?: string;
    backgroundGradientRotation?: number;
    backgroundGradientType?: string;
    cornerDotColor?: string;
    cornerDotType?: string;
    cornerSquareColor?: string;
    cornerSquareType?: string;
    darkColor?: string;
    dataUrl?: boolean;
    dotType?: string;
    errorCorrectionLevel?: QrCodeErrorCorrectionLevel;
    foreground?: string;
    foregroundGradientColors?: string;
    foregroundGradientRotation?: number;
    foregroundGradientType?: string;
    format?: QrCodeType;
    image?: string;
    lightColor?: string;
    margin?: number;
    scale?: number;
    version?: number;
    width?: number;
}
export interface ResponseAsset {
    assetId?: string;
    created?: string | Date | number;
    customAttributes?: NestedKeyValueObject;
    description?: string;
    groupId?: string;
    modified?: string | Date | number;
    name?: string;
    projectId?: string;
    qrCodes?: QrCode[];
}
export interface ResponseContact extends Contact {
    cellPhone?: string;
    consent?: ContactConsent[];
    contactId?: string;
    created?: string | Date | number;
    customAttributes?: NestedKeyValueObject;
    emailAddress?: string;
    firstName?: string;
    lastName?: string;
    mailingAddress?: ContactMailingAddress;
    middleName?: string;
    modified?: string | Date | number;
    nickname?: string;
    type?: string;
}
export interface Scan {
    assetId?: string;
    browserName?: string;
    browserVersion?: string;
    cpuArchitecture?: string;
    created?: string | Date | number;
    deviceModel?: string;
    deviceType?: string;
    deviceVendor?: string;
    engineName?: string;
    engineVersion?: string;
    ipAddress?: string;
    locationCityName?: string;
    locationCountryCode?: string;
    locationCountryName?: string;
    locationLatitude?: string;
    locationLongitude?: string;
    locationPostalCode?: string;
    locationRegionCode?: string;
    locationRegionName?: string;
    locationTimeZone?: string;
    modified?: string | Date | number;
    osName?: string;
    osVersion?: string;
    projectId?: string;
    qrCodeId?: string;
    scanId?: string;
    scanTime?: string | Date | number;
    userAgent?: string;
}
export interface ScanContact {
    contactId?: string;
    created?: string | Date | number;
    modified?: string | Date | number;
    scanId?: string;
}
export interface Sms {
    body?: string;
    contactId?: string;
    created?: string | Date | number;
    delivered?: boolean;
    deliveredAt?: string | Date | number;
    from?: string;
    inbound?: boolean;
    modified?: string | Date | number;
    phone?: string;
    price?: number;
    priceUnit?: string;
    projectId?: string;
    smsId?: string;
    smsTemplateName?: string;
    status?: string;
    to?: string;
}
export interface SmsTemplate {
    body?: string;
    created?: string | Date | number;
    modified?: string | Date | number;
    projectId?: string;
    responseUrl?: string;
    smsTemplateName?: string;
    statusUrl?: string;
}
export interface User {
    created?: string | Date | number;
    email?: string;
    firstName?: string;
    lastName?: string;
    middleName?: string;
    modified?: string | Date | number;
    phone?: string;
    userId?: string;
}
export interface UserCombined extends User {
    created?: string | Date | number;
    email?: string;
    expiresAt?: string | Date | number;
    firstName?: string;
    invitationId?: string;
    lastName?: string;
    middleName?: string;
    modified?: string | Date | number;
    phone?: string;
    userId?: string;
    userRole?: AccountUserRole;
}
export interface ScanContactAccountIndex {
    accountId?: string;
    assetId?: string;
    contactId?: string;
    created?: string | Date | number;
    indexedEntityName?: string;
    modified?: string | Date | number;
    scanId?: string;
}
export interface ScanContactProjectIndex {
    assetId?: string;
    contactId?: string;
    created?: string | Date | number;
    indexedEntityName?: string;
    modified?: string | Date | number;
    projectId?: string;
    scanId?: string;
}
export interface ExportedScan extends Scan {
    assetId?: string;
    assetName?: string;
    browserName?: string;
    browserVersion?: string;
    cpuArchitecture?: string;
    created?: string | Date | number;
    deviceModel?: string;
    deviceType?: string;
    deviceVendor?: string;
    engineName?: string;
    engineVersion?: string;
    ipAddress?: string;
    locationCityName?: string;
    locationCountryCode?: string;
    locationCountryName?: string;
    locationLatitude?: string;
    locationLongitude?: string;
    locationPostalCode?: string;
    locationRegionCode?: string;
    locationRegionName?: string;
    locationTimeZone?: string;
    modified?: string | Date | number;
    osName?: string;
    osVersion?: string;
    projectId?: string;
    qrCodeId?: string;
    scanId?: string;
    scanTime?: string | Date | number;
    userAgent?: string;
}
export interface AccountContact {
    accountId?: string;
    contactId?: string;
    created?: string | Date | number;
    modified?: string | Date | number;
}
export interface CreateInvitationByAccountIdPathParameters {
    accountId?: string;
}
export interface CreateInvitationByAccountIdRequestBody {
    email?: string;
    firstName?: string;
    lastName?: string;
    userRole?: AccountUserRole;
}
export interface CreateInvitationByAccountIdResponseBody {
    accountInvitation?: AccountInvitation;
    emailInvitation?: EmailInvitation;
}
export interface CreateProjectByAccountIdPathParameters {
    accountId?: string;
}
export interface CreateProjectByAccountIdRequestBody {
    companyName?: string;
    description?: string;
    name?: string;
}
export interface CreateProjectByAccountIdResponseBody {
    accountId?: string;
    project?: Project;
}
export interface CreateUserByInvitationIdPathParameters {
    invitationId?: string;
}
export interface CreateUserByInvitationIdResponseBody {
    account?: Account;
    accountUser?: AccountUser;
}
export interface DeleteAccountPathParameters {
    accountId?: string;
}
export interface DeleteInvitationPathParameters {
    invitationId?: string;
}
export interface DeleteInvitationResponseBody {
    accountInvitation?: AccountInvitation;
    emailInvitation?: EmailInvitation;
}
export interface DeleteUserByAccountIdPathParameters {
    accountId?: string;
    userId?: string;
}
export interface DeleteUserByAccountIdResponseBody {
    user?: User;
}
export interface GetAccountPathParameters {
    accountId?: string;
}
export interface GetAccountResponseBody extends Account {
    accountId?: string;
    assetCount?: number;
    collectTaxInfo?: boolean;
    companyName?: string;
    contactCount?: number;
    created?: string | Date | number;
    currentPeriod?: PricePlanPeriod;
    dynamicQrCodeCount?: number;
    lastScanId?: string;
    modified?: string | Date | number;
    needsPaymentUpdate?: boolean;
    pricePlan?: PricePlan;
    projectCount?: number;
    scanCount?: number;
    staticQrCodeCount?: number;
    status?: AccountStatus;
    stripeCustomerId?: string;
}
export interface GetAssetsByAccountIdPathParameters {
    accountId?: string;
}
export interface GetAssetsByAccountIdQueryStringParameters {
    lastKey?: string;
    limit?: number;
    name?: string;
}
export interface GetAssetsByAccountIdResponseBody {
    accountId?: string;
    assets?: Asset[];
    lastKey?: string;
    numberOfAssets?: number;
}
export interface GetContactsByAccountIdPathParameters {
    accountId?: string;
}
export interface GetContactsByAccountIdQueryStringParameters {
    assetName?: string;
    lastKey?: string;
    limit?: number;
}
export interface GetContactsByAccountIdResponseBody {
    accountId?: string;
    contacts?: Contact[];
    lastKey?: string;
    numberOfContacts?: number;
}
export interface GetInvitationPathParameters {
    invitationId?: string;
}
export interface GetInvitationResponseBody {
    accountInvitation?: AccountInvitation;
}
export interface GetPricePlanByAccountIdPathParameters {
    accountId?: string;
}
export interface GetPricePlanByAccountIdResponseBody {
    pricePlan?: PricePlan;
    pricePlanPeriod?: PricePlanPeriod;
}
export interface GetProjectsByAccountIdPathParameters {
    accountId?: string;
}
export interface GetProjectsByAccountIdQueryStringParameters {
    lastKey?: string;
    limit?: number;
    next?: string;
}
export interface GetProjectsByAccountIdResponseBody {
    accountId?: string;
    lastKey?: string;
    next?: string;
    numberOfProjects?: number;
    projects?: Project[];
}
export interface GetQrCodesByAccountIdPathParameters {
    accountId?: string;
}
export interface GetQrCodesByAccountIdQueryStringParameters {
    assetName?: string;
    lastKey?: string;
    limit?: number;
}
export interface GetQrCodesByAccountIdResponseBody {
    accountId?: string;
    lastKey?: string;
    numberOfQrCodes?: number;
    qrCodes?: QrCode[];
}
export interface GetScansByAccountIdPathParameters {
    accountId?: string;
}
export interface GetScansByAccountIdQueryStringParameters {
    assetName?: string;
    contactId?: string;
    lastKey?: string;
    limit?: number;
}
export interface GetScansByAccountIdResponseBody {
    accountId?: string;
    lastKey?: string;
    numberOfScans?: number;
    scans?: Scan[];
}
export interface GetUsersByAccountIdPathParameters {
    accountId?: string;
}
export interface GetUsersByAccountIdQueryStringParameters {
    lastKey?: string;
    limit?: number;
}
export interface GetUsersByAccountIdResponseBody {
    accountId?: string;
    invitations?: UserCombined[];
    lastKey?: string;
    numberOfInvitations?: number;
    numberOfUsers?: number;
    users?: UserCombined[];
}
export interface UpdateAccountPathParameters {
    accountId?: string;
}
export interface UpdateAccountRequestBody {
    companyName?: string;
}
export interface UpdateAccountResponseBody extends Account {
    accountId?: string;
    assetCount?: number;
    collectTaxInfo?: boolean;
    companyName?: string;
    contactCount?: number;
    created?: string | Date | number;
    dynamicQrCodeCount?: number;
    lastScanId?: string;
    modified?: string | Date | number;
    needsPaymentUpdate?: boolean;
    projectCount?: number;
    scanCount?: number;
    staticQrCodeCount?: number;
    status?: AccountStatus;
    stripeCustomerId?: string;
}
export interface UpdatePricePlanByAccountIdPathParameters {
    accountId?: string;
}
export interface UpdatePricePlanByAccountIdRequestBody {
    paymentPeriod?: PricePlanPaymentPeriod;
    pricePlanName?: PricePlanName;
}
export interface UpdatePricePlanByAccountIdResponseBody {
    pricePlan?: PricePlan;
    pricePlanPeriod?: PricePlanPeriod;
}
export interface CreateContactByAssetIdPathParameters {
    assetId?: string;
}
export interface CreateContactByAssetIdRequestBody {
    cellPhone?: string;
    consent?: ContactConsent[];
    customAttributes?: NestedKeyValueObject;
    emailAddress?: string;
    firstName?: string;
    lastName?: string;
    mailingAddress?: ContactMailingAddress;
    middleName?: string;
    nickname?: string;
    type?: string;
}
export interface CreateContactByAssetIdResponseBody {
    asset?: Asset;
    assetContact?: AssetContact;
    assetId?: string;
    contact?: Contact;
    contactEmail?: ContactEmail;
    contactPhone?: ContactPhone;
    projectContact?: ProjectContact;
}
export interface CreateQrCodeByAssetIdPathParameters {
    assetId?: string;
}
export interface CreateQrCodeByAssetIdRequestBody {
    dynamicRedirectType?: QrCodeDynamicRedirectType;
    intent?: string;
    intentState?: NestedKeyValueObject;
    intentType?: QrCodeIntentType;
    locatorKeyType?: QrCodeLocatorKeyType;
    status?: QrCodeStatus;
    validFrom?: string | Date | number;
    validTo?: string | Date | number;
}
export interface CreateQrCodeByAssetIdResponseBody {
    asset?: Asset;
    assetId?: string;
    locatorKey?: string;
    qrCode?: QrCode;
    qrCodeId?: string;
}
export interface DeleteAssetPathParameters {
    assetId?: string;
}
export interface DeleteAssetResponseBody {
    asset?: Asset;
}
export interface DeleteAssetGroupPathParameters {
    groupId?: string;
}
export interface DeleteAssetGroupResponseBody {
    deletedAssetsCount?: number;
    deletedQrCodesCount?: number;
    groupId?: string;
}
export interface GetAssetPathParameters {
    assetId?: string;
}
export interface GetAssetResponseBody {
    asset?: ResponseAsset;
    assetId?: string;
}
export interface GetAssetGroupPathParameters {
    groupId?: string;
}
export interface GetAssetGroupQueryStringParameters {
    lastKey?: string;
    limit?: number;
}
export interface GetAssetGroupResponseBody {
    assets?: Asset[];
    groupId?: string;
    lastKey?: string;
    numberOfAssets?: number;
}
export interface GetContactsByAssetIdPathParameters {
    assetId?: string;
}
export interface GetContactsByAssetIdQueryStringParameters {
    lastKey?: string;
    limit?: number;
}
export interface GetContactsByAssetIdResponseBody {
    assetContacts?: AssetContact[];
    assetId?: string;
    contacts?: Contact[];
    lastKey?: string;
    numberOfContacts?: number;
}
export interface GetQrCodesByAssetIdPathParameters {
    assetId?: string;
}
export interface GetQrCodesByAssetIdQueryStringParameters extends QrCodeOptions {
    background?: string;
    backgroundGradientColors?: string;
    backgroundGradientRotation?: number;
    backgroundGradientType?: string;
    cornerDotColor?: string;
    cornerDotType?: string;
    cornerSquareColor?: string;
    cornerSquareType?: string;
    darkColor?: string;
    dataUrl?: boolean;
    dotType?: string;
    errorCorrectionLevel?: QrCodeErrorCorrectionLevel;
    foreground?: string;
    foregroundGradientColors?: string;
    foregroundGradientRotation?: number;
    foregroundGradientType?: string;
    format?: QrCodeType;
    image?: string;
    lastKey?: string;
    lightColor?: string;
    limit?: number;
    margin?: number;
    scale?: number;
    version?: number;
    width?: number;
}
export interface GetQrCodesByAssetIdResponseBody {
    assetId?: string;
    lastKey?: string;
    numberOfQrCodes?: number;
    qrCodes?: QrCode[];
}
export interface GetScansByAssetIdPathParameters {
    assetId?: string;
}
export interface GetScansByAssetIdQueryStringParameters {
    lastKey?: string;
    limit?: number;
}
export interface GetScansByAssetIdResponseBody {
    assetId?: string;
    lastKey?: string;
    numberOfScans?: number;
    scans?: Scan[];
}
export interface LinkContactToAssetPathParameters {
    assetId?: string;
    contactId?: string;
}
export interface LinkContactToAssetRequestBody {
    type?: string;
}
export interface LinkContactToAssetResponseBody {
    assetContact?: AssetContact;
    projectContact?: ProjectContact;
}
export interface UnlinkContactToAssetPathParameters {
    assetId?: string;
    contactId?: string;
}
export interface UpdateAssetPathParameters {
    assetId?: string;
}
export interface UpdateAssetRequestBody {
    customAttributes?: NestedKeyValueObject;
    description?: string;
    groupId?: string;
}
export interface UpdateAssetResponseBody {
    asset?: Asset;
    assetId?: string;
}
export interface GetAccessTokenRequestBody {
    accessKey?: string;
    accessSecret?: string;
}
export interface GetAccessTokenResponseBody {
    error?: string;
    token?: string;
}
export interface DeleteContactPathParameters {
    contactId?: string;
}
export interface DeleteContactResponseBody {
    contact?: Contact;
}
export interface GetContactPathParameters {
    contactId?: string;
}
export interface GetContactResponseBody {
    contact?: Contact;
}
export interface UpdateContactPathParameters {
    contactId?: string;
}
export interface UpdateContactRequestBody {
    cellPhone?: string;
    consent?: ContactConsent[];
    customAttributes?: NestedKeyValueObject;
    emailAddress?: string;
    firstName?: string;
    lastName?: string;
    mailingAddress?: ContactMailingAddress;
    middleName?: string;
    nickname?: string;
}
export interface UpdateContactResponseBody {
    contact?: Contact;
}
export interface GetAccountsOverviewResponseBody {
    enterpriseCustom?: NestedKeyValueObject;
    enterprisePro?: NestedKeyValueObject;
    enterpriseStarter?: NestedKeyValueObject;
    individualPro?: NestedKeyValueObject;
    individualStarter?: NestedKeyValueObject;
    unlimited?: NestedKeyValueObject;
}
export interface GetActivityOverviewResponseBody {
    assets?: NestedKeyValueObject;
    contacts?: NestedKeyValueObject;
    logins?: NestedKeyValueObject;
    qrCodes?: NestedKeyValueObject;
    scans?: NestedKeyValueObject;
}
export interface GetUsersOverviewResponseBody {
    active?: NestedKeyValueObject;
    pending?: NestedKeyValueObject;
    total?: NestedKeyValueObject;
}
export interface CreateAssetByProjectIdPathParameters {
    projectId?: string;
}
export interface CreateAssetByProjectIdRequestBody extends NestedAsset {
    customAttributes?: NestedKeyValueObject;
    description?: string;
    groupId?: string;
    name?: string;
    qrCodes?: NestedQrCode[];
}
export interface CreateAssetByProjectIdResponseBody {
    asset?: ResponseAsset;
    projectId?: string;
}
export interface CreateAssetGroupByProjectIdPathParameters {
    projectId?: string;
}
export interface CreateAssetGroupByProjectIdRequestBody {
    assets?: NestedAsset[];
}
export interface CreateAssetGroupByProjectIdResponseBody {
    assets?: ResponseAsset[];
    groupId?: string;
    numberOfAssets?: number;
    projectId?: string;
}
export interface CreateAssetsByProjectIdPathParameters {
    projectId?: string;
}
export interface CreateAssetsByProjectIdRequestBody {
    assets?: NestedAsset[];
}
export interface CreateAssetsByProjectIdResponseBody {
    assets?: ResponseAsset[];
    numberOfAssets?: number;
    projectId?: string;
}
export interface CreateContactByProjectIdPathParameters {
    projectId?: string;
}
export interface CreateContactByProjectIdRequestBody {
    asset?: NestedAsset;
    cellPhone?: string;
    consent?: ContactConsent[];
    customAttributes?: NestedKeyValueObject;
    emailAddress?: string;
    firstName?: string;
    lastName?: string;
    mailingAddress?: ContactMailingAddress;
    middleName?: string;
    nickname?: string;
    type?: string;
}
export interface CreateContactByProjectIdResponseBody {
    asset?: Asset;
    assetContact?: AssetContact;
    contact?: Contact;
    contactEmail?: ContactEmail;
    contactPhone?: ContactPhone;
    projectContact?: ProjectContact;
    projectId?: string;
    qrCodes?: QrCode[];
}
export interface CreateContactsByProjectIdPathParameters {
    projectId?: string;
}
export interface CreateContactsByProjectIdRequestBody {
    contacts?: NestedContact[];
}
export interface CreateContactsByProjectIdResponseBody {
    contacts?: Array<any>;
    numberOfContacts?: number;
    projectId?: string;
}
export interface CreateQrCodeByProjectIdPathParameters {
    projectId?: string;
}
export interface CreateQrCodeByProjectIdRequestBody {
    intent?: string;
    intentState?: NestedKeyValueObject;
    status?: QrCodeStatus;
}
export interface CreateQrCodeByProjectIdResponseBody {
    locatorKey?: string;
    projectId?: string;
    qrCode?: QrCode;
    qrCodeId?: string;
}
export interface CreateSmsTemplateByProjectIdPathParameters {
    projectId?: string;
}
export interface CreateSmsTemplateByProjectIdRequestBody {
    body?: string;
    responseUrl?: string;
    smsTemplateName?: string;
    statusUrl?: string;
}
export interface CreateSmsTemplateByProjectIdResponseBody {
    smsTemplate?: SmsTemplate;
}
export interface DeleteProjectPathParameters {
    projectId?: string;
}
export interface DeleteProjectResponseBody {
    project?: Project;
}
export interface DeleteSmsTemplateByProjectIdPathParameters {
    projectId?: string;
    smsTemplateName?: string;
}
export interface DeleteSmsTemplateByProjectIdResponseBody {
    body?: string;
    projectId?: string;
    responseUrl?: string;
    smsTemplateName?: string;
    statusUrl?: string;
}
export interface GetAssetsByProjectIdPathParameters {
    projectId?: string;
}
export interface GetAssetsByProjectIdQueryStringParameters {
    lastKey?: string;
    limit?: number;
    name?: string;
}
export interface GetAssetsByProjectIdResponseBody {
    assets?: Asset[];
    lastKey?: string;
    numberOfAssets?: number;
    projectId?: string;
}
export interface GetContactsByProjectIdPathParameters {
    projectId?: string;
}
export interface GetContactsByProjectIdQueryStringParameters {
    assetName?: string;
    email?: string;
    lastKey?: string;
    limit?: number;
    phone?: string;
}
export interface GetContactsByProjectIdResponseBody {
    contacts?: Contact[];
    lastKey?: string;
    numberOfContacts?: number;
    projectContacts?: ProjectContact[];
    projectId?: string;
}
export interface GetProjectByProjectIdPathParameters {
    projectId?: string;
}
export interface GetProjectByProjectIdResponseBody {
    project?: Project;
}
export interface GetQrCodesByProjectIdPathParameters {
    projectId?: string;
}
export interface GetQrCodesByProjectIdQueryStringParameters {
    assetName?: string;
    lastKey?: string;
    limit?: number;
}
export interface GetQrCodesByProjectIdResponseBody {
    lastKey?: string;
    numberOfQrCodes?: number;
    projectId?: string;
    qrCodes?: QrCode[];
}
export interface GetScansByProjectIdPathParameters {
    projectId?: string;
}
export interface GetScansByProjectIdQueryStringParameters {
    assetName?: string;
    contactId?: string;
    lastKey?: string;
    limit?: number;
}
export interface GetScansByProjectIdResponseBody {
    lastKey?: string;
    numberOfScans?: number;
    projectId?: string;
    scans?: Scan[];
}
export interface GetSmsTemplateByProjectIdPathParameters {
    projectId?: string;
    smsTemplateName?: string;
}
export interface GetSmsTemplateByProjectIdResponseBody {
    body?: string;
    projectId?: string;
    responseUrl?: string;
    smsTemplateName?: string;
    statusUrl?: string;
}
export interface GetSmsTemplatesByProjectIdPathParameters {
    projectId?: string;
}
export interface GetSmsTemplatesByProjectIdQueryStringParameters {
    lastKey?: string;
    limit?: number;
}
export interface GetSmsTemplatesByProjectIdResponseBody {
    lastKey?: string;
    numberOfSmsTemplates?: number;
    projectId?: string;
    smsTemplates?: SmsTemplate[];
}
export interface UpdateProjectByProjectIdPathParameters {
    projectId?: string;
}
export interface UpdateProjectByProjectIdRequestBody {
    companyName?: string;
    description?: string;
    name?: string;
    status?: ProjectStatus;
}
export interface UpdateProjectByProjectIdResponseBody {
    project?: Project;
}
export interface UpdateSmsTemplatePathParameters {
    projectId?: string;
    smsTemplateName?: string;
}
export interface UpdateSmsTemplateResponseBody {
    body?: string;
    projectId?: string;
    responseUrl?: string;
    smsTemplateName?: string;
    statusUrl?: string;
}
export interface DeleteQrCodePathParameters {
    qrCodeId?: string;
}
export interface DeleteQrCodeResponseBody {
    qrCode?: QrCode;
}
export interface GetQrCodePathParameters {
    qrCodeId?: string;
}
export interface GetQrCodeQueryStringParameters extends QrCodeOptions {
    background?: string;
    backgroundGradientColors?: string;
    backgroundGradientRotation?: number;
    backgroundGradientType?: string;
    cornerDotColor?: string;
    cornerDotType?: string;
    cornerSquareColor?: string;
    cornerSquareType?: string;
    darkColor?: string;
    dataUrl?: boolean;
    dotType?: string;
    errorCorrectionLevel?: QrCodeErrorCorrectionLevel;
    foreground?: string;
    foregroundGradientColors?: string;
    foregroundGradientRotation?: number;
    foregroundGradientType?: string;
    format?: QrCodeType;
    image?: string;
    lightColor?: string;
    margin?: number;
    scale?: number;
    version?: number;
    width?: number;
}
export interface GetQrCodeResponseBody extends QrCode {
    assetId?: string;
    created?: string | Date | number;
    dynamicRedirectType?: QrCodeDynamicRedirectType;
    image?: QrCodeImage;
    intent?: string;
    intentState?: NestedKeyValueObject;
    intentType?: QrCodeIntentType;
    locatorKey?: string;
    locatorKeyType?: QrCodeLocatorKeyType;
    modified?: string | Date | number;
    qrCodeId?: string;
    scanCount?: number;
    status?: QrCodeStatus;
    validFrom?: string | Date | number;
    validTo?: string | Date | number;
}
export interface UpdateQrCodePathParameters {
    qrCodeId?: string;
}
export interface UpdateQrCodeRequestBody {
    dynamicRedirectType?: QrCodeDynamicRedirectType;
    intent?: string;
    intentState?: NestedKeyValueObject;
    intentType?: QrCodeIntentType;
    status?: QrCodeStatus;
}
export interface UpdateQrCodeResponseBody {
    qrCode?: QrCode;
}
export interface CreateContactByScanIdPathParameters {
    scanId?: string;
}
export interface CreateContactByScanIdRequestBody {
    cellPhone?: string;
    consent?: ContactConsent[];
    customAttributes?: NestedKeyValueObject;
    emailAddress?: string;
    firstName?: string;
    lastName?: string;
    mailingAddress?: ContactMailingAddress;
    middleName?: string;
    nickname?: string;
    type?: string;
}
export interface CreateContactByScanIdResponseBody {
    asset?: Asset;
    assetContact?: AssetContact;
    assetId?: string;
    contact?: Contact;
    contactEmail?: ContactEmail;
    contactPhone?: ContactPhone;
    projectContact?: ProjectContact;
    scanContact?: ScanContact;
}
export interface GetScanPathParameters {
    scanId?: string;
}
export interface GetScanResponseBody {
    asset?: Asset;
    contacts?: ResponseContact[];
    qrCode?: QrCode;
    scan?: Scan;
}
export interface SendSmsByScanIdPathParameters {
    scanId?: string;
}
export interface SendSmsByScanIdRequestBody {
    customVariables?: NestedKeyValueObject;
    smsTemplateName?: string;
    to?: string;
}
export interface SendSmsByScanIdResponseBody {
    sms?: Sms;
}
export interface GetAccountDetailsPathParameters {
    accountId?: string;
}
export interface GetAccountDetailsResponseBody {
    account?: NestedKeyValueObject;
    assets?: NestedKeyValueObject;
    contacts?: NestedKeyValueObject;
    projects?: NestedKeyValueObject;
    qrCodes?: NestedKeyValueObject;
    scans?: NestedKeyValueObject;
    users?: Array<any>;
}
export interface GetUserDetailsPathParameters {
    userId?: string;
}
export interface GetUserDetailsResponseBody {
    accounts?: Array<any>;
    logins?: Array<any>;
    user?: NestedKeyValueObject;
}
export interface SearchAccountsQueryStringParameters {
    limit?: number;
    nextToken?: string;
    queryExecutionId?: string;
    search?: string;
}
export interface SearchAccountsResponseBody {
    accounts?: Array<any>;
    nextToken?: string;
    queryExecutionId?: string;
}
export interface SearchUsersQueryStringParameters {
    limit?: number;
    nextToken?: string;
    queryExecutionId?: string;
    search?: string;
}
export interface SearchUsersResponseBody {
    nextToken?: string;
    queryExecutionId?: string;
    users?: Array<any>;
}
export interface CreateAccountByUserIdPathParameters {
    userId?: string;
}
export interface CreateAccountByUserIdRequestBody {
    companyName?: string;
}
export interface CreateAccountByUserIdResponseBody extends Account {
    accountId?: string;
    assetCount?: number;
    collectTaxInfo?: boolean;
    companyName?: string;
    contactCount?: number;
    created?: string | Date | number;
    dynamicQrCodeCount?: number;
    lastScanId?: string;
    modified?: string | Date | number;
    needsPaymentUpdate?: boolean;
    projectCount?: number;
    scanCount?: number;
    staticQrCodeCount?: number;
    status?: AccountStatus;
    stripeCustomerId?: string;
}
export interface GetAccountsByUserIdPathParameters {
    userId?: string;
}
export interface GetAccountsByUserIdQueryStringParameters {
    lastKey?: string;
    limit?: number;
}
export interface GetAccountsByUserIdResponseBody {
    accounts?: AccountResponse[];
    lastKey?: string;
    next?: string;
    numberOfAccounts?: number;
    userId?: string;
}
export interface GetErrorsByUserIdPathParameters {
    userId?: string;
}
export interface GetErrorsByUserIdQueryStringParameters {
    lastKey?: string;
    limit?: number;
}
export interface GetErrorsByUserIdResponseBody {
    errors?: Response[];
    lastKey?: string;
    numberOfErrors?: number;
    userId?: string;
}
export interface GetInvitationsByUserIdPathParameters {
    userId?: string;
}
export interface GetInvitationsByUserIdQueryStringParameters {
    lastKey?: string;
    limit?: number;
}
export interface GetInvitationsByUserIdResponseBody {
    accountInvitations?: AccountInvitation[];
    lastKey?: string;
    numberOfInvitations?: number;
    userId?: string;
}
export interface GetUserPathParameters {
    userId?: string;
}
export interface GetUserResponseBody extends User {
    created?: string | Date | number;
    email?: string;
    firstName?: string;
    lastName?: string;
    middleName?: string;
    modified?: string | Date | number;
    phone?: string;
    userId?: string;
}
export interface UpdateUserPathParameters {
    userId?: string;
}
export interface UpdateUserRequestBody {
    firstName?: string;
    lastName?: string;
    middleName?: string;
}
export interface UpdateUserResponseBody extends User {
    created?: string | Date | number;
    email?: string;
    firstName?: string;
    lastName?: string;
    middleName?: string;
    modified?: string | Date | number;
    phone?: string;
    userId?: string;
}
export declare class CreateInvitationByAccountIdRequest extends RequestPost<CreateInvitationByAccountIdPathParameters, undefined, CreateInvitationByAccountIdRequestBody, CreateInvitationByAccountIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class CreateProjectByAccountIdRequest extends RequestPost<CreateProjectByAccountIdPathParameters, undefined, CreateProjectByAccountIdRequestBody, CreateProjectByAccountIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class CreateUserByInvitationIdRequest extends RequestPost<CreateUserByInvitationIdPathParameters, undefined, undefined, CreateUserByInvitationIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class DeleteAccountRequest extends RequestDelete<DeleteAccountPathParameters, undefined, undefined> {
    routeSegments?: RequestRouteSegment[];
}
export declare class DeleteInvitationRequest extends RequestDelete<DeleteInvitationPathParameters, undefined, DeleteInvitationResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class DeleteUserByAccountIdRequest extends RequestDelete<DeleteUserByAccountIdPathParameters, undefined, DeleteUserByAccountIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetAccountRequest extends RequestGet<GetAccountPathParameters, undefined, GetAccountResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetAssetsByAccountIdRequest extends RequestGet<GetAssetsByAccountIdPathParameters, GetAssetsByAccountIdQueryStringParameters, GetAssetsByAccountIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetContactsByAccountIdRequest extends RequestGet<GetContactsByAccountIdPathParameters, GetContactsByAccountIdQueryStringParameters, GetContactsByAccountIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetInvitationRequest extends RequestGet<GetInvitationPathParameters, undefined, GetInvitationResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetPricePlanByAccountIdRequest extends RequestGet<GetPricePlanByAccountIdPathParameters, undefined, GetPricePlanByAccountIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetProjectsByAccountIdRequest extends RequestGet<GetProjectsByAccountIdPathParameters, GetProjectsByAccountIdQueryStringParameters, GetProjectsByAccountIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetQrCodesByAccountIdRequest extends RequestGet<GetQrCodesByAccountIdPathParameters, GetQrCodesByAccountIdQueryStringParameters, GetQrCodesByAccountIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetScansByAccountIdRequest extends RequestGet<GetScansByAccountIdPathParameters, GetScansByAccountIdQueryStringParameters, GetScansByAccountIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetUsersByAccountIdRequest extends RequestGet<GetUsersByAccountIdPathParameters, GetUsersByAccountIdQueryStringParameters, GetUsersByAccountIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class UpdateAccountRequest extends RequestPatch<UpdateAccountPathParameters, undefined, UpdateAccountRequestBody, UpdateAccountResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class UpdatePricePlanByAccountIdRequest extends RequestPatch<UpdatePricePlanByAccountIdPathParameters, undefined, UpdatePricePlanByAccountIdRequestBody, UpdatePricePlanByAccountIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class CreateContactByAssetIdRequest extends RequestPost<CreateContactByAssetIdPathParameters, undefined, CreateContactByAssetIdRequestBody, CreateContactByAssetIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class CreateQrCodeByAssetIdRequest extends RequestPost<CreateQrCodeByAssetIdPathParameters, undefined, CreateQrCodeByAssetIdRequestBody, CreateQrCodeByAssetIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class DeleteAssetRequest extends RequestDelete<DeleteAssetPathParameters, undefined, DeleteAssetResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class DeleteAssetGroupRequest extends RequestDelete<DeleteAssetGroupPathParameters, undefined, DeleteAssetGroupResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetAssetRequest extends RequestGet<GetAssetPathParameters, undefined, GetAssetResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetAssetGroupRequest extends RequestGet<GetAssetGroupPathParameters, GetAssetGroupQueryStringParameters, GetAssetGroupResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetContactsByAssetIdRequest extends RequestGet<GetContactsByAssetIdPathParameters, GetContactsByAssetIdQueryStringParameters, GetContactsByAssetIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetQrCodesByAssetIdRequest extends RequestGet<GetQrCodesByAssetIdPathParameters, GetQrCodesByAssetIdQueryStringParameters, GetQrCodesByAssetIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetScansByAssetIdRequest extends RequestGet<GetScansByAssetIdPathParameters, GetScansByAssetIdQueryStringParameters, GetScansByAssetIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class LinkContactToAssetRequest extends RequestPost<LinkContactToAssetPathParameters, undefined, LinkContactToAssetRequestBody, LinkContactToAssetResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class UnlinkContactToAssetRequest extends RequestDelete<UnlinkContactToAssetPathParameters, undefined, undefined> {
    routeSegments?: RequestRouteSegment[];
}
export declare class UpdateAssetRequest extends RequestPatch<UpdateAssetPathParameters, undefined, UpdateAssetRequestBody, UpdateAssetResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetAccessTokenRequest extends RequestPost<undefined, undefined, GetAccessTokenRequestBody, GetAccessTokenResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class DeleteContactRequest extends RequestDelete<DeleteContactPathParameters, undefined, DeleteContactResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetContactRequest extends RequestGet<GetContactPathParameters, undefined, GetContactResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class UpdateContactRequest extends RequestPatch<UpdateContactPathParameters, undefined, UpdateContactRequestBody, UpdateContactResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetAccountsOverviewRequest extends RequestGet<undefined, undefined, GetAccountsOverviewResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetActivityOverviewRequest extends RequestGet<undefined, undefined, GetActivityOverviewResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetUsersOverviewRequest extends RequestGet<undefined, undefined, GetUsersOverviewResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class CreateAssetByProjectIdRequest extends RequestPost<CreateAssetByProjectIdPathParameters, undefined, CreateAssetByProjectIdRequestBody, CreateAssetByProjectIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class CreateAssetGroupByProjectIdRequest extends RequestPost<CreateAssetGroupByProjectIdPathParameters, undefined, CreateAssetGroupByProjectIdRequestBody, CreateAssetGroupByProjectIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class CreateAssetsByProjectIdRequest extends RequestPost<CreateAssetsByProjectIdPathParameters, undefined, CreateAssetsByProjectIdRequestBody, CreateAssetsByProjectIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class CreateContactByProjectIdRequest extends RequestPost<CreateContactByProjectIdPathParameters, undefined, CreateContactByProjectIdRequestBody, CreateContactByProjectIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class CreateContactsByProjectIdRequest extends RequestPost<CreateContactsByProjectIdPathParameters, undefined, CreateContactsByProjectIdRequestBody, CreateContactsByProjectIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class CreateQrCodeByProjectIdRequest extends RequestPost<CreateQrCodeByProjectIdPathParameters, undefined, CreateQrCodeByProjectIdRequestBody, CreateQrCodeByProjectIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class CreateSmsTemplateByProjectIdRequest extends RequestPost<CreateSmsTemplateByProjectIdPathParameters, undefined, CreateSmsTemplateByProjectIdRequestBody, CreateSmsTemplateByProjectIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class DeleteProjectRequest extends RequestDelete<DeleteProjectPathParameters, undefined, DeleteProjectResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class DeleteSmsTemplateByProjectIdRequest extends RequestDelete<DeleteSmsTemplateByProjectIdPathParameters, undefined, DeleteSmsTemplateByProjectIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetAssetsByProjectIdRequest extends RequestGet<GetAssetsByProjectIdPathParameters, GetAssetsByProjectIdQueryStringParameters, GetAssetsByProjectIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetContactsByProjectIdRequest extends RequestGet<GetContactsByProjectIdPathParameters, GetContactsByProjectIdQueryStringParameters, GetContactsByProjectIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetProjectByProjectIdRequest extends RequestGet<GetProjectByProjectIdPathParameters, undefined, GetProjectByProjectIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetQrCodesByProjectIdRequest extends RequestGet<GetQrCodesByProjectIdPathParameters, GetQrCodesByProjectIdQueryStringParameters, GetQrCodesByProjectIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetScansByProjectIdRequest extends RequestGet<GetScansByProjectIdPathParameters, GetScansByProjectIdQueryStringParameters, GetScansByProjectIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetSmsTemplateByProjectIdRequest extends RequestGet<GetSmsTemplateByProjectIdPathParameters, undefined, GetSmsTemplateByProjectIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetSmsTemplatesByProjectIdRequest extends RequestGet<GetSmsTemplatesByProjectIdPathParameters, GetSmsTemplatesByProjectIdQueryStringParameters, GetSmsTemplatesByProjectIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class UpdateProjectByProjectIdRequest extends RequestPatch<UpdateProjectByProjectIdPathParameters, undefined, UpdateProjectByProjectIdRequestBody, UpdateProjectByProjectIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class UpdateSmsTemplateRequest extends RequestPatch<UpdateSmsTemplatePathParameters, undefined, undefined, UpdateSmsTemplateResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class DeleteQrCodeRequest extends RequestDelete<DeleteQrCodePathParameters, undefined, DeleteQrCodeResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetQrCodeRequest extends RequestGet<GetQrCodePathParameters, GetQrCodeQueryStringParameters, GetQrCodeResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class UpdateQrCodeRequest extends RequestPatch<UpdateQrCodePathParameters, undefined, UpdateQrCodeRequestBody, UpdateQrCodeResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class CreateContactByScanIdRequest extends RequestPost<CreateContactByScanIdPathParameters, undefined, CreateContactByScanIdRequestBody, CreateContactByScanIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetScanRequest extends RequestGet<GetScanPathParameters, undefined, GetScanResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class SendSmsByScanIdRequest extends RequestPost<SendSmsByScanIdPathParameters, undefined, SendSmsByScanIdRequestBody, SendSmsByScanIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetAccountDetailsRequest extends RequestGet<GetAccountDetailsPathParameters, undefined, GetAccountDetailsResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetUserDetailsRequest extends RequestGet<GetUserDetailsPathParameters, undefined, GetUserDetailsResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class SearchAccountsRequest extends RequestGet<undefined, SearchAccountsQueryStringParameters, SearchAccountsResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class SearchUsersRequest extends RequestGet<undefined, SearchUsersQueryStringParameters, SearchUsersResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class CreateAccountByUserIdRequest extends RequestPost<CreateAccountByUserIdPathParameters, undefined, CreateAccountByUserIdRequestBody, CreateAccountByUserIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetAccountsByUserIdRequest extends RequestGet<GetAccountsByUserIdPathParameters, GetAccountsByUserIdQueryStringParameters, GetAccountsByUserIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetErrorsByUserIdRequest extends RequestGet<GetErrorsByUserIdPathParameters, GetErrorsByUserIdQueryStringParameters, GetErrorsByUserIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetInvitationsByUserIdRequest extends RequestGet<GetInvitationsByUserIdPathParameters, GetInvitationsByUserIdQueryStringParameters, GetInvitationsByUserIdResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class GetUserRequest extends RequestGet<GetUserPathParameters, undefined, GetUserResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class UpdateUserRequest extends RequestPatch<UpdateUserPathParameters, undefined, UpdateUserRequestBody, UpdateUserResponseBody> {
    routeSegments?: RequestRouteSegment[];
}
export declare class SdkAccountInvitationsResources extends Resources {
    create(requestBody: CreateInvitationByAccountIdRequestBody, options?: any): Promise<CreateInvitationByAccountIdResponseBody>;
}
export declare class SdkAccountProjectsResources extends Resources {
    create(requestBody: CreateProjectByAccountIdRequestBody, options?: any): Promise<CreateProjectByAccountIdResponseBody>;
    get(queryStringParameters: GetProjectsByAccountIdQueryStringParameters, options?: any): Promise<GetProjectsByAccountIdResponseBody>;
}
export declare class SdkAccountUserResource extends Resource {
    delete(options?: any): Promise<DeleteUserByAccountIdResponseBody>;
}
export declare class SdkAccountAssetsResources extends Resources {
    get(queryStringParameters: GetAssetsByAccountIdQueryStringParameters, options?: any): Promise<GetAssetsByAccountIdResponseBody>;
}
export declare class SdkAccountContactsResources extends Resources {
    get(queryStringParameters: GetContactsByAccountIdQueryStringParameters, options?: any): Promise<GetContactsByAccountIdResponseBody>;
}
export declare class SdkAccountPricePlanResources extends Resources {
    get(options?: any): Promise<GetPricePlanByAccountIdResponseBody>;
    update(requestBody: UpdatePricePlanByAccountIdRequestBody, options?: any): Promise<UpdatePricePlanByAccountIdResponseBody>;
}
export declare class SdkAccountQrCodesResources extends Resources {
    get(queryStringParameters: GetQrCodesByAccountIdQueryStringParameters, options?: any): Promise<GetQrCodesByAccountIdResponseBody>;
}
export declare class SdkAccountScansResources extends Resources {
    get(queryStringParameters: GetScansByAccountIdQueryStringParameters, options?: any): Promise<GetScansByAccountIdResponseBody>;
}
export declare class SdkAccountUsersResources extends Resources {
    get(queryStringParameters: GetUsersByAccountIdQueryStringParameters, options?: any): Promise<GetUsersByAccountIdResponseBody>;
}
export declare class SdkAccountResource extends Resource {
    invitations(): SdkAccountInvitationsResources;
    projects(): SdkAccountProjectsResources;
    user(userId: string): SdkAccountUserResource;
    assets(): SdkAccountAssetsResources;
    contacts(): SdkAccountContactsResources;
    pricePlan(): SdkAccountPricePlanResources;
    qrCodes(): SdkAccountQrCodesResources;
    scans(): SdkAccountScansResources;
    users(): SdkAccountUsersResources;
    delete(options?: any): Promise<any>;
    get(options?: any): Promise<GetAccountResponseBody>;
    update(requestBody: UpdateAccountRequestBody, options?: any): Promise<UpdateAccountResponseBody>;
}
export declare class SdkInvitationUsersResources extends Resources {
    create(options?: any): Promise<CreateUserByInvitationIdResponseBody>;
}
export declare class SdkInvitationResource extends Resource {
    users(): SdkInvitationUsersResources;
    delete(options?: any): Promise<DeleteInvitationResponseBody>;
    get(options?: any): Promise<GetInvitationResponseBody>;
}
export declare class SdkAssetContactsResources extends Resources {
    create(requestBody: CreateContactByAssetIdRequestBody, options?: any): Promise<CreateContactByAssetIdResponseBody>;
    get(queryStringParameters: GetContactsByAssetIdQueryStringParameters, options?: any): Promise<GetContactsByAssetIdResponseBody>;
}
export declare class SdkAssetQrCodesResources extends Resources {
    create(requestBody: CreateQrCodeByAssetIdRequestBody, options?: any): Promise<CreateQrCodeByAssetIdResponseBody>;
    get(queryStringParameters: GetQrCodesByAssetIdQueryStringParameters, options?: any): Promise<GetQrCodesByAssetIdResponseBody>;
}
export declare class SdkAssetScansResources extends Resources {
    get(queryStringParameters: GetScansByAssetIdQueryStringParameters, options?: any): Promise<GetScansByAssetIdResponseBody>;
}
export declare class SdkAssetContactResource extends Resource {
    link(requestBody: LinkContactToAssetRequestBody, options?: any): Promise<LinkContactToAssetResponseBody>;
    unlink(options?: any): Promise<any>;
}
export declare class SdkAssetResource extends Resource {
    contacts(): SdkAssetContactsResources;
    qrCodes(): SdkAssetQrCodesResources;
    scans(): SdkAssetScansResources;
    contact(contactId: string): SdkAssetContactResource;
    delete(options?: any): Promise<DeleteAssetResponseBody>;
    get(options?: any): Promise<GetAssetResponseBody>;
    update(requestBody: UpdateAssetRequestBody, options?: any): Promise<UpdateAssetResponseBody>;
}
export declare class SdkAssetGroupResource extends Resource {
    delete(options?: any): Promise<DeleteAssetGroupResponseBody>;
    get(queryStringParameters: GetAssetGroupQueryStringParameters, options?: any): Promise<GetAssetGroupResponseBody>;
}
export declare class SdkAuthGetAccessTokenResources extends Resources {
    create(requestBody: GetAccessTokenRequestBody, options?: any): Promise<GetAccessTokenResponseBody>;
}
export declare class SdkContactResource extends Resource {
    delete(options?: any): Promise<DeleteContactResponseBody>;
    get(options?: any): Promise<GetContactResponseBody>;
    update(requestBody: UpdateContactRequestBody, options?: any): Promise<UpdateContactResponseBody>;
}
export declare class SdkOverviewAccountsResources extends Resources {
    get(options?: any): Promise<GetAccountsOverviewResponseBody>;
}
export declare class SdkOverviewActivityResources extends Resources {
    get(options?: any): Promise<GetActivityOverviewResponseBody>;
}
export declare class SdkOverviewUsersResources extends Resources {
    get(options?: any): Promise<GetUsersOverviewResponseBody>;
}
export declare class SdkProjectAssetsResources extends Resources {
    create(requestBody: CreateAssetByProjectIdRequestBody, options?: any): Promise<CreateAssetByProjectIdResponseBody>;
    get(queryStringParameters: GetAssetsByProjectIdQueryStringParameters, options?: any): Promise<GetAssetsByProjectIdResponseBody>;
}
export declare class SdkProjectAssetGroupsResources extends Resources {
    create(requestBody: CreateAssetGroupByProjectIdRequestBody, options?: any): Promise<CreateAssetGroupByProjectIdResponseBody>;
}
export declare class SdkProjectAssetsBatchResources extends Resources {
    create(requestBody: CreateAssetsByProjectIdRequestBody, options?: any): Promise<CreateAssetsByProjectIdResponseBody>;
}
export declare class SdkProjectContactsResources extends Resources {
    create(requestBody: CreateContactByProjectIdRequestBody, options?: any): Promise<CreateContactByProjectIdResponseBody>;
    get(queryStringParameters: GetContactsByProjectIdQueryStringParameters, options?: any): Promise<GetContactsByProjectIdResponseBody>;
}
export declare class SdkProjectContactsBatchResources extends Resources {
    create(requestBody: CreateContactsByProjectIdRequestBody, options?: any): Promise<CreateContactsByProjectIdResponseBody>;
}
export declare class SdkProjectQrCodesResources extends Resources {
    create(requestBody: CreateQrCodeByProjectIdRequestBody, options?: any): Promise<CreateQrCodeByProjectIdResponseBody>;
    get(queryStringParameters: GetQrCodesByProjectIdQueryStringParameters, options?: any): Promise<GetQrCodesByProjectIdResponseBody>;
}
export declare class SdkProjectSmsTemplatesResources extends Resources {
    create(requestBody: CreateSmsTemplateByProjectIdRequestBody, options?: any): Promise<CreateSmsTemplateByProjectIdResponseBody>;
    get(queryStringParameters: GetSmsTemplatesByProjectIdQueryStringParameters, options?: any): Promise<GetSmsTemplatesByProjectIdResponseBody>;
}
export declare class SdkProjectSmsTemplateResource extends Resource {
    delete(options?: any): Promise<DeleteSmsTemplateByProjectIdResponseBody>;
    get(options?: any): Promise<GetSmsTemplateByProjectIdResponseBody>;
    update(options?: any): Promise<UpdateSmsTemplateResponseBody>;
}
export declare class SdkProjectScansResources extends Resources {
    get(queryStringParameters: GetScansByProjectIdQueryStringParameters, options?: any): Promise<GetScansByProjectIdResponseBody>;
}
export declare class SdkProjectResource extends Resource {
    assets(): SdkProjectAssetsResources;
    assetGroups(): SdkProjectAssetGroupsResources;
    assetsBatch(): SdkProjectAssetsBatchResources;
    contacts(): SdkProjectContactsResources;
    contactsBatch(): SdkProjectContactsBatchResources;
    qrCodes(): SdkProjectQrCodesResources;
    smsTemplates(): SdkProjectSmsTemplatesResources;
    smsTemplate(smsTemplateName: string): SdkProjectSmsTemplateResource;
    scans(): SdkProjectScansResources;
    delete(options?: any): Promise<DeleteProjectResponseBody>;
    get(options?: any): Promise<GetProjectByProjectIdResponseBody>;
    update(requestBody: UpdateProjectByProjectIdRequestBody, options?: any): Promise<UpdateProjectByProjectIdResponseBody>;
}
export declare class SdkQrCodeResource extends Resource {
    delete(options?: any): Promise<DeleteQrCodeResponseBody>;
    get(queryStringParameters: GetQrCodeQueryStringParameters, options?: any): Promise<GetQrCodeResponseBody>;
    update(requestBody: UpdateQrCodeRequestBody, options?: any): Promise<UpdateQrCodeResponseBody>;
}
export declare class SdkScanContactsResources extends Resources {
    create(requestBody: CreateContactByScanIdRequestBody, options?: any): Promise<CreateContactByScanIdResponseBody>;
}
export declare class SdkScanSmsResources extends Resources {
    send(requestBody: SendSmsByScanIdRequestBody, options?: any): Promise<SendSmsByScanIdResponseBody>;
}
export declare class SdkScanResource extends Resource {
    contacts(): SdkScanContactsResources;
    sms(): SdkScanSmsResources;
    get(options?: any): Promise<GetScanResponseBody>;
}
export declare class SdkSearchAccountResource extends Resource {
    get(options?: any): Promise<GetAccountDetailsResponseBody>;
}
export declare class SdkSearchUserResource extends Resource {
    get(options?: any): Promise<GetUserDetailsResponseBody>;
}
export declare class SdkSearchAccountsResources extends Resources {
    get(queryStringParameters: SearchAccountsQueryStringParameters, options?: any): Promise<SearchAccountsResponseBody>;
}
export declare class SdkSearchUsersResources extends Resources {
    get(queryStringParameters: SearchUsersQueryStringParameters, options?: any): Promise<SearchUsersResponseBody>;
}
export declare class SdkUserAccountsResources extends Resources {
    create(requestBody: CreateAccountByUserIdRequestBody, options?: any): Promise<CreateAccountByUserIdResponseBody>;
    get(queryStringParameters: GetAccountsByUserIdQueryStringParameters, options?: any): Promise<GetAccountsByUserIdResponseBody>;
}
export declare class SdkUserErrorsResources extends Resources {
    get(queryStringParameters: GetErrorsByUserIdQueryStringParameters, options?: any): Promise<GetErrorsByUserIdResponseBody>;
}
export declare class SdkUserInvitationsResources extends Resources {
    get(queryStringParameters: GetInvitationsByUserIdQueryStringParameters, options?: any): Promise<GetInvitationsByUserIdResponseBody>;
}
export declare class SdkUserResource extends Resource {
    accounts(): SdkUserAccountsResources;
    errors(): SdkUserErrorsResources;
    invitations(): SdkUserInvitationsResources;
    get(options?: any): Promise<GetUserResponseBody>;
    update(requestBody: UpdateUserRequestBody, options?: any): Promise<UpdateUserResponseBody>;
}
export declare class SdkResources extends Resources {
    account(accountId: string): SdkAccountResource;
    invitation(invitationId: string): SdkInvitationResource;
    asset(assetId: string): SdkAssetResource;
    assetGroup(groupId: string): SdkAssetGroupResource;
    authGetAccessToken(): SdkAuthGetAccessTokenResources;
    contact(contactId: string): SdkContactResource;
    overviewAccounts(): SdkOverviewAccountsResources;
    overviewActivity(): SdkOverviewActivityResources;
    overviewUsers(): SdkOverviewUsersResources;
    project(projectId: string): SdkProjectResource;
    qrCode(qrCodeId: string): SdkQrCodeResource;
    scan(scanId: string): SdkScanResource;
    searchAccount(accountId: string): SdkSearchAccountResource;
    searchUser(userId: string): SdkSearchUserResource;
    searchAccounts(): SdkSearchAccountsResources;
    searchUsers(): SdkSearchUsersResources;
    user(userId: string): SdkUserResource;
}
//# sourceMappingURL=sdk.d.ts.map